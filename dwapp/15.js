(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{498:function(e,n,s){"use strict";s.r(n),s.d(n,"conf",function(){return t}),s.d(n,"language",function(){return o});var t={brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}]},o={defaultToken:"",tokenPostfix:".dockerfile",instructions:/FROM|MAINTAINER|RUN|EXPOSE|ENV|ADD|ARG|VOLUME|LABEL|USER|WORKDIR|COPY|CMD|STOPSIGNAL|SHELL|HEALTHCHECK|ENTRYPOINT/,instructionAfter:/ONBUILD/,variableAfter:/ENV/,variable:/\${?[\w]+}?/,tokenizer:{root:[{include:"@whitespace"},{include:"@comment"},[/(@instructionAfter)(\s+)/,["keyword",{token:"",next:"@instructions"}]],["","keyword","@instructions"]],instructions:[[/(@variableAfter)(\s+)([\w]+)/,["keyword","",{token:"variable",next:"@arguments"}]],[/(@instructions)/,"keyword","@arguments"]],arguments:[{include:"@whitespace"},{include:"@strings"},[/(@variable)/,{cases:{"@eos":{token:"variable",next:"@popall"},"@default":"variable"}}],[/\\/,{cases:{"@eos":"","@default":""}}],[/./,{cases:{"@eos":{token:"",next:"@popall"},"@default":""}}]],whitespace:[[/\s+/,{cases:{"@eos":{token:"",next:"@popall"},"@default":""}}]],comment:[[/(^#.*$)/,"comment","@popall"]],strings:[[/'$/,"string","@popall"],[/'/,"string","@stringBody"],[/"$/,"string","@popall"],[/"/,"string","@dblStringBody"]],stringBody:[[/[^\\\$']/,{cases:{"@eos":{token:"string",next:"@popall"},"@default":"string"}}],[/\\./,"string.escape"],[/'$/,"string","@popall"],[/'/,"string","@pop"],[/(@variable)/,"variable"],[/\\$/,"string"],[/$/,"string","@popall"]],dblStringBody:[[/[^\\\$"]/,{cases:{"@eos":{token:"string",next:"@popall"},"@default":"string"}}],[/\\./,"string.escape"],[/"$/,"string","@popall"],[/"/,"string","@pop"],[/(@variable)/,"variable"],[/\\$/,"string"],[/$/,"string","@popall"]]}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzaWMtbGFuZ3VhZ2VzL2RvY2tlcmZpbGUvZG9ja2VyZmlsZS5qcyJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZCIsIl9fd2VicGFja19leHBvcnRzX18iLCJsYW5ndWFnZSIsImNvbmYiLCJicmFja2V0cyIsImF1dG9DbG9zaW5nUGFpcnMiLCJvcGVuIiwiY2xvc2UiLCJzdXJyb3VuZGluZ1BhaXJzIiwiZGVmYXVsdFRva2VuIiwidG9rZW5Qb3N0Zml4IiwiaW5zdHJ1Y3Rpb25zIiwiaW5zdHJ1Y3Rpb25BZnRlciIsInZhcmlhYmxlQWZ0ZXIiLCJ2YXJpYWJsZSIsInRva2VuaXplciIsInJvb3QiLCJpbmNsdWRlIiwidG9rZW4iLCJuZXh0IiwiYXJndW1lbnRzIiwiY2FzZXMiLCJAZW9zIiwiQGRlZmF1bHQiLCJ3aGl0ZXNwYWNlIiwiY29tbWVudCIsInN0cmluZ3MiLCJzdHJpbmdCb2R5IiwiZGJsU3RyaW5nQm9keSJdLCJtYXBwaW5ncyI6InFJQUFBQSxFQUFBQyxFQUFBQyxFQUFBLDZCQUFBQyxJQUtBLElBQUFDLEdBQ0FDLFdBQ0EsSUFBVyxNQUNYLFVBQ0EsVUFFQUMsbUJBQ1NDLEtBQUEsSUFBU0MsTUFBQSxNQUNURCxLQUFBLElBQUFDLE1BQUEsTUFDQUQsS0FBQSxJQUFBQyxNQUFBLE1BQ0FELEtBQUEsSUFBQUMsTUFBQSxNQUNBRCxLQUFBLElBQUFDLE1BQUEsTUFFVEMsbUJBQ1NGLEtBQUEsSUFBU0MsTUFBQSxNQUNURCxLQUFBLElBQUFDLE1BQUEsTUFDQUQsS0FBQSxJQUFBQyxNQUFBLE1BQ0FELEtBQUEsSUFBQUMsTUFBQSxNQUNBRCxLQUFBLElBQUFDLE1BQUEsT0FHVEwsR0FDQU8sYUFBQSxHQUNBQyxhQUFBLGNBQ0FDLGFBQUEsb0hBQ0FDLGlCQUFBLFVBQ0FDLGNBQUEsTUFDQUMsU0FBQSxjQUNBQyxXQUNBQyxPQUNhQyxRQUFBLGdCQUNBQSxRQUFBLGFBQ2IsdUNBQXNEQyxNQUFBLEdBQUFDLEtBQUEsb0JBQ3RELCtCQUVBUixlQUNBLDhDQUE4RE8sTUFBQSxXQUFBQyxLQUFBLGlCQUM5RCwyQ0FFQUMsWUFDYUgsUUFBQSxnQkFDQUEsUUFBQSxhQUNiLGVBQ0FJLE9BQ0FDLFFBQWlDSixNQUFBLFdBQUFDLEtBQUEsV0FDakNJLFdBQUEsZUFHQSxNQUNBRixPQUNBQyxPQUFBLEdBQ0FDLFdBQUEsT0FHQSxLQUNBRixPQUNBQyxRQUFpQ0osTUFBQSxHQUFBQyxLQUFBLFdBQ2pDSSxXQUFBLE9BS0FDLGFBQ0EsT0FDQUgsT0FDQUMsUUFBaUNKLE1BQUEsR0FBQUMsS0FBQSxXQUNqQ0ksV0FBQSxPQUlBRSxVQUNBLGdDQUdBQyxVQUNBLDBCQUNBLDZCQUNBLDBCQUNBLGdDQUVBQyxhQUNBLFlBQ0FOLE9BQ0FDLFFBQWlDSixNQUFBLFNBQUFDLEtBQUEsV0FDakNJLFdBQUEsYUFHQSx3QkFDQSwwQkFDQSxzQkFDQSwyQkFDQSxpQkFDQSx5QkFFQUssZ0JBQ0EsWUFDQVAsT0FDQUMsUUFBaUNKLE1BQUEsU0FBQUMsS0FBQSxXQUNqQ0ksV0FBQSxhQUdBLHdCQUNBLDBCQUNBLHNCQUNBLDJCQUNBLGlCQUNBIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ndXNlIHN0cmljdCc7XG5leHBvcnQgdmFyIGNvbmYgPSB7XG4gICAgYnJhY2tldHM6IFtcbiAgICAgICAgWyd7JywgJ30nXSxcbiAgICAgICAgWydbJywgJ10nXSxcbiAgICAgICAgWycoJywgJyknXVxuICAgIF0sXG4gICAgYXV0b0Nsb3NpbmdQYWlyczogW1xuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JyB9LFxuICAgICAgICB7IG9wZW46ICdbJywgY2xvc2U6ICddJyB9LFxuICAgICAgICB7IG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxuICAgICAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInIH0sXG4gICAgICAgIHsgb3BlbjogJ1xcJycsIGNsb3NlOiAnXFwnJyB9LFxuICAgIF0sXG4gICAgc3Vycm91bmRpbmdQYWlyczogW1xuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JyB9LFxuICAgICAgICB7IG9wZW46ICdbJywgY2xvc2U6ICddJyB9LFxuICAgICAgICB7IG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxuICAgICAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInIH0sXG4gICAgICAgIHsgb3BlbjogJ1xcJycsIGNsb3NlOiAnXFwnJyB9LFxuICAgIF1cbn07XG5leHBvcnQgdmFyIGxhbmd1YWdlID0ge1xuICAgIGRlZmF1bHRUb2tlbjogJycsXG4gICAgdG9rZW5Qb3N0Zml4OiAnLmRvY2tlcmZpbGUnLFxuICAgIGluc3RydWN0aW9uczogL0ZST018TUFJTlRBSU5FUnxSVU58RVhQT1NFfEVOVnxBRER8QVJHfFZPTFVNRXxMQUJFTHxVU0VSfFdPUktESVJ8Q09QWXxDTUR8U1RPUFNJR05BTHxTSEVMTHxIRUFMVEhDSEVDS3xFTlRSWVBPSU5ULyxcbiAgICBpbnN0cnVjdGlvbkFmdGVyOiAvT05CVUlMRC8sXG4gICAgdmFyaWFibGVBZnRlcjogL0VOVi8sXG4gICAgdmFyaWFibGU6IC9cXCR7P1tcXHddK30/LyxcbiAgICB0b2tlbml6ZXI6IHtcbiAgICAgICAgcm9vdDogW1xuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQHdoaXRlc3BhY2UnIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAY29tbWVudCcgfSxcbiAgICAgICAgICAgIFsvKEBpbnN0cnVjdGlvbkFmdGVyKShcXHMrKS8sIFsna2V5d29yZCcsIHsgdG9rZW46ICcnLCBuZXh0OiAnQGluc3RydWN0aW9ucycgfV1dLFxuICAgICAgICAgICAgWycnLCAna2V5d29yZCcsICdAaW5zdHJ1Y3Rpb25zJ11cbiAgICAgICAgXSxcbiAgICAgICAgaW5zdHJ1Y3Rpb25zOiBbXG4gICAgICAgICAgICBbLyhAdmFyaWFibGVBZnRlcikoXFxzKykoW1xcd10rKS8sIFsna2V5d29yZCcsICcnLCB7IHRva2VuOiAndmFyaWFibGUnLCBuZXh0OiAnQGFyZ3VtZW50cycgfV1dLFxuICAgICAgICAgICAgWy8oQGluc3RydWN0aW9ucykvLCAna2V5d29yZCcsICdAYXJndW1lbnRzJ11cbiAgICAgICAgXSxcbiAgICAgICAgYXJndW1lbnRzOiBbXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAd2hpdGVzcGFjZScgfSxcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BzdHJpbmdzJyB9LFxuICAgICAgICAgICAgWy8oQHZhcmlhYmxlKS8sIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZW9zJzogeyB0b2tlbjogJ3ZhcmlhYmxlJywgbmV4dDogJ0Bwb3BhbGwnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAndmFyaWFibGUnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFsvXFxcXC8sIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZW9zJzogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBbLy4vLCB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQGVvcyc6IHsgdG9rZW46ICcnLCBuZXh0OiAnQHBvcGFsbCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICcnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgXSxcbiAgICAgICAgLy8gRGVhbCB3aXRoIHdoaXRlIHNwYWNlLCBpbmNsdWRpbmcgY29tbWVudHNcbiAgICAgICAgd2hpdGVzcGFjZTogW1xuICAgICAgICAgICAgWy9cXHMrLywge1xuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0Blb3MnOiB7IHRva2VuOiAnJywgbmV4dDogJ0Bwb3BhbGwnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgIF0sXG4gICAgICAgIGNvbW1lbnQ6IFtcbiAgICAgICAgICAgIFsvKF4jLiokKS8sICdjb21tZW50JywgJ0Bwb3BhbGwnXVxuICAgICAgICBdLFxuICAgICAgICAvLyBSZWNvZ25pemUgc3RyaW5ncywgaW5jbHVkaW5nIHRob3NlIGJyb2tlbiBhY3Jvc3MgbGluZXMgd2l0aCBcXCAoYnV0IG5vdCB3aXRob3V0KVxuICAgICAgICBzdHJpbmdzOiBbXG4gICAgICAgICAgICBbLyckLywgJ3N0cmluZycsICdAcG9wYWxsJ10sXG4gICAgICAgICAgICBbLycvLCAnc3RyaW5nJywgJ0BzdHJpbmdCb2R5J10sXG4gICAgICAgICAgICBbL1wiJC8sICdzdHJpbmcnLCAnQHBvcGFsbCddLFxuICAgICAgICAgICAgWy9cIi8sICdzdHJpbmcnLCAnQGRibFN0cmluZ0JvZHknXVxuICAgICAgICBdLFxuICAgICAgICBzdHJpbmdCb2R5OiBbXG4gICAgICAgICAgICBbL1teXFxcXFxcJCddLywge1xuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0Blb3MnOiB7IHRva2VuOiAnc3RyaW5nJywgbmV4dDogJ0Bwb3BhbGwnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBbL1xcXFwuLywgJ3N0cmluZy5lc2NhcGUnXSxcbiAgICAgICAgICAgIFsvJyQvLCAnc3RyaW5nJywgJ0Bwb3BhbGwnXSxcbiAgICAgICAgICAgIFsvJy8sICdzdHJpbmcnLCAnQHBvcCddLFxuICAgICAgICAgICAgWy8oQHZhcmlhYmxlKS8sICd2YXJpYWJsZSddLFxuICAgICAgICAgICAgWy9cXFxcJC8sICdzdHJpbmcnXSxcbiAgICAgICAgICAgIFsvJC8sICdzdHJpbmcnLCAnQHBvcGFsbCddXG4gICAgICAgIF0sXG4gICAgICAgIGRibFN0cmluZ0JvZHk6IFtcbiAgICAgICAgICAgIFsvW15cXFxcXFwkXCJdLywge1xuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0Blb3MnOiB7IHRva2VuOiAnc3RyaW5nJywgbmV4dDogJ0Bwb3BhbGwnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBbL1xcXFwuLywgJ3N0cmluZy5lc2NhcGUnXSxcbiAgICAgICAgICAgIFsvXCIkLywgJ3N0cmluZycsICdAcG9wYWxsJ10sXG4gICAgICAgICAgICBbL1wiLywgJ3N0cmluZycsICdAcG9wJ10sXG4gICAgICAgICAgICBbLyhAdmFyaWFibGUpLywgJ3ZhcmlhYmxlJ10sXG4gICAgICAgICAgICBbL1xcXFwkLywgJ3N0cmluZyddLFxuICAgICAgICAgICAgWy8kLywgJ3N0cmluZycsICdAcG9wYWxsJ11cbiAgICAgICAgXVxuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9