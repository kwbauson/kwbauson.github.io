(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{465:function(e,t,n){"use strict";n.r(t);var o,r=n(507);function i(e){var t=r.f(),n=e===o.TypeScript?s:u,i=e===o.TypeScript?c:l;return{getInitialState:function(){return new a(e,r.a.None,!1)},tokenize:function(e,s){return function(e,t,n,i,s){var c={tokens:[],endState:new a(i.language,r.a.None,!1)};function u(e,t){0!==c.tokens.length&&c.tokens[c.tokens.length-1].scopes===t||c.tokens.push({startIndex:e,scopes:t})}var l=i.language===o.TypeScript;if(!l&&function(e,t,n){if(0===t.indexOf("#!"))return n(e,"comment.shebang"),!0}(0,s,u))return c;var m=n.getClassificationsForLine(s,i.eolState,!0),p=0;c.endState.eolState=m.finalLexState,c.endState.inJsDocComment=m.finalLexState===r.a.InMultiLineCommentTrivia&&(i.inJsDocComment||/\/\*\*.*$/.test(s));for(var g=0,d=m.entries;g<d.length;g++){var f,h=d[g];if(h.classification===r.e.Punctuation){var v=s.charCodeAt(p);f=e[v]||t[h.classification],u(p,f)}else h.classification===r.e.Comment?c.endState.inJsDocComment||/\/\*\*.*\*\//.test(s.substr(p,h.length))?u(p,l?"comment.doc.ts":"comment.doc.js"):u(p,l?"comment.ts":"comment.js"):u(p,t[h.classification]||"");p+=h.length}return c}(n,i,t,s,e)}}}!function(e){e[e.TypeScript=0]="TypeScript",e[e.EcmaScript5=1]="EcmaScript5"}(o||(o={}));var a=function(){function e(e,t,n){this.language=e,this.eolState=t,this.inJsDocComment=n}return e.prototype.clone=function(){return new e(this.language,this.eolState,this.inJsDocComment)},e.prototype.equals=function(t){return t===this||!!(t&&t instanceof e)&&(this.eolState===t.eolState&&this.inJsDocComment===t.inJsDocComment)},e}();var s=Object.create(null);s["(".charCodeAt(0)]="delimiter.parenthesis.ts",s[")".charCodeAt(0)]="delimiter.parenthesis.ts",s["{".charCodeAt(0)]="delimiter.bracket.ts",s["}".charCodeAt(0)]="delimiter.bracket.ts",s["[".charCodeAt(0)]="delimiter.array.ts",s["]".charCodeAt(0)]="delimiter.array.ts";var c=Object.create(null);c[r.e.Identifier]="identifier.ts",c[r.e.Keyword]="keyword.ts",c[r.e.Operator]="delimiter.ts",c[r.e.Punctuation]="delimiter.ts",c[r.e.NumberLiteral]="number.ts",c[r.e.RegExpLiteral]="regexp.ts",c[r.e.StringLiteral]="string.ts";var u=Object.create(null);u["(".charCodeAt(0)]="delimiter.parenthesis.js",u[")".charCodeAt(0)]="delimiter.parenthesis.js",u["{".charCodeAt(0)]="delimiter.bracket.js",u["}".charCodeAt(0)]="delimiter.bracket.js",u["[".charCodeAt(0)]="delimiter.array.js",u["]".charCodeAt(0)]="delimiter.array.js";var l=Object.create(null);l[r.e.Identifier]="identifier.js",l[r.e.Keyword]="keyword.js",l[r.e.Operator]="delimiter.js",l[r.e.Punctuation]="delimiter.js",l[r.e.NumberLiteral]="number.js",l[r.e.RegExpLiteral]="regexp.js",l[r.e.StringLiteral]="string.js";var m=monaco.Promise,p=function(){function e(e,t){var n=this;this._modeId=e,this._defaults=t,this._worker=null,this._idleCheckInterval=setInterval(function(){return n._checkIfIdle()},3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange(function(){return n._stopWorker()})}return e.prototype._stopWorker=function(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null},e.prototype.dispose=function(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()},e.prototype._checkIfIdle=function(){if(this._worker){var e=this._defaults.getWorkerMaxIdleTime(),t=Date.now()-this._lastUsedTime;e>0&&t>e&&this._stopWorker()}},e.prototype._getClient=function(){var e=this;if(this._lastUsedTime=Date.now(),!this._client){this._worker=monaco.editor.createWebWorker({moduleId:"vs/language/typescript/tsWorker",label:this._modeId,createData:{compilerOptions:this._defaults.getCompilerOptions(),extraLibs:this._defaults.getExtraLibs()}});var t=this._worker.getProxy();this._defaults.getEagerModelSync()&&(t=t.then(function(t){return e._worker.withSyncedResources(monaco.editor.getModels().filter(function(t){return t.getModeId()===e._modeId}).map(function(e){return e.uri}))})),this._client=t}return this._client},e.prototype.getLanguageServiceWorker=function(){for(var e,t,n,o,r,i=this,a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];return t=this._getClient().then(function(t){e=t}).then(function(e){return i._worker.withSyncedResources(a)}).then(function(t){return e}),r=new m(function(e,t){n=e,o=t},function(){}),t.then(n,o),r},e}();var g,d=(g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}g(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),f=monaco.Uri,h=monaco.Promise,v=function(){function e(e){this._worker=e}return e.prototype._positionToOffset=function(e,t){return monaco.editor.getModel(e).getOffsetAt(t)},e.prototype._offsetToPosition=function(e,t){return monaco.editor.getModel(e).getPositionAt(t)},e.prototype._textSpanToRange=function(e,t){var n=this._offsetToPosition(e,t.start),o=this._offsetToPosition(e,t.start+t.length);return{startLineNumber:n.lineNumber,startColumn:n.column,endLineNumber:o.lineNumber,endColumn:o.column}},e}(),y=function(e){function t(t,n,o){var r=e.call(this,o)||this;r._defaults=t,r._selector=n,r._disposables=[],r._listener=Object.create(null);var i=function(e){if(e.getModeId()===n){var t,o=e.onDidChangeContent(function(){clearTimeout(t),t=setTimeout(function(){return r._doValidate(e.uri)},500)});r._listener[e.uri.toString()]={dispose:function(){o.dispose(),clearTimeout(t)}},r._doValidate(e.uri)}},a=function(e){monaco.editor.setModelMarkers(e,r._selector,[]);var t=e.uri.toString();r._listener[t]&&(r._listener[t].dispose(),delete r._listener[t])};return r._disposables.push(monaco.editor.onDidCreateModel(i)),r._disposables.push(monaco.editor.onWillDisposeModel(a)),r._disposables.push(monaco.editor.onDidChangeModelLanguage(function(e){a(e.model),i(e.model)})),r._disposables.push({dispose:function(){for(var e=0,t=monaco.editor.getModels();e<t.length;e++){var n=t[e];a(n)}}}),r._disposables.push(r._defaults.onDidChange(function(){for(var e=0,t=monaco.editor.getModels();e<t.length;e++){var n=t[e];a(n),i(n)}})),monaco.editor.getModels().forEach(i),r}return d(t,e),t.prototype.dispose=function(){this._disposables.forEach(function(e){return e&&e.dispose()}),this._disposables=[]},t.prototype._doValidate=function(e){var t=this;this._worker(e).then(function(n){if(!monaco.editor.getModel(e))return null;var o=[],r=t._defaults.getDiagnosticsOptions(),i=r.noSyntaxValidation,a=r.noSemanticValidation;return i||o.push(n.getSyntacticDiagnostics(e.toString())),a||o.push(n.getSemanticDiagnostics(e.toString())),h.join(o)}).then(function(n){if(!n||!monaco.editor.getModel(e))return null;var o=n.reduce(function(e,t){return t.concat(e)},[]).map(function(n){return t._convertDiagnostics(e,n)});monaco.editor.setModelMarkers(monaco.editor.getModel(e),t._selector,o)}).done(void 0,function(e){console.error(e)})},t.prototype._convertDiagnostics=function(e,t){var n=this._offsetToPosition(e,t.start),o=n.lineNumber,i=n.column,a=this._offsetToPosition(e,t.start+t.length),s=a.lineNumber,c=a.column;return{severity:monaco.MarkerSeverity.Error,startLineNumber:o,startColumn:i,endLineNumber:s,endColumn:c,message:r.i(t.messageText,"\n")}},t}(v),b=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),Object.defineProperty(t.prototype,"triggerCharacters",{get:function(){return["."]},enumerable:!0,configurable:!0}),t.prototype.provideCompletionItems=function(e,n,o){e.getWordUntilPosition(n);var r=e.uri,i=this._positionToOffset(r,n);return j(o,this._worker(r).then(function(e){return e.getCompletionsAtPosition(r.toString(),i)}).then(function(e){if(e)return e.entries.map(function(e){return{uri:r,position:n,label:e.name,sortText:e.sortText,kind:t.convertKind(e.kind)}})}))},t.prototype.resolveCompletionItem=function(e,n){var o=this,i=e,a=i.uri,s=i.position;return j(n,this._worker(a).then(function(e){return e.getCompletionEntryDetails(a.toString(),o._positionToOffset(a,s),i.label)}).then(function(e){return e?{uri:a,position:s,label:e.name,kind:t.convertKind(e.kind),detail:r.h(e.displayParts),documentation:r.h(e.documentation)}:i}))},t.convertKind=function(e){switch(e){case I.primitiveType:case I.keyword:return monaco.languages.CompletionItemKind.Keyword;case I.variable:case I.localVariable:return monaco.languages.CompletionItemKind.Variable;case I.memberVariable:case I.memberGetAccessor:case I.memberSetAccessor:return monaco.languages.CompletionItemKind.Field;case I.function:case I.memberFunction:case I.constructSignature:case I.callSignature:case I.indexSignature:return monaco.languages.CompletionItemKind.Function;case I.enum:return monaco.languages.CompletionItemKind.Enum;case I.module:return monaco.languages.CompletionItemKind.Module;case I.class:return monaco.languages.CompletionItemKind.Class;case I.interface:return monaco.languages.CompletionItemKind.Interface;case I.warning:return monaco.languages.CompletionItemKind.File}return monaco.languages.CompletionItemKind.Property},t}(v),S=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.signatureHelpTriggerCharacters=["(",","],t}return d(t,e),t.prototype.provideSignatureHelp=function(e,t,n){var o=this,i=e.uri;return j(n,this._worker(i).then(function(e){return e.getSignatureHelpItems(i.toString(),o._positionToOffset(i,t))}).then(function(e){if(e){var t={activeSignature:e.selectedItemIndex,activeParameter:e.argumentIndex,signatures:[]};return e.items.forEach(function(e){var n={label:"",documentation:null,parameters:[]};n.label+=r.h(e.prefixDisplayParts),e.parameters.forEach(function(t,o,i){var a=r.h(t.displayParts),s={label:a,documentation:r.h(t.documentation)};n.label+=a,n.parameters.push(s),o<i.length-1&&(n.label+=r.h(e.separatorDisplayParts))}),n.label+=r.h(e.suffixDisplayParts),t.signatures.push(n)}),t}}))},t}(v),_=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.provideHover=function(e,t,n){var o=this,i=e.uri;return j(n,this._worker(i).then(function(e){return e.getQuickInfoAtPosition(i.toString(),o._positionToOffset(i,t))}).then(function(e){if(e){var t=r.h(e.documentation),n=e.tags?e.tags.map(function(e){var t="*@"+e.name+"*";return e.text?t+(e.text.match(/\r\n|\n/g)?" \n"+e.text:" - "+e.text):t}).join("  \n\n"):"",a=r.h(e.displayParts);return{range:o._textSpanToRange(i,e.textSpan),contents:[{value:a},{value:t+(n?"\n\n"+n:"")}]}}}))},t}(v),C=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.provideDocumentHighlights=function(e,t,n){var o=this,r=e.uri;return j(n,this._worker(r).then(function(e){return e.getOccurrencesAtPosition(r.toString(),o._positionToOffset(r,t))}).then(function(e){if(e)return e.map(function(e){return{range:o._textSpanToRange(r,e.textSpan),kind:e.isWriteAccess?monaco.languages.DocumentHighlightKind.Write:monaco.languages.DocumentHighlightKind.Text}})}))},t}(v),w=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.provideDefinition=function(e,t,n){var o=this,r=e.uri;return j(n,this._worker(r).then(function(e){return e.getDefinitionAtPosition(r.toString(),o._positionToOffset(r,t))}).then(function(e){if(e){for(var t=[],n=0,r=e;n<r.length;n++){var i=r[n],a=f.parse(i.fileName);monaco.editor.getModel(a)&&t.push({uri:a,range:o._textSpanToRange(a,i.textSpan)})}return t}}))},t}(v),k=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.provideReferences=function(e,t,n,o){var r=this,i=e.uri;return j(o,this._worker(i).then(function(e){return e.getReferencesAtPosition(i.toString(),r._positionToOffset(i,t))}).then(function(e){if(e){for(var t=[],n=0,o=e;n<o.length;n++){var i=o[n],a=f.parse(i.fileName);monaco.editor.getModel(a)&&t.push({uri:a,range:r._textSpanToRange(a,i.textSpan)})}return t}}))},t}(v),T=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.provideDocumentSymbols=function(e,t){var n=this,o=e.uri;return j(t,this._worker(o).then(function(e){return e.getNavigationBarItems(o.toString())}).then(function(e){if(e){var t=function(e,r,i){var a={name:r.text,kind:x[r.kind]||monaco.languages.SymbolKind.Variable,location:{uri:o,range:n._textSpanToRange(o,r.spans[0])},containerName:i};if(r.childItems&&r.childItems.length>0)for(var s=0,c=r.childItems;s<c.length;s++){var u=c[s];t(e,u,a.name)}e.push(a)},r=[];return e.forEach(function(e){return t(r,e)}),r}}))},t}(v),I=function(){function e(){}return e.unknown="",e.keyword="keyword",e.script="script",e.module="module",e.class="class",e.interface="interface",e.type="type",e.enum="enum",e.variable="var",e.localVariable="local var",e.function="function",e.localFunction="local function",e.memberFunction="method",e.memberGetAccessor="getter",e.memberSetAccessor="setter",e.memberVariable="property",e.constructorImplementation="constructor",e.callSignature="call",e.indexSignature="index",e.constructSignature="construct",e.parameter="parameter",e.typeParameter="type parameter",e.primitiveType="primitive type",e.label="label",e.alias="alias",e.const="const",e.let="let",e.warning="warning",e}(),x=Object.create(null);x[I.module]=monaco.languages.SymbolKind.Module,x[I.class]=monaco.languages.SymbolKind.Class,x[I.enum]=monaco.languages.SymbolKind.Enum,x[I.interface]=monaco.languages.SymbolKind.Interface,x[I.memberFunction]=monaco.languages.SymbolKind.Method,x[I.memberVariable]=monaco.languages.SymbolKind.Property,x[I.memberGetAccessor]=monaco.languages.SymbolKind.Property,x[I.memberSetAccessor]=monaco.languages.SymbolKind.Property,x[I.variable]=monaco.languages.SymbolKind.Variable,x[I.const]=monaco.languages.SymbolKind.Variable,x[I.localVariable]=monaco.languages.SymbolKind.Variable,x[I.variable]=monaco.languages.SymbolKind.Variable,x[I.function]=monaco.languages.SymbolKind.Function,x[I.localFunction]=monaco.languages.SymbolKind.Function;var P,A,O=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t._convertOptions=function(e){return{ConvertTabsToSpaces:e.insertSpaces,TabSize:e.tabSize,IndentSize:e.tabSize,IndentStyle:r.b.Smart,NewLineCharacter:"\n",InsertSpaceAfterCommaDelimiter:!0,InsertSpaceAfterSemicolonInForStatements:!0,InsertSpaceBeforeAndAfterBinaryOperators:!0,InsertSpaceAfterKeywordsInControlFlowStatements:!0,InsertSpaceAfterFunctionKeywordForAnonymousFunctions:!0,InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis:!1,InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets:!1,InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces:!1,PlaceOpenBraceOnNewLineForControlBlocks:!1,PlaceOpenBraceOnNewLineForFunctions:!1}},t.prototype._convertTextChanges=function(e,t){return{text:t.newText,range:this._textSpanToRange(e,t.span)}},t}(v),D=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.provideDocumentRangeFormattingEdits=function(e,t,n,o){var r=this,i=e.uri;return j(o,this._worker(i).then(function(e){return e.getFormattingEditsForRange(i.toString(),r._positionToOffset(i,{lineNumber:t.startLineNumber,column:t.startColumn}),r._positionToOffset(i,{lineNumber:t.endLineNumber,column:t.endColumn}),O._convertOptions(n))}).then(function(e){if(e)return e.map(function(e){return r._convertTextChanges(i,e)})}))},t}(O),K=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),Object.defineProperty(t.prototype,"autoFormatTriggerCharacters",{get:function(){return[";","}","\n"]},enumerable:!0,configurable:!0}),t.prototype.provideOnTypeFormattingEdits=function(e,t,n,o,r){var i=this,a=e.uri;return j(r,this._worker(a).then(function(e){return e.getFormattingEditsAfterKeystroke(a.toString(),i._positionToOffset(a,t),n,O._convertOptions(o))}).then(function(e){if(e)return e.map(function(e){return i._convertTextChanges(a,e)})}))},t}(O);function j(e,t){return e.onCancellationRequested(function(){return t.cancel()}),t}function N(e){A=E(e,"typescript",o.TypeScript)}function F(e){P=E(e,"javascript",o.EcmaScript5)}function L(){return new monaco.Promise(function(e,t){if(!P)return t("JavaScript not registered!");e(P)})}function M(){return new monaco.Promise(function(e,t){if(!A)return t("TypeScript not registered!");e(A)})}function E(e,t,n){var o=new p(t,e),r=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return o.getLanguageServiceWorker.apply(o,[e].concat(t))};return monaco.languages.registerCompletionItemProvider(t,new b(r)),monaco.languages.registerSignatureHelpProvider(t,new S(r)),monaco.languages.registerHoverProvider(t,new _(r)),monaco.languages.registerDocumentHighlightProvider(t,new C(r)),monaco.languages.registerDefinitionProvider(t,new w(r)),monaco.languages.registerReferenceProvider(t,new k(r)),monaco.languages.registerDocumentSymbolProvider(t,new T(r)),monaco.languages.registerDocumentRangeFormattingEditProvider(t,new D(r)),monaco.languages.registerOnTypeFormattingEditProvider(t,new K(r)),new y(e,t,r),monaco.languages.setLanguageConfiguration(t,R),monaco.languages.setTokensProvider(t,i(n)),r}n.d(t,"setupTypeScript",function(){return N}),n.d(t,"setupJavaScript",function(){return F}),n.d(t,"getJavaScriptWorker",function(){return L}),n.d(t,"getTypeScriptWorker",function(){return M});var R={wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],onEnterRules:[{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,afterText:/^\s*\*\/$/,action:{indentAction:monaco.languages.IndentAction.IndentOutdent,appendText:" * "}},{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,action:{indentAction:monaco.languages.IndentAction.None,appendText:" * "}},{beforeText:/^(\t|(\ \ ))*\ \*(\ ([^\*]|\*(?!\/))*)?$/,action:{indentAction:monaco.languages.IndentAction.None,appendText:"* "}},{beforeText:/^(\t|(\ \ ))*\ \*\/\s*$/,action:{indentAction:monaco.languages.IndentAction.None,removeText:1}}],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]},{open:"'",close:"'",notIn:["string","comment"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]}],folding:{markers:{start:new RegExp("^\\s*//\\s*#?region\\b"),end:new RegExp("^\\s*//\\s*#?endregion\\b")}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvdHlwZXNjcmlwdC90b2tlbml6YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2xhbmd1YWdlL3R5cGVzY3JpcHQvd29ya2VyTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvdHlwZXNjcmlwdC9sYW5ndWFnZUZlYXR1cmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9sYW5ndWFnZS90eXBlc2NyaXB0L3RzTW9kZS5qcyJdLCJuYW1lcyI6WyJMYW5ndWFnZSIsImNyZWF0ZVRva2VuaXphdGlvblN1cHBvcnQiLCJsYW5ndWFnZSIsImNsYXNzaWZpZXIiLCJ0eXBlc2NyaXB0U2VydmljZXMiLCJicmFja2V0VHlwZVRhYmxlIiwiVHlwZVNjcmlwdCIsInRzQnJhY2tldFR5cGVUYWJsZSIsImpzQnJhY2tldFR5cGVUYWJsZSIsInRva2VuVHlwZVRhYmxlIiwidHNUb2tlblR5cGVUYWJsZSIsImpzVG9rZW5UeXBlVGFibGUiLCJnZXRJbml0aWFsU3RhdGUiLCJTdGF0ZSIsIk5vbmUiLCJ0b2tlbml6ZSIsImxpbmUiLCJzdGF0ZSIsInRleHQiLCJyZXQiLCJ0b2tlbnMiLCJlbmRTdGF0ZSIsImFwcGVuZEZuIiwic3RhcnRJbmRleCIsInR5cGUiLCJsZW5ndGgiLCJzY29wZXMiLCJwdXNoIiwiaXNUeXBlU2NyaXB0IiwiZGVsdGFPZmZzZXQiLCJpbmRleE9mIiwiY2hlY2tTaGVCYW5nIiwicmVzdWx0IiwiZ2V0Q2xhc3NpZmljYXRpb25zRm9yTGluZSIsImVvbFN0YXRlIiwib2Zmc2V0IiwiZmluYWxMZXhTdGF0ZSIsImluSnNEb2NDb21tZW50IiwiSW5NdWx0aUxpbmVDb21tZW50VHJpdmlhIiwidGVzdCIsIl9pIiwiX2EiLCJlbnRyaWVzIiwiZW50cnkiLCJjbGFzc2lmaWNhdGlvbiIsIlB1bmN0dWF0aW9uIiwiY2giLCJjaGFyQ29kZUF0IiwiQ29tbWVudCIsInN1YnN0ciIsInRoaXMiLCJwcm90b3R5cGUiLCJjbG9uZSIsImVxdWFscyIsIm90aGVyIiwiT2JqZWN0IiwiY3JlYXRlIiwiSWRlbnRpZmllciIsIktleXdvcmQiLCJPcGVyYXRvciIsIk51bWJlckxpdGVyYWwiLCJSZWdFeHBMaXRlcmFsIiwiU3RyaW5nTGl0ZXJhbCIsIlByb21pc2UiLCJtb25hY28iLCJXb3JrZXJNYW5hZ2VyIiwibW9kZUlkIiwiZGVmYXVsdHMiLCJfdGhpcyIsIl9tb2RlSWQiLCJfZGVmYXVsdHMiLCJfd29ya2VyIiwiX2lkbGVDaGVja0ludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJfY2hlY2tJZklkbGUiLCJfbGFzdFVzZWRUaW1lIiwiX2NvbmZpZ0NoYW5nZUxpc3RlbmVyIiwib25EaWRDaGFuZ2UiLCJfc3RvcFdvcmtlciIsImRpc3Bvc2UiLCJfY2xpZW50IiwiY2xlYXJJbnRlcnZhbCIsIm1heElkbGVUaW1lIiwiZ2V0V29ya2VyTWF4SWRsZVRpbWUiLCJ0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCIsIkRhdGUiLCJub3ciLCJfZ2V0Q2xpZW50IiwiZWRpdG9yIiwiY3JlYXRlV2ViV29ya2VyIiwibW9kdWxlSWQiLCJsYWJlbCIsImNyZWF0ZURhdGEiLCJjb21waWxlck9wdGlvbnMiLCJnZXRDb21waWxlck9wdGlvbnMiLCJleHRyYUxpYnMiLCJnZXRFeHRyYUxpYnMiLCJwIiwiZ2V0UHJveHkiLCJnZXRFYWdlck1vZGVsU3luYyIsInRoZW4iLCJ3b3JrZXIiLCJ3aXRoU3luY2VkUmVzb3VyY2VzIiwiZ2V0TW9kZWxzIiwiZmlsdGVyIiwibW9kZWwiLCJnZXRNb2RlSWQiLCJtYXAiLCJ1cmkiLCJnZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIiLCJjb21wbGV0ZUNhbGxiYWNrIiwiZXJyb3JDYWxsYmFjayIsInIiLCJyZXNvdXJjZXMiLCJhcmd1bWVudHMiLCJjbGllbnQiLCJfIiwiYyIsImUiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsImQiLCJiIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwiVXJpIiwibGFuZ3VhZ2VGZWF0dXJlc19Qcm9taXNlIiwiQWRhcHRlciIsIl9wb3NpdGlvblRvT2Zmc2V0IiwicG9zaXRpb24iLCJnZXRNb2RlbCIsImdldE9mZnNldEF0IiwiX29mZnNldFRvUG9zaXRpb24iLCJnZXRQb3NpdGlvbkF0IiwiX3RleHRTcGFuVG9SYW5nZSIsInNwYW4iLCJwMSIsInN0YXJ0IiwicDIiLCJzdGFydExpbmVOdW1iZXIiLCJsaW5lTnVtYmVyIiwic3RhcnRDb2x1bW4iLCJjb2x1bW4iLCJlbmRMaW5lTnVtYmVyIiwiZW5kQ29sdW1uIiwibGFuZ3VhZ2VGZWF0dXJlc19EaWFnbm9zdGNzQWRhcHRlciIsIl9zdXBlciIsIkRpYWdub3N0Y3NBZGFwdGVyIiwiX3NlbGVjdG9yIiwiY2FsbCIsIl9kaXNwb3NhYmxlcyIsIl9saXN0ZW5lciIsIm9uTW9kZWxBZGQiLCJoYW5kbGUiLCJjaGFuZ2VTdWJzY3JpcHRpb24iLCJvbkRpZENoYW5nZUNvbnRlbnQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiX2RvVmFsaWRhdGUiLCJ0b1N0cmluZyIsIm9uTW9kZWxSZW1vdmVkIiwic2V0TW9kZWxNYXJrZXJzIiwia2V5Iiwib25EaWRDcmVhdGVNb2RlbCIsIm9uV2lsbERpc3Bvc2VNb2RlbCIsIm9uRGlkQ2hhbmdlTW9kZWxMYW5ndWFnZSIsImV2ZW50IiwiZm9yRWFjaCIsInJlc291cmNlIiwicHJvbWlzZXMiLCJnZXREaWFnbm9zdGljc09wdGlvbnMiLCJub1N5bnRheFZhbGlkYXRpb24iLCJub1NlbWFudGljVmFsaWRhdGlvbiIsImdldFN5bnRhY3RpY0RpYWdub3N0aWNzIiwiZ2V0U2VtYW50aWNEaWFnbm9zdGljcyIsImpvaW4iLCJkaWFnbm9zdGljcyIsIm1hcmtlcnMiLCJyZWR1Y2UiLCJjb25jYXQiLCJfY29udmVydERpYWdub3N0aWNzIiwiZG9uZSIsInVuZGVmaW5lZCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImRpYWciLCJfYiIsInNldmVyaXR5IiwiTWFya2VyU2V2ZXJpdHkiLCJFcnJvciIsIm1lc3NhZ2UiLCJtZXNzYWdlVGV4dCIsImxhbmd1YWdlRmVhdHVyZXNfU3VnZ2VzdEFkYXB0ZXIiLCJTdWdnZXN0QWRhcHRlciIsImFwcGx5IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwicHJvdmlkZUNvbXBsZXRpb25JdGVtcyIsInRva2VuIiwiZ2V0V29yZFVudGlsUG9zaXRpb24iLCJ3aXJlQ2FuY2VsbGF0aW9uVG9rZW4iLCJnZXRDb21wbGV0aW9uc0F0UG9zaXRpb24iLCJpbmZvIiwibmFtZSIsInNvcnRUZXh0Iiwia2luZCIsImNvbnZlcnRLaW5kIiwicmVzb2x2ZUNvbXBsZXRpb25JdGVtIiwiaXRlbSIsIm15SXRlbSIsImdldENvbXBsZXRpb25FbnRyeURldGFpbHMiLCJkZXRhaWxzIiwiZGV0YWlsIiwiZGlzcGxheVBhcnRzIiwiZG9jdW1lbnRhdGlvbiIsIktpbmQiLCJwcmltaXRpdmVUeXBlIiwia2V5d29yZCIsImxhbmd1YWdlcyIsIkNvbXBsZXRpb25JdGVtS2luZCIsInZhcmlhYmxlIiwibG9jYWxWYXJpYWJsZSIsIlZhcmlhYmxlIiwibWVtYmVyVmFyaWFibGUiLCJtZW1iZXJHZXRBY2Nlc3NvciIsIm1lbWJlclNldEFjY2Vzc29yIiwiRmllbGQiLCJmdW5jdGlvbiIsIm1lbWJlckZ1bmN0aW9uIiwiY29uc3RydWN0U2lnbmF0dXJlIiwiY2FsbFNpZ25hdHVyZSIsImluZGV4U2lnbmF0dXJlIiwiRnVuY3Rpb24iLCJlbnVtIiwiRW51bSIsIm1vZHVsZSIsIk1vZHVsZSIsImNsYXNzIiwiQ2xhc3MiLCJpbnRlcmZhY2UiLCJJbnRlcmZhY2UiLCJ3YXJuaW5nIiwiRmlsZSIsIlByb3BlcnR5IiwibGFuZ3VhZ2VGZWF0dXJlc19TaWduYXR1cmVIZWxwQWRhcHRlciIsIlNpZ25hdHVyZUhlbHBBZGFwdGVyIiwic2lnbmF0dXJlSGVscFRyaWdnZXJDaGFyYWN0ZXJzIiwicHJvdmlkZVNpZ25hdHVyZUhlbHAiLCJnZXRTaWduYXR1cmVIZWxwSXRlbXMiLCJhY3RpdmVTaWduYXR1cmUiLCJzZWxlY3RlZEl0ZW1JbmRleCIsImFjdGl2ZVBhcmFtZXRlciIsImFyZ3VtZW50SW5kZXgiLCJzaWduYXR1cmVzIiwiaXRlbXMiLCJzaWduYXR1cmUiLCJwYXJhbWV0ZXJzIiwicHJlZml4RGlzcGxheVBhcnRzIiwiaSIsImEiLCJwYXJhbWV0ZXIiLCJzZXBhcmF0b3JEaXNwbGF5UGFydHMiLCJzdWZmaXhEaXNwbGF5UGFydHMiLCJsYW5ndWFnZUZlYXR1cmVzX1F1aWNrSW5mb0FkYXB0ZXIiLCJRdWlja0luZm9BZGFwdGVyIiwicHJvdmlkZUhvdmVyIiwiZ2V0UXVpY2tJbmZvQXRQb3NpdGlvbiIsInRhZ3MiLCJ0YWciLCJtYXRjaCIsImNvbnRlbnRzIiwicmFuZ2UiLCJ0ZXh0U3BhbiIsInZhbHVlIiwiT2NjdXJyZW5jZXNBZGFwdGVyIiwicHJvdmlkZURvY3VtZW50SGlnaGxpZ2h0cyIsImdldE9jY3VycmVuY2VzQXRQb3NpdGlvbiIsImlzV3JpdGVBY2Nlc3MiLCJEb2N1bWVudEhpZ2hsaWdodEtpbmQiLCJXcml0ZSIsIlRleHQiLCJEZWZpbml0aW9uQWRhcHRlciIsInByb3ZpZGVEZWZpbml0aW9uIiwiZ2V0RGVmaW5pdGlvbkF0UG9zaXRpb24iLCJlbnRyaWVzXzEiLCJwYXJzZSIsImZpbGVOYW1lIiwiUmVmZXJlbmNlQWRhcHRlciIsInByb3ZpZGVSZWZlcmVuY2VzIiwiY29udGV4dCIsImdldFJlZmVyZW5jZXNBdFBvc2l0aW9uIiwiZW50cmllc18yIiwiT3V0bGluZUFkYXB0ZXIiLCJwcm92aWRlRG9jdW1lbnRTeW1ib2xzIiwiZ2V0TmF2aWdhdGlvbkJhckl0ZW1zIiwiY29udmVydCIsImJ1Y2tldCIsImNvbnRhaW5lckxhYmVsIiwib3V0bGluZVR5cGVUYWJsZSIsIlN5bWJvbEtpbmQiLCJsb2NhdGlvbiIsInNwYW5zIiwiY29udGFpbmVyTmFtZSIsImNoaWxkSXRlbXMiLCJjaGlsZCIsInVua25vd24iLCJzY3JpcHQiLCJsb2NhbEZ1bmN0aW9uIiwiY29uc3RydWN0b3JJbXBsZW1lbnRhdGlvbiIsInR5cGVQYXJhbWV0ZXIiLCJhbGlhcyIsImNvbnN0IiwibGV0IiwiTWV0aG9kIiwiamF2YVNjcmlwdFdvcmtlciIsInR5cGVTY3JpcHRXb3JrZXIiLCJsYW5ndWFnZUZlYXR1cmVzX0Zvcm1hdEhlbHBlciIsIkZvcm1hdEhlbHBlciIsIl9jb252ZXJ0T3B0aW9ucyIsIm9wdGlvbnMiLCJDb252ZXJ0VGFic1RvU3BhY2VzIiwiaW5zZXJ0U3BhY2VzIiwiVGFiU2l6ZSIsInRhYlNpemUiLCJJbmRlbnRTaXplIiwiSW5kZW50U3R5bGUiLCJTbWFydCIsIk5ld0xpbmVDaGFyYWN0ZXIiLCJJbnNlcnRTcGFjZUFmdGVyQ29tbWFEZWxpbWl0ZXIiLCJJbnNlcnRTcGFjZUFmdGVyU2VtaWNvbG9uSW5Gb3JTdGF0ZW1lbnRzIiwiSW5zZXJ0U3BhY2VCZWZvcmVBbmRBZnRlckJpbmFyeU9wZXJhdG9ycyIsIkluc2VydFNwYWNlQWZ0ZXJLZXl3b3Jkc0luQ29udHJvbEZsb3dTdGF0ZW1lbnRzIiwiSW5zZXJ0U3BhY2VBZnRlckZ1bmN0aW9uS2V5d29yZEZvckFub255bW91c0Z1bmN0aW9ucyIsIkluc2VydFNwYWNlQWZ0ZXJPcGVuaW5nQW5kQmVmb3JlQ2xvc2luZ05vbmVtcHR5UGFyZW50aGVzaXMiLCJJbnNlcnRTcGFjZUFmdGVyT3BlbmluZ0FuZEJlZm9yZUNsb3NpbmdOb25lbXB0eUJyYWNrZXRzIiwiSW5zZXJ0U3BhY2VBZnRlck9wZW5pbmdBbmRCZWZvcmVDbG9zaW5nVGVtcGxhdGVTdHJpbmdCcmFjZXMiLCJQbGFjZU9wZW5CcmFjZU9uTmV3TGluZUZvckNvbnRyb2xCbG9ja3MiLCJQbGFjZU9wZW5CcmFjZU9uTmV3TGluZUZvckZ1bmN0aW9ucyIsIl9jb252ZXJ0VGV4dENoYW5nZXMiLCJjaGFuZ2UiLCJuZXdUZXh0IiwiRm9ybWF0QWRhcHRlciIsInByb3ZpZGVEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRzIiwiZ2V0Rm9ybWF0dGluZ0VkaXRzRm9yUmFuZ2UiLCJlZGl0cyIsImVkaXQiLCJGb3JtYXRPblR5cGVBZGFwdGVyIiwicHJvdmlkZU9uVHlwZUZvcm1hdHRpbmdFZGl0cyIsImdldEZvcm1hdHRpbmdFZGl0c0FmdGVyS2V5c3Ryb2tlIiwicHJvbWlzZSIsIm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiY2FuY2VsIiwic2V0dXBUeXBlU2NyaXB0Iiwic2V0dXBNb2RlIiwic2V0dXBKYXZhU2NyaXB0IiwiRWNtYVNjcmlwdDUiLCJnZXRKYXZhU2NyaXB0V29ya2VyIiwicmVzb2x2ZSIsInJlamVjdCIsImdldFR5cGVTY3JpcHRXb3JrZXIiLCJmaXJzdCIsIm1vcmUiLCJyZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIiLCJyZWdpc3RlclNpZ25hdHVyZUhlbHBQcm92aWRlciIsInJlZ2lzdGVySG92ZXJQcm92aWRlciIsInJlZ2lzdGVyRG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciIsInJlZ2lzdGVyRGVmaW5pdGlvblByb3ZpZGVyIiwicmVnaXN0ZXJSZWZlcmVuY2VQcm92aWRlciIsInJlZ2lzdGVyRG9jdW1lbnRTeW1ib2xQcm92aWRlciIsInJlZ2lzdGVyRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJyZWdpc3Rlck9uVHlwZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJzZXRMYW5ndWFnZUNvbmZpZ3VyYXRpb24iLCJyaWNoRWRpdENvbmZpZ3VyYXRpb24iLCJzZXRUb2tlbnNQcm92aWRlciIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwid29yZFBhdHRlcm4iLCJjb21tZW50cyIsImxpbmVDb21tZW50IiwiYmxvY2tDb21tZW50IiwiYnJhY2tldHMiLCJvbkVudGVyUnVsZXMiLCJiZWZvcmVUZXh0IiwiYWZ0ZXJUZXh0IiwiYWN0aW9uIiwiaW5kZW50QWN0aW9uIiwiSW5kZW50QWN0aW9uIiwiSW5kZW50T3V0ZGVudCIsImFwcGVuZFRleHQiLCJyZW1vdmVUZXh0IiwiYXV0b0Nsb3NpbmdQYWlycyIsIm9wZW4iLCJjbG9zZSIsIm5vdEluIiwiZm9sZGluZyIsIlJlZ0V4cCIsImVuZCJdLCJtYXBwaW5ncyI6InFHQU1BQSxXQUtBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUMsRUFBQSxJQUFBQyxFQUFBSCxJQUFBRixFQUFBTSxXQUFBQyxFQUFBQyxFQUFBQyxFQUFBUCxJQUFBRixFQUFBTSxXQUFBSSxFQUFBQyxFQUNBLE9BQ0FDLGdCQUFBLFdBQXNDLFdBQUFDLEVBQUFYLEVBQUFFLEVBQUEsRUFBQVUsTUFBQSxJQUN0Q0MsU0FBQSxTQUFBQyxFQUFBQyxHQUEwQyxPQTZCMUMsU0FBQVosRUFBQUksRUFBQU4sRUFBQWMsRUFBQUMsR0FFQSxJQUFBQyxHQUNBQyxVQUNBQyxTQUFBLElBQUFSLEVBQUFJLEVBQUFmLFNBQUFFLEVBQUEsRUFBQVUsTUFBQSxJQUVBLFNBQUFRLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUwsRUFBQUMsT0FBQUssUUFBQU4sRUFBQUMsT0FBQUQsRUFBQUMsT0FBQUssT0FBQSxHQUFBQyxTQUFBRixHQUNBTCxFQUFBQyxPQUFBTyxNQUNBSixhQUNBRyxPQUFBRixJQUlBLElBQUFJLEVBQUFYLEVBQUFmLFdBQUFGLEVBQUFNLFdBRUEsSUFBQXNCLEdBOERBLFNBQUFDLEVBQUFiLEVBQUFNLEdBQ0EsT0FBQU4sRUFBQWMsUUFBQSxNQUVBLE9BREFSLEVBQUFPLEVBQUEsb0JBQ0EsRUFqRUFFLENBQUEsRUFBQWIsRUFBQUksR0FDQSxPQUFBSCxFQUVBLElBQUFhLEVBQUE3QixFQUFBOEIsMEJBQUFmLEVBQUFELEVB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QixJQXVEQSxJQUFBYSxHQUNBSSxZQUFBLHVGQUNBQyxVQUNBQyxZQUFBLEtBQ0FDLGNBQUEsWUFFQUMsV0FDQSxJQUFXLE1BQ1gsVUFDQSxVQUVBQyxlQUdBQyxXQUFBLHFDQUNBQyxVQUFBLFlBQ0FDLFFBQXFCQyxhQUFBeFUsT0FBQWlLLFVBQUF3SyxhQUFBQyxjQUFBQyxXQUFBLFNBSXJCTixXQUFBLHFDQUNBRSxRQUFxQkMsYUFBQXhVLE9BQUFpSyxVQUFBd0ssYUFBQTNYLEtBQUE2WCxXQUFBLFNBSXJCTixXQUFBLDJDQUNBRSxRQUFxQkMsYUFBQXhVLE9BQUFpSyxVQUFBd0ssYUFBQTNYLEtBQUE2WCxXQUFBLFFBSXJCTixXQUFBLDBCQUNBRSxRQUFxQkMsYUFBQXhVLE9BQUFpSyxVQUFBd0ssYUFBQTNYLEtBQUE4WCxXQUFBLEtBR3JCQyxtQkFDU0MsS0FBQSxJQUFTQyxNQUFBLE1BQ1RELEtBQUEsSUFBQUMsTUFBQSxNQUNBRCxLQUFBLElBQUFDLE1BQUEsTUFDQUQsS0FBQSxJQUFBQyxNQUFBLElBQUFDLE9BQUEsWUFDQUYsS0FBQSxJQUFBQyxNQUFBLElBQUFDLE9BQUEsc0JBQ0FGLEtBQUEsSUFBQUMsTUFBQSxJQUFBQyxPQUFBLHNCQUNBRixLQUFBLE1BQUFDLE1BQUEsTUFBQUMsT0FBQSxZQUVUQyxTQUNBNU4sU0FDQXhDLE1BQUEsSUFBQXFRLE9BQUEsMEJBQ0FDLElBQUEsSUFBQUQsT0FBQSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgKiBhcyB0cyBmcm9tICcuL2xpYi90eXBlc2NyaXB0U2VydmljZXMuanMnO1xuZXhwb3J0IHZhciBMYW5ndWFnZTtcbihmdW5jdGlvbiAoTGFuZ3VhZ2UpIHtcbiAgICBMYW5ndWFnZVtMYW5ndWFnZVtcIlR5cGVTY3JpcHRcIl0gPSAwXSA9IFwiVHlwZVNjcmlwdFwiO1xuICAgIExhbmd1YWdlW0xhbmd1YWdlW1wiRWNtYVNjcmlwdDVcIl0gPSAxXSA9IFwiRWNtYVNjcmlwdDVcIjtcbn0pKExhbmd1YWdlIHx8IChMYW5ndWFnZSA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVG9rZW5pemF0aW9uU3VwcG9ydChsYW5ndWFnZSkge1xuICAgIHZhciBjbGFzc2lmaWVyID0gdHMuY3JlYXRlQ2xhc3NpZmllcigpLCBicmFja2V0VHlwZVRhYmxlID0gbGFuZ3VhZ2UgPT09IExhbmd1YWdlLlR5cGVTY3JpcHQgPyB0c0JyYWNrZXRUeXBlVGFibGUgOiBqc0JyYWNrZXRUeXBlVGFibGUsIHRva2VuVHlwZVRhYmxlID0gbGFuZ3VhZ2UgPT09IExhbmd1YWdlLlR5cGVTY3JpcHQgPyB0c1Rva2VuVHlwZVRhYmxlIDoganNUb2tlblR5cGVUYWJsZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBTdGF0ZShsYW5ndWFnZSwgdHMuRW5kT2ZMaW5lU3RhdGUuTm9uZSwgZmFsc2UpOyB9LFxuICAgICAgICB0b2tlbml6ZTogZnVuY3Rpb24gKGxpbmUsIHN0YXRlKSB7IHJldHVybiB0b2tlbml6ZShicmFja2V0VHlwZVRhYmxlLCB0b2tlblR5cGVUYWJsZSwgY2xhc3NpZmllciwgc3RhdGUsIGxpbmUpOyB9XG4gICAgfTtcbn1cbnZhciBTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGF0ZShsYW5ndWFnZSwgZW9sU3RhdGUsIGluSnNEb2NDb21tZW50KSB7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbiAgICAgICAgdGhpcy5lb2xTdGF0ZSA9IGVvbFN0YXRlO1xuICAgICAgICB0aGlzLmluSnNEb2NDb21tZW50ID0gaW5Kc0RvY0NvbW1lbnQ7XG4gICAgfVxuICAgIFN0YXRlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0ZSh0aGlzLmxhbmd1YWdlLCB0aGlzLmVvbFN0YXRlLCB0aGlzLmluSnNEb2NDb21tZW50KTtcbiAgICB9O1xuICAgIFN0YXRlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyID09PSB0aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW90aGVyIHx8ICEob3RoZXIgaW5zdGFuY2VvZiBTdGF0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lb2xTdGF0ZSAhPT0gb3RoZXIuZW9sU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbkpzRG9jQ29tbWVudCAhPT0gb3RoZXIuaW5Kc0RvY0NvbW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0ZTtcbn0oKSk7XG5mdW5jdGlvbiB0b2tlbml6ZShicmFja2V0VHlwZVRhYmxlLCB0b2tlblR5cGVUYWJsZSwgY2xhc3NpZmllciwgc3RhdGUsIHRleHQpIHtcbiAgICAvLyBDcmVhdGUgcmVzdWx0IGVhcmx5IGFuZCBmaWxsIGluIHRva2Vuc1xuICAgIHZhciByZXQgPSB7XG4gICAgICAgIHRva2VuczogW10sXG4gICAgICAgIGVuZFN0YXRlOiBuZXcgU3RhdGUoc3RhdGUubGFuZ3VhZ2UsIHRzLkVuZE9mTGluZVN0YXRlLk5vbmUsIGZhbHNlKVxuICAgIH07XG4gICAgZnVuY3Rpb24gYXBwZW5kRm4oc3RhcnRJbmRleCwgdHlwZSkge1xuICAgICAgICBpZiAocmV0LnRva2Vucy5sZW5ndGggPT09IDAgfHwgcmV0LnRva2Vuc1tyZXQudG9rZW5zLmxlbmd0aCAtIDFdLnNjb3BlcyAhPT0gdHlwZSkge1xuICAgICAgICAgICAgcmV0LnRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzdGFydEluZGV4OiBzdGFydEluZGV4LFxuICAgICAgICAgICAgICAgIHNjb3BlczogdHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGlzVHlwZVNjcmlwdCA9IHN0YXRlLmxhbmd1YWdlID09PSBMYW5ndWFnZS5UeXBlU2NyaXB0O1xuICAgIC8vIHNoZWJhbmcgc3RhdGVtZW50LCAjISAvYmluL25vZGVcbiAgICBpZiAoIWlzVHlwZVNjcmlwdCAmJiBjaGVja1NoZUJhbmcoMCwgdGV4dCwgYXBwZW5kRm4pKSB7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBjbGFzc2lmaWVyLmdldENsYXNzaWZpY2F0aW9uc0ZvckxpbmUodGV4dCwgc3RhdGUuZW9sU3RhdGUsIHRydWUpLCBvZmZzZXQgPSAwO1xuICAgIHJldC5lbmRTdGF0ZS5lb2xTdGF0ZSA9IHJlc3VsdC5maW5hbExleFN0YXRlO1xuICAgIHJldC5lbmRTdGF0ZS5pbkpzRG9jQ29tbWVudCA9IHJlc3VsdC5maW5hbExleFN0YXRlID09PSB0cy5FbmRPZkxpbmVTdGF0ZS5Jbk11bHRpTGluZUNvbW1lbnRUcml2aWEgJiYgKHN0YXRlLmluSnNEb2NDb21tZW50IHx8IC9cXC9cXCpcXCouKiQvLnRlc3QodGV4dCkpO1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSByZXN1bHQuZW50cmllczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gX2FbX2ldO1xuICAgICAgICB2YXIgdHlwZTtcbiAgICAgICAgaWYgKGVudHJ5LmNsYXNzaWZpY2F0aW9uID09PSB0cy5Ub2tlbkNsYXNzLlB1bmN0dWF0aW9uKSB7XG4gICAgICAgICAgICAvLyBwdW5jdGlvbnM6IGNoZWNrIGZvciBicmFja2V0czogKCl7fVtdXG4gICAgICAgICAgICB2YXIgY2ggPSB0ZXh0LmNoYXJDb2RlQXQob2Zmc2V0KTtcbiAgICAgICAgICAgIHR5cGUgPSBicmFja2V0VHlwZVRhYmxlW2NoXSB8fCB0b2tlblR5cGVUYWJsZVtlbnRyeS5jbGFzc2lmaWNhdGlvbl07XG4gICAgICAgICAgICBhcHBlbmRGbihvZmZzZXQsIHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVudHJ5LmNsYXNzaWZpY2F0aW9uID09PSB0cy5Ub2tlbkNsYXNzLkNvbW1lbnQpIHtcbiAgICAgICAgICAgIC8vIGNvbW1lbnRzOiBjaGVjayBmb3IgSlNEb2MsIGJsb2NrLCBhbmQgbGluZSBjb21tZW50c1xuICAgICAgICAgICAgaWYgKHJldC5lbmRTdGF0ZS5pbkpzRG9jQ29tbWVudCB8fCAvXFwvXFwqXFwqLipcXCpcXC8vLnRlc3QodGV4dC5zdWJzdHIob2Zmc2V0LCBlbnRyeS5sZW5ndGgpKSkge1xuICAgICAgICAgICAgICAgIGFwcGVuZEZuKG9mZnNldCwgaXNUeXBlU2NyaXB0ID8gJ2NvbW1lbnQuZG9jLnRzJyA6ICdjb21tZW50LmRvYy5qcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXBwZW5kRm4ob2Zmc2V0LCBpc1R5cGVTY3JpcHQgPyAnY29tbWVudC50cycgOiAnY29tbWVudC5qcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXZlcnl0aGluZyBlbHNlXG4gICAgICAgICAgICBhcHBlbmRGbihvZmZzZXQsIHRva2VuVHlwZVRhYmxlW2VudHJ5LmNsYXNzaWZpY2F0aW9uXSB8fCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ICs9IGVudHJ5Lmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbnZhciB0c0JyYWNrZXRUeXBlVGFibGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xudHNCcmFja2V0VHlwZVRhYmxlWycoJy5jaGFyQ29kZUF0KDApXSA9ICdkZWxpbWl0ZXIucGFyZW50aGVzaXMudHMnO1xudHNCcmFja2V0VHlwZVRhYmxlWycpJy5jaGFyQ29kZUF0KDApXSA9ICdkZWxpbWl0ZXIucGFyZW50aGVzaXMudHMnO1xudHNCcmFja2V0VHlwZVRhYmxlWyd7Jy5jaGFyQ29kZUF0KDApXSA9ICdkZWxpbWl0ZXIuYnJhY2tldC50cyc7XG50c0JyYWNrZXRUeXBlVGFibGVbJ30nLmNoYXJDb2RlQXQoMCldID0gJ2RlbGltaXRlci5icmFja2V0LnRzJztcbnRzQnJhY2tldFR5cGVUYWJsZVsnWycuY2hhckNvZGVBdCgwKV0gPSAnZGVsaW1pdGVyLmFycmF5LnRzJztcbnRzQnJhY2tldFR5cGVUYWJsZVsnXScuY2hhckNvZGVBdCgwKV0gPSAnZGVsaW1pdGVyLmFycmF5LnRzJztcbnZhciB0c1Rva2VuVHlwZVRhYmxlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnRzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5JZGVudGlmaWVyXSA9ICdpZGVudGlmaWVyLnRzJztcbnRzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5LZXl3b3JkXSA9ICdrZXl3b3JkLnRzJztcbnRzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5PcGVyYXRvcl0gPSAnZGVsaW1pdGVyLnRzJztcbnRzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5QdW5jdHVhdGlvbl0gPSAnZGVsaW1pdGVyLnRzJztcbnRzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5OdW1iZXJMaXRlcmFsXSA9ICdudW1iZXIudHMnO1xudHNUb2tlblR5cGVUYWJsZVt0cy5Ub2tlbkNsYXNzLlJlZ0V4cExpdGVyYWxdID0gJ3JlZ2V4cC50cyc7XG50c1Rva2VuVHlwZVRhYmxlW3RzLlRva2VuQ2xhc3MuU3RyaW5nTGl0ZXJhbF0gPSAnc3RyaW5nLnRzJztcbnZhciBqc0JyYWNrZXRUeXBlVGFibGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuanNCcmFja2V0VHlwZVRhYmxlWycoJy5jaGFyQ29kZUF0KDApXSA9ICdkZWxpbWl0ZXIucGFyZW50aGVzaXMuanMnO1xuanNCcmFja2V0VHlwZVRhYmxlWycpJy5jaGFyQ29kZUF0KDApXSA9ICdkZWxpbWl0ZXIucGFyZW50aGVzaXMuanMnO1xuanNCcmFja2V0VHlwZVRhYmxlWyd7Jy5jaGFyQ29kZUF0KDApXSA9ICdkZWxpbWl0ZXIuYnJhY2tldC5qcyc7XG5qc0JyYWNrZXRUeXBlVGFibGVbJ30nLmNoYXJDb2RlQXQoMCldID0gJ2RlbGltaXRlci5icmFja2V0LmpzJztcbmpzQnJhY2tldFR5cGVUYWJsZVsnWycuY2hhckNvZGVBdCgwKV0gPSAnZGVsaW1pdGVyLmFycmF5LmpzJztcbmpzQnJhY2tldFR5cGVUYWJsZVsnXScuY2hhckNvZGVBdCgwKV0gPSAnZGVsaW1pdGVyLmFycmF5LmpzJztcbnZhciBqc1Rva2VuVHlwZVRhYmxlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmpzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5JZGVudGlmaWVyXSA9ICdpZGVudGlmaWVyLmpzJztcbmpzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5LZXl3b3JkXSA9ICdrZXl3b3JkLmpzJztcbmpzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5PcGVyYXRvcl0gPSAnZGVsaW1pdGVyLmpzJztcbmpzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5QdW5jdHVhdGlvbl0gPSAnZGVsaW1pdGVyLmpzJztcbmpzVG9rZW5UeXBlVGFibGVbdHMuVG9rZW5DbGFzcy5OdW1iZXJMaXRlcmFsXSA9ICdudW1iZXIuanMnO1xuanNUb2tlblR5cGVUYWJsZVt0cy5Ub2tlbkNsYXNzLlJlZ0V4cExpdGVyYWxdID0gJ3JlZ2V4cC5qcyc7XG5qc1Rva2VuVHlwZVRhYmxlW3RzLlRva2VuQ2xhc3MuU3RyaW5nTGl0ZXJhbF0gPSAnc3RyaW5nLmpzJztcbmZ1bmN0aW9uIGNoZWNrU2hlQmFuZyhkZWx0YU9mZnNldCwgbGluZSwgYXBwZW5kRm4pIHtcbiAgICBpZiAobGluZS5pbmRleE9mKCcjIScpID09PSAwKSB7XG4gICAgICAgIGFwcGVuZEZuKGRlbHRhT2Zmc2V0LCAnY29tbWVudC5zaGViYW5nJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJ3VzZSBzdHJpY3QnO1xudmFyIFByb21pc2UgPSBtb25hY28uUHJvbWlzZTtcbnZhciBXb3JrZXJNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdvcmtlck1hbmFnZXIobW9kZUlkLCBkZWZhdWx0cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9tb2RlSWQgPSBtb2RlSWQ7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lkbGVDaGVja0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NoZWNrSWZJZGxlKCk7IH0sIDMwICogMTAwMCk7XG4gICAgICAgIHRoaXMuX2xhc3RVc2VkVGltZSA9IDA7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyID0gdGhpcy5fZGVmYXVsdHMub25EaWRDaGFuZ2UoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3N0b3BXb3JrZXIoKTsgfSk7XG4gICAgfVxuICAgIFdvcmtlck1hbmFnZXIucHJvdG90eXBlLl9zdG9wV29ya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl93b3JrZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGllbnQgPSBudWxsO1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pZGxlQ2hlY2tJbnRlcnZhbCk7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuX2NoZWNrSWZJZGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3dvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXhJZGxlVGltZSA9IHRoaXMuX2RlZmF1bHRzLmdldFdvcmtlck1heElkbGVUaW1lKCk7XG4gICAgICAgIHZhciB0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA9IERhdGUubm93KCkgLSB0aGlzLl9sYXN0VXNlZFRpbWU7XG4gICAgICAgIGlmIChtYXhJZGxlVGltZSA+IDAgJiYgdGltZVBhc3NlZFNpbmNlTGFzdFVzZWQgPiBtYXhJZGxlVGltZSkge1xuICAgICAgICAgICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXb3JrZXJNYW5hZ2VyLnByb3RvdHlwZS5fZ2V0Q2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9sYXN0VXNlZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gbW9uYWNvLmVkaXRvci5jcmVhdGVXZWJXb3JrZXIoe1xuICAgICAgICAgICAgICAgIC8vIG1vZHVsZSB0aGF0IGV4cG9ydHMgdGhlIGNyZWF0ZSgpIG1ldGhvZCBhbmQgcmV0dXJucyBhIGBUeXBlU2NyaXB0V29ya2VyYCBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIG1vZHVsZUlkOiAndnMvbGFuZ3VhZ2UvdHlwZXNjcmlwdC90c1dvcmtlcicsXG4gICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuX21vZGVJZCxcbiAgICAgICAgICAgICAgICAvLyBwYXNzZWQgaW4gdG8gdGhlIGNyZWF0ZSgpIG1ldGhvZFxuICAgICAgICAgICAgICAgIGNyZWF0ZURhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGlsZXJPcHRpb25zOiB0aGlzLl9kZWZhdWx0cy5nZXRDb21waWxlck9wdGlvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFMaWJzOiB0aGlzLl9kZWZhdWx0cy5nZXRFeHRyYUxpYnMoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHAgPSB0aGlzLl93b3JrZXIuZ2V0UHJveHkoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWZhdWx0cy5nZXRFYWdlck1vZGVsU3luYygpKSB7XG4gICAgICAgICAgICAgICAgcCA9IHAudGhlbihmdW5jdGlvbiAod29ya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fd29ya2VyLndpdGhTeW5jZWRSZXNvdXJjZXMobW9uYWNvLmVkaXRvci5nZXRNb2RlbHMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHsgcmV0dXJuIG1vZGVsLmdldE1vZGVJZCgpID09PSBfdGhpcy5fbW9kZUlkOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobW9kZWwpIHsgcmV0dXJuIG1vZGVsLnVyaTsgfSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2xpZW50ID0gcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50O1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuZ2V0TGFuZ3VhZ2VTZXJ2aWNlV29ya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzb3VyY2VzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICByZXNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2NsaWVudDtcbiAgICAgICAgcmV0dXJuIHRvU2hhbGxvd0NhbmNlbFByb21pc2UodGhpcy5fZ2V0Q2xpZW50KCkudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgICBfY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChfKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX3dvcmtlci53aXRoU3luY2VkUmVzb3VyY2VzKHJlc291cmNlcyk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF9jbGllbnQ7IH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBXb3JrZXJNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydCB7IFdvcmtlck1hbmFnZXIgfTtcbmZ1bmN0aW9uIHRvU2hhbGxvd0NhbmNlbFByb21pc2UocCkge1xuICAgIHZhciBjb21wbGV0ZUNhbGxiYWNrO1xuICAgIHZhciBlcnJvckNhbGxiYWNrO1xuICAgIHZhciByID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKGMsIGUpIHtcbiAgICAgICAgY29tcGxldGVDYWxsYmFjayA9IGM7XG4gICAgICAgIGVycm9yQ2FsbGJhY2sgPSBlO1xuICAgIH0sIGZ1bmN0aW9uICgpIHsgfSk7XG4gICAgcC50aGVuKGNvbXBsZXRlQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgIHJldHVybiByO1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ndXNlIHN0cmljdCc7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbmltcG9ydCAqIGFzIHRzIGZyb20gJy4vbGliL3R5cGVzY3JpcHRTZXJ2aWNlcy5qcyc7XG52YXIgVXJpID0gbW9uYWNvLlVyaTtcbnZhciBQcm9taXNlID0gbW9uYWNvLlByb21pc2U7XG52YXIgQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBZGFwdGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgQWRhcHRlci5wcm90b3R5cGUuX3Bvc2l0aW9uVG9PZmZzZXQgPSBmdW5jdGlvbiAodXJpLCBwb3NpdGlvbikge1xuICAgICAgICB2YXIgbW9kZWwgPSBtb25hY28uZWRpdG9yLmdldE1vZGVsKHVyaSk7XG4gICAgICAgIHJldHVybiBtb2RlbC5nZXRPZmZzZXRBdChwb3NpdGlvbik7XG4gICAgfTtcbiAgICBBZGFwdGVyLnByb3RvdHlwZS5fb2Zmc2V0VG9Qb3NpdGlvbiA9IGZ1bmN0aW9uICh1cmksIG9mZnNldCkge1xuICAgICAgICB2YXIgbW9kZWwgPSBtb25hY28uZWRpdG9yLmdldE1vZGVsKHVyaSk7XG4gICAgICAgIHJldHVybiBtb2RlbC5nZXRQb3NpdGlvbkF0KG9mZnNldCk7XG4gICAgfTtcbiAgICBBZGFwdGVyLnByb3RvdHlwZS5fdGV4dFNwYW5Ub1JhbmdlID0gZnVuY3Rpb24gKHVyaSwgc3Bhbikge1xuICAgICAgICB2YXIgcDEgPSB0aGlzLl9vZmZzZXRUb1Bvc2l0aW9uKHVyaSwgc3Bhbi5zdGFydCk7XG4gICAgICAgIHZhciBwMiA9IHRoaXMuX29mZnNldFRvUG9zaXRpb24odXJpLCBzcGFuLnN0YXJ0ICsgc3Bhbi5sZW5ndGgpO1xuICAgICAgICB2YXIgc3RhcnRMaW5lTnVtYmVyID0gcDEubGluZU51bWJlciwgc3RhcnRDb2x1bW4gPSBwMS5jb2x1bW47XG4gICAgICAgIHZhciBlbmRMaW5lTnVtYmVyID0gcDIubGluZU51bWJlciwgZW5kQ29sdW1uID0gcDIuY29sdW1uO1xuICAgICAgICByZXR1cm4geyBzdGFydExpbmVOdW1iZXI6IHN0YXJ0TGluZU51bWJlciwgc3RhcnRDb2x1bW46IHN0YXJ0Q29sdW1uLCBlbmRMaW5lTnVtYmVyOiBlbmRMaW5lTnVtYmVyLCBlbmRDb2x1bW46IGVuZENvbHVtbiB9O1xuICAgIH07XG4gICAgcmV0dXJuIEFkYXB0ZXI7XG59KCkpO1xuZXhwb3J0IHsgQWRhcHRlciB9O1xuLy8gLS0tIGRpYWdub3N0aWNzIC0tLSAtLS1cbnZhciBEaWFnbm9zdGNzQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGlhZ25vc3Rjc0FkYXB0ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGlhZ25vc3Rjc0FkYXB0ZXIoX2RlZmF1bHRzLCBfc2VsZWN0b3IsIHdvcmtlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCB3b3JrZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9kZWZhdWx0cyA9IF9kZWZhdWx0cztcbiAgICAgICAgX3RoaXMuX3NlbGVjdG9yID0gX3NlbGVjdG9yO1xuICAgICAgICBfdGhpcy5fZGlzcG9zYWJsZXMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2xpc3RlbmVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdmFyIG9uTW9kZWxBZGQgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIGlmIChtb2RlbC5nZXRNb2RlSWQoKSAhPT0gX3NlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhhbmRsZTtcbiAgICAgICAgICAgIHZhciBjaGFuZ2VTdWJzY3JpcHRpb24gPSBtb2RlbC5vbkRpZENoYW5nZUNvbnRlbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIGhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2RvVmFsaWRhdGUobW9kZWwudXJpKTsgfSwgNTAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuX2xpc3RlbmVyW21vZGVsLnVyaS50b1N0cmluZygpXSA9IHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZVN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5fZG9WYWxpZGF0ZShtb2RlbC51cmkpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb25Nb2RlbFJlbW92ZWQgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIG1vbmFjby5lZGl0b3Iuc2V0TW9kZWxNYXJrZXJzKG1vZGVsLCBfdGhpcy5fc2VsZWN0b3IsIFtdKTtcbiAgICAgICAgICAgIHZhciBrZXkgPSBtb2RlbC51cmkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fbGlzdGVuZXJba2V5XSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9saXN0ZW5lcltrZXldLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX2xpc3RlbmVyW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9kaXNwb3NhYmxlcy5wdXNoKG1vbmFjby5lZGl0b3Iub25EaWRDcmVhdGVNb2RlbChvbk1vZGVsQWRkKSk7XG4gICAgICAgIF90aGlzLl9kaXNwb3NhYmxlcy5wdXNoKG1vbmFjby5lZGl0b3Iub25XaWxsRGlzcG9zZU1vZGVsKG9uTW9kZWxSZW1vdmVkKSk7XG4gICAgICAgIF90aGlzLl9kaXNwb3NhYmxlcy5wdXNoKG1vbmFjby5lZGl0b3Iub25EaWRDaGFuZ2VNb2RlbExhbmd1YWdlKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgb25Nb2RlbFJlbW92ZWQoZXZlbnQubW9kZWwpO1xuICAgICAgICAgICAgb25Nb2RlbEFkZChldmVudC5tb2RlbCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgX3RoaXMuX2Rpc3Bvc2FibGVzLnB1c2goe1xuICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBtb25hY28uZWRpdG9yLmdldE1vZGVscygpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIG9uTW9kZWxSZW1vdmVkKG1vZGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fZGlzcG9zYWJsZXMucHVzaChfdGhpcy5fZGVmYXVsdHMub25EaWRDaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gcmVkbyBkaWFnbm9zdGljcyB3aGVuIG9wdGlvbnMgY2hhbmdlXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gbW9uYWNvLmVkaXRvci5nZXRNb2RlbHMoKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgb25Nb2RlbFJlbW92ZWQobW9kZWwpO1xuICAgICAgICAgICAgICAgIG9uTW9kZWxBZGQobW9kZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIG1vbmFjby5lZGl0b3IuZ2V0TW9kZWxzKCkuZm9yRWFjaChvbk1vZGVsQWRkKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEaWFnbm9zdGNzQWRhcHRlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZCAmJiBkLmRpc3Bvc2UoKTsgfSk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzID0gW107XG4gICAgfTtcbiAgICBEaWFnbm9zdGNzQWRhcHRlci5wcm90b3R5cGUuX2RvVmFsaWRhdGUgPSBmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHtcbiAgICAgICAgICAgIGlmICghbW9uYWNvLmVkaXRvci5nZXRNb2RlbChyZXNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBtb2RlbCB3YXMgZGlzcG9zZWQgaW4gdGhlIG1lYW50aW1lXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLl9kZWZhdWx0cy5nZXREaWFnbm9zdGljc09wdGlvbnMoKSwgbm9TeW50YXhWYWxpZGF0aW9uID0gX2Eubm9TeW50YXhWYWxpZGF0aW9uLCBub1NlbWFudGljVmFsaWRhdGlvbiA9IF9hLm5vU2VtYW50aWNWYWxpZGF0aW9uO1xuICAgICAgICAgICAgaWYgKCFub1N5bnRheFZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHdvcmtlci5nZXRTeW50YWN0aWNEaWFnbm9zdGljcyhyZXNvdXJjZS50b1N0cmluZygpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5vU2VtYW50aWNWYWxpZGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh3b3JrZXIuZ2V0U2VtYW50aWNEaWFnbm9zdGljcyhyZXNvdXJjZS50b1N0cmluZygpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5qb2luKHByb21pc2VzKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGlhZ25vc3RpY3MpIHtcbiAgICAgICAgICAgIGlmICghZGlhZ25vc3RpY3MgfHwgIW1vbmFjby5lZGl0b3IuZ2V0TW9kZWwocmVzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9kZWwgd2FzIGRpc3Bvc2VkIGluIHRoZSBtZWFudGltZVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBkaWFnbm9zdGljc1xuICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHsgcmV0dXJuIGMuY29uY2F0KHApOyB9LCBbXSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBfdGhpcy5fY29udmVydERpYWdub3N0aWNzKHJlc291cmNlLCBkKTsgfSk7XG4gICAgICAgICAgICBtb25hY28uZWRpdG9yLnNldE1vZGVsTWFya2Vycyhtb25hY28uZWRpdG9yLmdldE1vZGVsKHJlc291cmNlKSwgX3RoaXMuX3NlbGVjdG9yLCBtYXJrZXJzKTtcbiAgICAgICAgfSkuZG9uZSh1bmRlZmluZWQsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBEaWFnbm9zdGNzQWRhcHRlci5wcm90b3R5cGUuX2NvbnZlcnREaWFnbm9zdGljcyA9IGZ1bmN0aW9uIChyZXNvdXJjZSwgZGlhZykge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLl9vZmZzZXRUb1Bvc2l0aW9uKHJlc291cmNlLCBkaWFnLnN0YXJ0KSwgc3RhcnRMaW5lTnVtYmVyID0gX2EubGluZU51bWJlciwgc3RhcnRDb2x1bW4gPSBfYS5jb2x1bW47XG4gICAgICAgIHZhciBfYiA9IHRoaXMuX29mZnNldFRvUG9zaXRpb24ocmVzb3VyY2UsIGRpYWcuc3RhcnQgKyBkaWFnLmxlbmd0aCksIGVuZExpbmVOdW1iZXIgPSBfYi5saW5lTnVtYmVyLCBlbmRDb2x1bW4gPSBfYi5jb2x1bW47XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXZlcml0eTogbW9uYWNvLk1hcmtlclNldmVyaXR5LkVycm9yLFxuICAgICAgICAgICAgc3RhcnRMaW5lTnVtYmVyOiBzdGFydExpbmVOdW1iZXIsXG4gICAgICAgICAgICBzdGFydENvbHVtbjogc3RhcnRDb2x1bW4sXG4gICAgICAgICAgICBlbmRMaW5lTnVtYmVyOiBlbmRMaW5lTnVtYmVyLFxuICAgICAgICAgICAgZW5kQ29sdW1uOiBlbmRDb2x1bW4sXG4gICAgICAgICAgICBtZXNzYWdlOiB0cy5mbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0KGRpYWcubWVzc2FnZVRleHQsICdcXG4nKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIERpYWdub3N0Y3NBZGFwdGVyO1xufShBZGFwdGVyKSk7XG5leHBvcnQgeyBEaWFnbm9zdGNzQWRhcHRlciB9O1xudmFyIFN1Z2dlc3RBZGFwdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWdnZXN0QWRhcHRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWdnZXN0QWRhcHRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3VnZ2VzdEFkYXB0ZXIucHJvdG90eXBlLCBcInRyaWdnZXJDaGFyYWN0ZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gWycuJ107XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFN1Z2dlc3RBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlQ29tcGxldGlvbkl0ZW1zID0gZnVuY3Rpb24gKG1vZGVsLCBwb3NpdGlvbiwgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdvcmRJbmZvID0gbW9kZWwuZ2V0V29yZFVudGlsUG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9wb3NpdGlvblRvT2Zmc2V0KHJlc291cmNlLCBwb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB3aXJlQ2FuY2VsbGF0aW9uVG9rZW4odG9rZW4sIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyLmdldENvbXBsZXRpb25zQXRQb3NpdGlvbihyZXNvdXJjZS50b1N0cmluZygpLCBvZmZzZXQpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgICAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3VnZ2VzdGlvbnMgPSBpbmZvLmVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHVyaTogcmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGVudHJ5Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHNvcnRUZXh0OiBlbnRyeS5zb3J0VGV4dCxcbiAgICAgICAgICAgICAgICAgICAga2luZDogU3VnZ2VzdEFkYXB0ZXIuY29udmVydEtpbmQoZW50cnkua2luZClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbnM7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIFN1Z2dlc3RBZGFwdGVyLnByb3RvdHlwZS5yZXNvbHZlQ29tcGxldGlvbkl0ZW0gPSBmdW5jdGlvbiAoaXRlbSwgdG9rZW4pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG15SXRlbSA9IGl0ZW07XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG15SXRlbS51cmk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG15SXRlbS5wb3NpdGlvbjtcbiAgICAgICAgcmV0dXJuIHdpcmVDYW5jZWxsYXRpb25Ub2tlbih0b2tlbiwgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZXIuZ2V0Q29tcGxldGlvbkVudHJ5RGV0YWlscyhyZXNvdXJjZS50b1N0cmluZygpLCBfdGhpcy5fcG9zaXRpb25Ub09mZnNldChyZXNvdXJjZSwgcG9zaXRpb24pLCBteUl0ZW0ubGFiZWwpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkZXRhaWxzKSB7XG4gICAgICAgICAgICBpZiAoIWRldGFpbHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbXlJdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmk6IHJlc291cmNlLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICBsYWJlbDogZGV0YWlscy5uYW1lLFxuICAgICAgICAgICAgICAgIGtpbmQ6IFN1Z2dlc3RBZGFwdGVyLmNvbnZlcnRLaW5kKGRldGFpbHMua2luZCksXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB0cy5kaXNwbGF5UGFydHNUb1N0cmluZyhkZXRhaWxzLmRpc3BsYXlQYXJ0cyksXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRhdGlvbjogdHMuZGlzcGxheVBhcnRzVG9TdHJpbmcoZGV0YWlscy5kb2N1bWVudGF0aW9uKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgU3VnZ2VzdEFkYXB0ZXIuY29udmVydEtpbmQgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgS2luZC5wcmltaXRpdmVUeXBlOlxuICAgICAgICAgICAgY2FzZSBLaW5kLmtleXdvcmQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbmFjby5sYW5ndWFnZXMuQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQ7XG4gICAgICAgICAgICBjYXNlIEtpbmQudmFyaWFibGU6XG4gICAgICAgICAgICBjYXNlIEtpbmQubG9jYWxWYXJpYWJsZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGU7XG4gICAgICAgICAgICBjYXNlIEtpbmQubWVtYmVyVmFyaWFibGU6XG4gICAgICAgICAgICBjYXNlIEtpbmQubWVtYmVyR2V0QWNjZXNzb3I6XG4gICAgICAgICAgICBjYXNlIEtpbmQubWVtYmVyU2V0QWNjZXNzb3I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbmFjby5sYW5ndWFnZXMuQ29tcGxldGlvbkl0ZW1LaW5kLkZpZWxkO1xuICAgICAgICAgICAgY2FzZSBLaW5kLmZ1bmN0aW9uOlxuICAgICAgICAgICAgY2FzZSBLaW5kLm1lbWJlckZ1bmN0aW9uOlxuICAgICAgICAgICAgY2FzZSBLaW5kLmNvbnN0cnVjdFNpZ25hdHVyZTpcbiAgICAgICAgICAgIGNhc2UgS2luZC5jYWxsU2lnbmF0dXJlOlxuICAgICAgICAgICAgY2FzZSBLaW5kLmluZGV4U2lnbmF0dXJlOlxuICAgICAgICAgICAgICAgIHJldHVybiBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbjtcbiAgICAgICAgICAgIGNhc2UgS2luZC5lbnVtOlxuICAgICAgICAgICAgICAgIHJldHVybiBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZC5FbnVtO1xuICAgICAgICAgICAgY2FzZSBLaW5kLm1vZHVsZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlO1xuICAgICAgICAgICAgY2FzZSBLaW5kLmNsYXNzOlxuICAgICAgICAgICAgICAgIHJldHVybiBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZC5DbGFzcztcbiAgICAgICAgICAgIGNhc2UgS2luZC5pbnRlcmZhY2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbmFjby5sYW5ndWFnZXMuQ29tcGxldGlvbkl0ZW1LaW5kLkludGVyZmFjZTtcbiAgICAgICAgICAgIGNhc2UgS2luZC53YXJuaW5nOlxuICAgICAgICAgICAgICAgIHJldHVybiBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZC5GaWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eTtcbiAgICB9O1xuICAgIHJldHVybiBTdWdnZXN0QWRhcHRlcjtcbn0oQWRhcHRlcikpO1xuZXhwb3J0IHsgU3VnZ2VzdEFkYXB0ZXIgfTtcbnZhciBTaWduYXR1cmVIZWxwQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2lnbmF0dXJlSGVscEFkYXB0ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2lnbmF0dXJlSGVscEFkYXB0ZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zaWduYXR1cmVIZWxwVHJpZ2dlckNoYXJhY3RlcnMgPSBbJygnLCAnLCddO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNpZ25hdHVyZUhlbHBBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlU2lnbmF0dXJlSGVscCA9IGZ1bmN0aW9uIChtb2RlbCwgcG9zaXRpb24sIHRva2VuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHdpcmVDYW5jZWxsYXRpb25Ub2tlbih0b2tlbiwgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHsgcmV0dXJuIHdvcmtlci5nZXRTaWduYXR1cmVIZWxwSXRlbXMocmVzb3VyY2UudG9TdHJpbmcoKSwgX3RoaXMuX3Bvc2l0aW9uVG9PZmZzZXQocmVzb3VyY2UsIHBvc2l0aW9uKSk7IH0pLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgICAgIGlmICghaW5mbykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXQgPSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU2lnbmF0dXJlOiBpbmZvLnNlbGVjdGVkSXRlbUluZGV4LFxuICAgICAgICAgICAgICAgIGFjdGl2ZVBhcmFtZXRlcjogaW5mby5hcmd1bWVudEluZGV4LFxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZXM6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaW5mby5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpZ25hdHVyZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICcnLFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlLmxhYmVsICs9IHRzLmRpc3BsYXlQYXJ0c1RvU3RyaW5nKGl0ZW0ucHJlZml4RGlzcGxheVBhcnRzKTtcbiAgICAgICAgICAgICAgICBpdGVtLnBhcmFtZXRlcnMuZm9yRWFjaChmdW5jdGlvbiAocCwgaSwgYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSB0cy5kaXNwbGF5UGFydHNUb1N0cmluZyhwLmRpc3BsYXlQYXJ0cyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbWV0ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uOiB0cy5kaXNwbGF5UGFydHNUb1N0cmluZyhwLmRvY3VtZW50YXRpb24pXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZS5sYWJlbCArPSBsYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlLnBhcmFtZXRlcnMucHVzaChwYXJhbWV0ZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IGEubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlLmxhYmVsICs9IHRzLmRpc3BsYXlQYXJ0c1RvU3RyaW5nKGl0ZW0uc2VwYXJhdG9yRGlzcGxheVBhcnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNpZ25hdHVyZS5sYWJlbCArPSB0cy5kaXNwbGF5UGFydHNUb1N0cmluZyhpdGVtLnN1ZmZpeERpc3BsYXlQYXJ0cyk7XG4gICAgICAgICAgICAgICAgcmV0LnNpZ25hdHVyZXMucHVzaChzaWduYXR1cmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2lnbmF0dXJlSGVscEFkYXB0ZXI7XG59KEFkYXB0ZXIpKTtcbmV4cG9ydCB7IFNpZ25hdHVyZUhlbHBBZGFwdGVyIH07XG4vLyAtLS0gaG92ZXIgLS0tLS0tXG52YXIgUXVpY2tJbmZvQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUXVpY2tJbmZvQWRhcHRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBRdWlja0luZm9BZGFwdGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFF1aWNrSW5mb0FkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVIb3ZlciA9IGZ1bmN0aW9uIChtb2RlbCwgcG9zaXRpb24sIHRva2VuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHdpcmVDYW5jZWxsYXRpb25Ub2tlbih0b2tlbiwgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZXIuZ2V0UXVpY2tJbmZvQXRQb3NpdGlvbihyZXNvdXJjZS50b1N0cmluZygpLCBfdGhpcy5fcG9zaXRpb25Ub09mZnNldChyZXNvdXJjZSwgcG9zaXRpb24pKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRvY3VtZW50YXRpb24gPSB0cy5kaXNwbGF5UGFydHNUb1N0cmluZyhpbmZvLmRvY3VtZW50YXRpb24pO1xuICAgICAgICAgICAgdmFyIHRhZ3MgPSBpbmZvLnRhZ3MgPyBpbmZvLnRhZ3MubWFwKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBcIipAXCIgKyB0YWcubmFtZSArIFwiKlwiO1xuICAgICAgICAgICAgICAgIGlmICghdGFnLnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWwgKyAodGFnLnRleHQubWF0Y2goL1xcclxcbnxcXG4vZykgPyAnIFxcbicgKyB0YWcudGV4dCA6IFwiIC0gXCIgKyB0YWcudGV4dCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5qb2luKCcgIFxcblxcbicpIDogJyc7XG4gICAgICAgICAgICB2YXIgY29udGVudHMgPSB0cy5kaXNwbGF5UGFydHNUb1N0cmluZyhpbmZvLmRpc3BsYXlQYXJ0cyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJhbmdlOiBfdGhpcy5fdGV4dFNwYW5Ub1JhbmdlKHJlc291cmNlLCBpbmZvLnRleHRTcGFuKSxcbiAgICAgICAgICAgICAgICBjb250ZW50czogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjb250ZW50c1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZG9jdW1lbnRhdGlvbiArICh0YWdzID8gJ1xcblxcbicgKyB0YWdzIDogJycpXG4gICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gUXVpY2tJbmZvQWRhcHRlcjtcbn0oQWRhcHRlcikpO1xuZXhwb3J0IHsgUXVpY2tJbmZvQWRhcHRlciB9O1xuLy8gLS0tIG9jY3VycmVuY2VzIC0tLS0tLVxudmFyIE9jY3VycmVuY2VzQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT2NjdXJyZW5jZXNBZGFwdGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9jY3VycmVuY2VzQWRhcHRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPY2N1cnJlbmNlc0FkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVEb2N1bWVudEhpZ2hsaWdodHMgPSBmdW5jdGlvbiAobW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHJldHVybiB3aXJlQ2FuY2VsbGF0aW9uVG9rZW4odG9rZW4sIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyLmdldE9jY3VycmVuY2VzQXRQb3NpdGlvbihyZXNvdXJjZS50b1N0cmluZygpLCBfdGhpcy5fcG9zaXRpb25Ub09mZnNldChyZXNvdXJjZSwgcG9zaXRpb24pKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICAgICAgaWYgKCFlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiBfdGhpcy5fdGV4dFNwYW5Ub1JhbmdlKHJlc291cmNlLCBlbnRyeS50ZXh0U3BhbiksXG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IGVudHJ5LmlzV3JpdGVBY2Nlc3MgPyBtb25hY28ubGFuZ3VhZ2VzLkRvY3VtZW50SGlnaGxpZ2h0S2luZC5Xcml0ZSA6IG1vbmFjby5sYW5ndWFnZXMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLlRleHRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBPY2N1cnJlbmNlc0FkYXB0ZXI7XG59KEFkYXB0ZXIpKTtcbmV4cG9ydCB7IE9jY3VycmVuY2VzQWRhcHRlciB9O1xuLy8gLS0tIGRlZmluaXRpb24gLS0tLS0tXG52YXIgRGVmaW5pdGlvbkFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERlZmluaXRpb25BZGFwdGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlZmluaXRpb25BZGFwdGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIERlZmluaXRpb25BZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIChtb2RlbCwgcG9zaXRpb24sIHRva2VuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHdpcmVDYW5jZWxsYXRpb25Ub2tlbih0b2tlbiwgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZXIuZ2V0RGVmaW5pdGlvbkF0UG9zaXRpb24ocmVzb3VyY2UudG9TdHJpbmcoKSwgX3RoaXMuX3Bvc2l0aW9uVG9PZmZzZXQocmVzb3VyY2UsIHBvc2l0aW9uKSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVudHJpZXMpIHtcbiAgICAgICAgICAgIGlmICghZW50cmllcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZW50cmllc18xID0gZW50cmllczsgX2kgPCBlbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgdXJpID0gVXJpLnBhcnNlKGVudHJ5LmZpbGVOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAobW9uYWNvLmVkaXRvci5nZXRNb2RlbCh1cmkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVyaTogdXJpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IF90aGlzLl90ZXh0U3BhblRvUmFuZ2UodXJpLCBlbnRyeS50ZXh0U3BhbilcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIERlZmluaXRpb25BZGFwdGVyO1xufShBZGFwdGVyKSk7XG5leHBvcnQgeyBEZWZpbml0aW9uQWRhcHRlciB9O1xuLy8gLS0tIHJlZmVyZW5jZXMgLS0tLS0tXG52YXIgUmVmZXJlbmNlQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVmZXJlbmNlQWRhcHRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZWZlcmVuY2VBZGFwdGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFJlZmVyZW5jZUFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVSZWZlcmVuY2VzID0gZnVuY3Rpb24gKG1vZGVsLCBwb3NpdGlvbiwgY29udGV4dCwgdG9rZW4pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5nZXRSZWZlcmVuY2VzQXRQb3NpdGlvbihyZXNvdXJjZS50b1N0cmluZygpLCBfdGhpcy5fcG9zaXRpb25Ub09mZnNldChyZXNvdXJjZSwgcG9zaXRpb24pKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICAgICAgaWYgKCFlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBlbnRyaWVzXzIgPSBlbnRyaWVzOyBfaSA8IGVudHJpZXNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzXzJbX2ldO1xuICAgICAgICAgICAgICAgIHZhciB1cmkgPSBVcmkucGFyc2UoZW50cnkuZmlsZU5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChtb25hY28uZWRpdG9yLmdldE1vZGVsKHVyaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJpOiB1cmksXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogX3RoaXMuX3RleHRTcGFuVG9SYW5nZSh1cmksIGVudHJ5LnRleHRTcGFuKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVmZXJlbmNlQWRhcHRlcjtcbn0oQWRhcHRlcikpO1xuZXhwb3J0IHsgUmVmZXJlbmNlQWRhcHRlciB9O1xuLy8gLS0tIG91dGxpbmUgLS0tLS0tXG52YXIgT3V0bGluZUFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE91dGxpbmVBZGFwdGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE91dGxpbmVBZGFwdGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE91dGxpbmVBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlRG9jdW1lbnRTeW1ib2xzID0gZnVuY3Rpb24gKG1vZGVsLCB0b2tlbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHJldHVybiB3aXJlQ2FuY2VsbGF0aW9uVG9rZW4odG9rZW4sIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7IHJldHVybiB3b3JrZXIuZ2V0TmF2aWdhdGlvbkJhckl0ZW1zKHJlc291cmNlLnRvU3RyaW5nKCkpOyB9KS50aGVuKGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb252ZXJ0ID0gZnVuY3Rpb24gKGJ1Y2tldCwgaXRlbSwgY29udGFpbmVyTGFiZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLnRleHQsXG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IChvdXRsaW5lVHlwZVRhYmxlW2l0ZW0ua2luZF0gfHwgbW9uYWNvLmxhbmd1YWdlcy5TeW1ib2xLaW5kLlZhcmlhYmxlKSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVyaTogcmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogX3RoaXMuX3RleHRTcGFuVG9SYW5nZShyZXNvdXJjZSwgaXRlbS5zcGFuc1swXSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyTmFtZTogY29udGFpbmVyTGFiZWxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmNoaWxkSXRlbXMgJiYgaXRlbS5jaGlsZEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGl0ZW0uY2hpbGRJdGVtczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQoYnVja2V0LCBjaGlsZCwgcmVzdWx0Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ1Y2tldC5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gY29udmVydChyZXN1bHQsIGl0ZW0pOyB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBPdXRsaW5lQWRhcHRlcjtcbn0oQWRhcHRlcikpO1xuZXhwb3J0IHsgT3V0bGluZUFkYXB0ZXIgfTtcbnZhciBLaW5kID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEtpbmQoKSB7XG4gICAgfVxuICAgIEtpbmQudW5rbm93biA9ICcnO1xuICAgIEtpbmQua2V5d29yZCA9ICdrZXl3b3JkJztcbiAgICBLaW5kLnNjcmlwdCA9ICdzY3JpcHQnO1xuICAgIEtpbmQubW9kdWxlID0gJ21vZHVsZSc7XG4gICAgS2luZC5jbGFzcyA9ICdjbGFzcyc7XG4gICAgS2luZC5pbnRlcmZhY2UgPSAnaW50ZXJmYWNlJztcbiAgICBLaW5kLnR5cGUgPSAndHlwZSc7XG4gICAgS2luZC5lbnVtID0gJ2VudW0nO1xuICAgIEtpbmQudmFyaWFibGUgPSAndmFyJztcbiAgICBLaW5kLmxvY2FsVmFyaWFibGUgPSAnbG9jYWwgdmFyJztcbiAgICBLaW5kLmZ1bmN0aW9uID0gJ2Z1bmN0aW9uJztcbiAgICBLaW5kLmxvY2FsRnVuY3Rpb24gPSAnbG9jYWwgZnVuY3Rpb24nO1xuICAgIEtpbmQubWVtYmVyRnVuY3Rpb24gPSAnbWV0aG9kJztcbiAgICBLaW5kLm1lbWJlckdldEFjY2Vzc29yID0gJ2dldHRlcic7XG4gICAgS2luZC5tZW1iZXJTZXRBY2Nlc3NvciA9ICdzZXR0ZXInO1xuICAgIEtpbmQubWVtYmVyVmFyaWFibGUgPSAncHJvcGVydHknO1xuICAgIEtpbmQuY29uc3RydWN0b3JJbXBsZW1lbnRhdGlvbiA9ICdjb25zdHJ1Y3Rvcic7XG4gICAgS2luZC5jYWxsU2lnbmF0dXJlID0gJ2NhbGwnO1xuICAgIEtpbmQuaW5kZXhTaWduYXR1cmUgPSAnaW5kZXgnO1xuICAgIEtpbmQuY29uc3RydWN0U2lnbmF0dXJlID0gJ2NvbnN0cnVjdCc7XG4gICAgS2luZC5wYXJhbWV0ZXIgPSAncGFyYW1ldGVyJztcbiAgICBLaW5kLnR5cGVQYXJhbWV0ZXIgPSAndHlwZSBwYXJhbWV0ZXInO1xuICAgIEtpbmQucHJpbWl0aXZlVHlwZSA9ICdwcmltaXRpdmUgdHlwZSc7XG4gICAgS2luZC5sYWJlbCA9ICdsYWJlbCc7XG4gICAgS2luZC5hbGlhcyA9ICdhbGlhcyc7XG4gICAgS2luZC5jb25zdCA9ICdjb25zdCc7XG4gICAgS2luZC5sZXQgPSAnbGV0JztcbiAgICBLaW5kLndhcm5pbmcgPSAnd2FybmluZyc7XG4gICAgcmV0dXJuIEtpbmQ7XG59KCkpO1xuZXhwb3J0IHsgS2luZCB9O1xudmFyIG91dGxpbmVUeXBlVGFibGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xub3V0bGluZVR5cGVUYWJsZVtLaW5kLm1vZHVsZV0gPSBtb25hY28ubGFuZ3VhZ2VzLlN5bWJvbEtpbmQuTW9kdWxlO1xub3V0bGluZVR5cGVUYWJsZVtLaW5kLmNsYXNzXSA9IG1vbmFjby5sYW5ndWFnZXMuU3ltYm9sS2luZC5DbGFzcztcbm91dGxpbmVUeXBlVGFibGVbS2luZC5lbnVtXSA9IG1vbmFjby5sYW5ndWFnZXMuU3ltYm9sS2luZC5FbnVtO1xub3V0bGluZVR5cGVUYWJsZVtLaW5kLmludGVyZmFjZV0gPSBtb25hY28ubGFuZ3VhZ2VzLlN5bWJvbEtpbmQuSW50ZXJmYWNlO1xub3V0bGluZVR5cGVUYWJsZVtLaW5kLm1lbWJlckZ1bmN0aW9uXSA9IG1vbmFjby5sYW5ndWFnZXMuU3ltYm9sS2luZC5NZXRob2Q7XG5vdXRsaW5lVHlwZVRhYmxlW0tpbmQubWVtYmVyVmFyaWFibGVdID0gbW9uYWNvLmxhbmd1YWdlcy5TeW1ib2xLaW5kLlByb3BlcnR5O1xub3V0bGluZVR5cGVUYWJsZVtLaW5kLm1lbWJlckdldEFjY2Vzc29yXSA9IG1vbmFjby5sYW5ndWFnZXMuU3ltYm9sS2luZC5Qcm9wZXJ0eTtcbm91dGxpbmVUeXBlVGFibGVbS2luZC5tZW1iZXJTZXRBY2Nlc3Nvcl0gPSBtb25hY28ubGFuZ3VhZ2VzLlN5bWJvbEtpbmQuUHJvcGVydHk7XG5vdXRsaW5lVHlwZVRhYmxlW0tpbmQudmFyaWFibGVdID0gbW9uYWNvLmxhbmd1YWdlcy5TeW1ib2xLaW5kLlZhcmlhYmxlO1xub3V0bGluZVR5cGVUYWJsZVtLaW5kLmNvbnN0XSA9IG1vbmFjby5sYW5ndWFnZXMuU3ltYm9sS2luZC5WYXJpYWJsZTtcbm91dGxpbmVUeXBlVGFibGVbS2luZC5sb2NhbFZhcmlhYmxlXSA9IG1vbmFjby5sYW5ndWFnZXMuU3ltYm9sS2luZC5WYXJpYWJsZTtcbm91dGxpbmVUeXBlVGFibGVbS2luZC52YXJpYWJsZV0gPSBtb25hY28ubGFuZ3VhZ2VzLlN5bWJvbEtpbmQuVmFyaWFibGU7XG5vdXRsaW5lVHlwZVRhYmxlW0tpbmQuZnVuY3Rpb25dID0gbW9uYWNvLmxhbmd1YWdlcy5TeW1ib2xLaW5kLkZ1bmN0aW9uO1xub3V0bGluZVR5cGVUYWJsZVtLaW5kLmxvY2FsRnVuY3Rpb25dID0gbW9uYWNvLmxhbmd1YWdlcy5TeW1ib2xLaW5kLkZ1bmN0aW9uO1xuLy8gLS0tIGZvcm1hdHRpbmcgLS0tLVxudmFyIEZvcm1hdEhlbHBlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRm9ybWF0SGVscGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvcm1hdEhlbHBlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBGb3JtYXRIZWxwZXIuX2NvbnZlcnRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIENvbnZlcnRUYWJzVG9TcGFjZXM6IG9wdGlvbnMuaW5zZXJ0U3BhY2VzLFxuICAgICAgICAgICAgVGFiU2l6ZTogb3B0aW9ucy50YWJTaXplLFxuICAgICAgICAgICAgSW5kZW50U2l6ZTogb3B0aW9ucy50YWJTaXplLFxuICAgICAgICAgICAgSW5kZW50U3R5bGU6IHRzLkluZGVudFN0eWxlLlNtYXJ0LFxuICAgICAgICAgICAgTmV3TGluZUNoYXJhY3RlcjogJ1xcbicsXG4gICAgICAgICAgICBJbnNlcnRTcGFjZUFmdGVyQ29tbWFEZWxpbWl0ZXI6IHRydWUsXG4gICAgICAgICAgICBJbnNlcnRTcGFjZUFmdGVyU2VtaWNvbG9uSW5Gb3JTdGF0ZW1lbnRzOiB0cnVlLFxuICAgICAgICAgICAgSW5zZXJ0U3BhY2VCZWZvcmVBbmRBZnRlckJpbmFyeU9wZXJhdG9yczogdHJ1ZSxcbiAgICAgICAgICAgIEluc2VydFNwYWNlQWZ0ZXJLZXl3b3Jkc0luQ29udHJvbEZsb3dTdGF0ZW1lbnRzOiB0cnVlLFxuICAgICAgICAgICAgSW5zZXJ0U3BhY2VBZnRlckZ1bmN0aW9uS2V5d29yZEZvckFub255bW91c0Z1bmN0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgIEluc2VydFNwYWNlQWZ0ZXJPcGVuaW5nQW5kQmVmb3JlQ2xvc2luZ05vbmVtcHR5UGFyZW50aGVzaXM6IGZhbHNlLFxuICAgICAgICAgICAgSW5zZXJ0U3BhY2VBZnRlck9wZW5pbmdBbmRCZWZvcmVDbG9zaW5nTm9uZW1wdHlCcmFja2V0czogZmFsc2UsXG4gICAgICAgICAgICBJbnNlcnRTcGFjZUFmdGVyT3BlbmluZ0FuZEJlZm9yZUNsb3NpbmdUZW1wbGF0ZVN0cmluZ0JyYWNlczogZmFsc2UsXG4gICAgICAgICAgICBQbGFjZU9wZW5CcmFjZU9uTmV3TGluZUZvckNvbnRyb2xCbG9ja3M6IGZhbHNlLFxuICAgICAgICAgICAgUGxhY2VPcGVuQnJhY2VPbk5ld0xpbmVGb3JGdW5jdGlvbnM6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBGb3JtYXRIZWxwZXIucHJvdG90eXBlLl9jb252ZXJ0VGV4dENoYW5nZXMgPSBmdW5jdGlvbiAodXJpLCBjaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHQ6IGNoYW5nZS5uZXdUZXh0LFxuICAgICAgICAgICAgcmFuZ2U6IHRoaXMuX3RleHRTcGFuVG9SYW5nZSh1cmksIGNoYW5nZS5zcGFuKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIEZvcm1hdEhlbHBlcjtcbn0oQWRhcHRlcikpO1xuZXhwb3J0IHsgRm9ybWF0SGVscGVyIH07XG52YXIgRm9ybWF0QWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRm9ybWF0QWRhcHRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGb3JtYXRBZGFwdGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEZvcm1hdEFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRzID0gZnVuY3Rpb24gKG1vZGVsLCByYW5nZSwgb3B0aW9ucywgdG9rZW4pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5nZXRGb3JtYXR0aW5nRWRpdHNGb3JSYW5nZShyZXNvdXJjZS50b1N0cmluZygpLCBfdGhpcy5fcG9zaXRpb25Ub09mZnNldChyZXNvdXJjZSwgeyBsaW5lTnVtYmVyOiByYW5nZS5zdGFydExpbmVOdW1iZXIsIGNvbHVtbjogcmFuZ2Uuc3RhcnRDb2x1bW4gfSksIF90aGlzLl9wb3NpdGlvblRvT2Zmc2V0KHJlc291cmNlLCB7IGxpbmVOdW1iZXI6IHJhbmdlLmVuZExpbmVOdW1iZXIsIGNvbHVtbjogcmFuZ2UuZW5kQ29sdW1uIH0pLCBGb3JtYXRIZWxwZXIuX2NvbnZlcnRPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZWRpdHMpIHtcbiAgICAgICAgICAgIGlmIChlZGl0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlZGl0cy5tYXAoZnVuY3Rpb24gKGVkaXQpIHsgcmV0dXJuIF90aGlzLl9jb252ZXJ0VGV4dENoYW5nZXMocmVzb3VyY2UsIGVkaXQpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEZvcm1hdEFkYXB0ZXI7XG59KEZvcm1hdEhlbHBlcikpO1xuZXhwb3J0IHsgRm9ybWF0QWRhcHRlciB9O1xudmFyIEZvcm1hdE9uVHlwZUFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcm1hdE9uVHlwZUFkYXB0ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9ybWF0T25UeXBlQWRhcHRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRm9ybWF0T25UeXBlQWRhcHRlci5wcm90b3R5cGUsIFwiYXV0b0Zvcm1hdFRyaWdnZXJDaGFyYWN0ZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gWyc7JywgJ30nLCAnXFxuJ107XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEZvcm1hdE9uVHlwZUFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVPblR5cGVGb3JtYXR0aW5nRWRpdHMgPSBmdW5jdGlvbiAobW9kZWwsIHBvc2l0aW9uLCBjaCwgb3B0aW9ucywgdG9rZW4pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5nZXRGb3JtYXR0aW5nRWRpdHNBZnRlcktleXN0cm9rZShyZXNvdXJjZS50b1N0cmluZygpLCBfdGhpcy5fcG9zaXRpb25Ub09mZnNldChyZXNvdXJjZSwgcG9zaXRpb24pLCBjaCwgRm9ybWF0SGVscGVyLl9jb252ZXJ0T3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVkaXRzKSB7XG4gICAgICAgICAgICBpZiAoZWRpdHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWRpdHMubWFwKGZ1bmN0aW9uIChlZGl0KSB7IHJldHVybiBfdGhpcy5fY29udmVydFRleHRDaGFuZ2VzKHJlc291cmNlLCBlZGl0KTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBGb3JtYXRPblR5cGVBZGFwdGVyO1xufShGb3JtYXRIZWxwZXIpKTtcbmV4cG9ydCB7IEZvcm1hdE9uVHlwZUFkYXB0ZXIgfTtcbi8qKlxuICogSG9vayBhIGNhbmNlbGxhdGlvbiB0b2tlbiB0byBhIFdpbkpTIFByb21pc2VcbiAqL1xuZnVuY3Rpb24gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCBwcm9taXNlKSB7XG4gICAgdG9rZW4ub25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQoZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvbWlzZS5jYW5jZWwoKTsgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IExhbmd1YWdlLCBjcmVhdGVUb2tlbml6YXRpb25TdXBwb3J0IH0gZnJvbSAnLi90b2tlbml6YXRpb24uanMnO1xuaW1wb3J0IHsgV29ya2VyTWFuYWdlciB9IGZyb20gJy4vd29ya2VyTWFuYWdlci5qcyc7XG5pbXBvcnQgKiBhcyBsYW5ndWFnZUZlYXR1cmVzIGZyb20gJy4vbGFuZ3VhZ2VGZWF0dXJlcy5qcyc7XG52YXIgamF2YVNjcmlwdFdvcmtlcjtcbnZhciB0eXBlU2NyaXB0V29ya2VyO1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwVHlwZVNjcmlwdChkZWZhdWx0cykge1xuICAgIHR5cGVTY3JpcHRXb3JrZXIgPSBzZXR1cE1vZGUoZGVmYXVsdHMsICd0eXBlc2NyaXB0JywgTGFuZ3VhZ2UuVHlwZVNjcmlwdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0dXBKYXZhU2NyaXB0KGRlZmF1bHRzKSB7XG4gICAgamF2YVNjcmlwdFdvcmtlciA9IHNldHVwTW9kZShkZWZhdWx0cywgJ2phdmFzY3JpcHQnLCBMYW5ndWFnZS5FY21hU2NyaXB0NSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0SmF2YVNjcmlwdFdvcmtlcigpIHtcbiAgICByZXR1cm4gbmV3IG1vbmFjby5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKCFqYXZhU2NyaXB0V29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KFwiSmF2YVNjcmlwdCBub3QgcmVnaXN0ZXJlZCFcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShqYXZhU2NyaXB0V29ya2VyKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlU2NyaXB0V29ya2VyKCkge1xuICAgIHJldHVybiBuZXcgbW9uYWNvLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoIXR5cGVTY3JpcHRXb3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoXCJUeXBlU2NyaXB0IG5vdCByZWdpc3RlcmVkIVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHR5cGVTY3JpcHRXb3JrZXIpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gc2V0dXBNb2RlKGRlZmF1bHRzLCBtb2RlSWQsIGxhbmd1YWdlKSB7XG4gICAgdmFyIGNsaWVudCA9IG5ldyBXb3JrZXJNYW5hZ2VyKG1vZGVJZCwgZGVmYXVsdHMpO1xuICAgIHZhciB3b3JrZXIgPSBmdW5jdGlvbiAoZmlyc3QpIHtcbiAgICAgICAgdmFyIG1vcmUgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG1vcmVbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIuYXBwbHkoY2xpZW50LCBbZmlyc3RdLmNvbmNhdChtb3JlKSk7XG4gICAgfTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyQ29tcGxldGlvbkl0ZW1Qcm92aWRlcihtb2RlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLlN1Z2dlc3RBZGFwdGVyKHdvcmtlcikpO1xuICAgIG1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJTaWduYXR1cmVIZWxwUHJvdmlkZXIobW9kZUlkLCBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5TaWduYXR1cmVIZWxwQWRhcHRlcih3b3JrZXIpKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVySG92ZXJQcm92aWRlcihtb2RlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLlF1aWNrSW5mb0FkYXB0ZXIod29ya2VyKSk7XG4gICAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50SGlnaGxpZ2h0UHJvdmlkZXIobW9kZUlkLCBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5PY2N1cnJlbmNlc0FkYXB0ZXIod29ya2VyKSk7XG4gICAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckRlZmluaXRpb25Qcm92aWRlcihtb2RlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRlZmluaXRpb25BZGFwdGVyKHdvcmtlcikpO1xuICAgIG1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJSZWZlcmVuY2VQcm92aWRlcihtb2RlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLlJlZmVyZW5jZUFkYXB0ZXIod29ya2VyKSk7XG4gICAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50U3ltYm9sUHJvdmlkZXIobW9kZUlkLCBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5PdXRsaW5lQWRhcHRlcih3b3JrZXIpKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIobW9kZUlkLCBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5Gb3JtYXRBZGFwdGVyKHdvcmtlcikpO1xuICAgIG1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJPblR5cGVGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKG1vZGVJZCwgbmV3IGxhbmd1YWdlRmVhdHVyZXMuRm9ybWF0T25UeXBlQWRhcHRlcih3b3JrZXIpKTtcbiAgICBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5EaWFnbm9zdGNzQWRhcHRlcihkZWZhdWx0cywgbW9kZUlkLCB3b3JrZXIpO1xuICAgIG1vbmFjby5sYW5ndWFnZXMuc2V0TGFuZ3VhZ2VDb25maWd1cmF0aW9uKG1vZGVJZCwgcmljaEVkaXRDb25maWd1cmF0aW9uKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnNldFRva2Vuc1Byb3ZpZGVyKG1vZGVJZCwgY3JlYXRlVG9rZW5pemF0aW9uU3VwcG9ydChsYW5ndWFnZSkpO1xuICAgIHJldHVybiB3b3JrZXI7XG59XG52YXIgcmljaEVkaXRDb25maWd1cmF0aW9uID0ge1xuICAgIHdvcmRQYXR0ZXJuOiAvKC0/XFxkKlxcLlxcZFxcdyopfChbXlxcYFxcflxcIVxcQFxcI1xcJVxcXlxcJlxcKlxcKFxcKVxcLVxcPVxcK1xcW1xce1xcXVxcfVxcXFxcXHxcXDtcXDpcXCdcXFwiXFwsXFwuXFw8XFw+XFwvXFw/XFxzXSspL2csXG4gICAgY29tbWVudHM6IHtcbiAgICAgICAgbGluZUNvbW1lbnQ6ICcvLycsXG4gICAgICAgIGJsb2NrQ29tbWVudDogWycvKicsICcqLyddXG4gICAgfSxcbiAgICBicmFja2V0czogW1xuICAgICAgICBbJ3snLCAnfSddLFxuICAgICAgICBbJ1snLCAnXSddLFxuICAgICAgICBbJygnLCAnKSddXG4gICAgXSxcbiAgICBvbkVudGVyUnVsZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gZS5nLiAvKiogfCAqL1xuICAgICAgICAgICAgYmVmb3JlVGV4dDogL15cXHMqXFwvXFwqXFwqKD8hXFwvKShbXlxcKl18XFwqKD8hXFwvKSkqJC8sXG4gICAgICAgICAgICBhZnRlclRleHQ6IC9eXFxzKlxcKlxcLyQvLFxuICAgICAgICAgICAgYWN0aW9uOiB7IGluZGVudEFjdGlvbjogbW9uYWNvLmxhbmd1YWdlcy5JbmRlbnRBY3Rpb24uSW5kZW50T3V0ZGVudCwgYXBwZW5kVGV4dDogJyAqICcgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBlLmcuIC8qKiAuLi58XG4gICAgICAgICAgICBiZWZvcmVUZXh0OiAvXlxccypcXC9cXCpcXCooPyFcXC8pKFteXFwqXXxcXCooPyFcXC8pKSokLyxcbiAgICAgICAgICAgIGFjdGlvbjogeyBpbmRlbnRBY3Rpb246IG1vbmFjby5sYW5ndWFnZXMuSW5kZW50QWN0aW9uLk5vbmUsIGFwcGVuZFRleHQ6ICcgKiAnIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gZS5nLiAgKiAuLi58XG4gICAgICAgICAgICBiZWZvcmVUZXh0OiAvXihcXHR8KFxcIFxcICkpKlxcIFxcKihcXCAoW15cXCpdfFxcKig/IVxcLykpKik/JC8sXG4gICAgICAgICAgICBhY3Rpb246IHsgaW5kZW50QWN0aW9uOiBtb25hY28ubGFuZ3VhZ2VzLkluZGVudEFjdGlvbi5Ob25lLCBhcHBlbmRUZXh0OiAnKiAnIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gZS5nLiAgKi98XG4gICAgICAgICAgICBiZWZvcmVUZXh0OiAvXihcXHR8KFxcIFxcICkpKlxcIFxcKlxcL1xccyokLyxcbiAgICAgICAgICAgIGFjdGlvbjogeyBpbmRlbnRBY3Rpb246IG1vbmFjby5sYW5ndWFnZXMuSW5kZW50QWN0aW9uLk5vbmUsIHJlbW92ZVRleHQ6IDEgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICBhdXRvQ2xvc2luZ1BhaXJzOiBbXG4gICAgICAgIHsgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXG4gICAgICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicsIG5vdEluOiBbJ3N0cmluZyddIH0sXG4gICAgICAgIHsgb3BlbjogJ1xcJycsIGNsb3NlOiAnXFwnJywgbm90SW46IFsnc3RyaW5nJywgJ2NvbW1lbnQnXSB9LFxuICAgICAgICB7IG9wZW46ICdgJywgY2xvc2U6ICdgJywgbm90SW46IFsnc3RyaW5nJywgJ2NvbW1lbnQnXSB9LFxuICAgICAgICB7IG9wZW46IFwiLyoqXCIsIGNsb3NlOiBcIiAqL1wiLCBub3RJbjogW1wic3RyaW5nXCJdIH1cbiAgICBdLFxuICAgIGZvbGRpbmc6IHtcbiAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgc3RhcnQ6IG5ldyBSZWdFeHAoXCJeXFxcXHMqLy9cXFxccyojP3JlZ2lvblxcXFxiXCIpLFxuICAgICAgICAgICAgZW5kOiBuZXcgUmVnRXhwKFwiXlxcXFxzKi8vXFxcXHMqIz9lbmRyZWdpb25cXFxcYlwiKVxuICAgICAgICB9XG4gICAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=