!function(t){this.webpackChunk=function(e,r){for(var i in r)t[i]=r[i];for(;e.length;)n[e.pop()]=1};var e={},n={0:1};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=4)}([function(t,e,n){"use strict";(function(t,r){var i;n.d(e,"a",function(){return o}),n.d(e,"b",function(){return s}),function(){var e=Object.create(null);e["WinJS/Core/_WinJS"]={};var n=function(t,n,r){var i={},o=!1,s=n.map(function(t){return"exports"===t?(o=!0,i):e[t]}),u=r.apply({},s);e[t]=o?i:u};n("WinJS/Core/_Global",[],function(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:void 0!==t?t:{}}),n("WinJS/Core/_BaseCoreUtils",["WinJS/Core/_Global"],function(t){var e=null;return{hasWinRT:!!t.Windows,markSupportedForProcessing:function(t){return t.supportedForProcessing=!0,t},_setImmediate:function(n){null===e&&(e=t.setImmediate?t.setImmediate.bind(t):void 0!==r&&"function"==typeof r.nextTick?r.nextTick.bind(r):t.setTimeout.bind(t)),e(n)}}}),n("WinJS/Core/_WriteProfilerMark",["WinJS/Core/_Global"],function(t){return t.msWriteProfilerMark||function(){}}),n("WinJS/Core/_Base",["WinJS/Core/_WinJS","WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_WriteProfilerMark"],function(t,e,n,r){function i(t,e,n){var r,i,o,s=Object.keys(e),u=Array.isArray(t);for(i=0,o=s.length;i<o;i++){var a=s[i],l=95!==a.charCodeAt(0),c=e[a];!c||"object"!=typeof c||void 0===c.value&&"function"!=typeof c.get&&"function"!=typeof c.set?l?u?t.forEach(function(t){t[a]=c}):t[a]=c:(r=r||{})[a]={value:c,enumerable:l,configurable:!0,writable:!0}:(void 0===c.enumerable&&(c.enumerable=l),n&&c.setName&&"function"==typeof c.setName&&c.setName(n+"."+a),(r=r||{})[a]=c)}r&&(u?t.forEach(function(t){Object.defineProperties(t,r)}):Object.defineProperties(t,r))}return function(){var n=t;function o(n,r){var i=n||{};if(r){var o=r.split(".");i===e&&"WinJS"===o[0]&&(i=t,o.splice(0,1));for(var s=0,u=o.length;s<u;s++){var a=o[s];i[a]||Object.defineProperty(i,a,{value:{},writable:!1,enumerable:!0,configurable:!0}),i=i[a]}}return i}function s(t,e,n){var r=o(t,e);return n&&i(r,n,e||"<ANONYMOUS>"),r}n.Namespace||(n.Namespace=Object.create(Object.prototype));var u={uninitialized:1,working:2,initialized:3};Object.defineProperties(n.Namespace,{defineWithParent:{value:s,writable:!0,enumerable:!0,configurable:!0},define:{value:function(t,n){return s(e,t,n)},writable:!0,enumerable:!0,configurable:!0},_lazy:{value:function(t){var e,n,i=u.uninitialized;return{setName:function(t){e=t},get:function(){switch(i){case u.initialized:return n;case u.uninitialized:i=u.working;try{r("WinJS.Namespace._lazy:"+e+",StartTM"),n=t()}finally{r("WinJS.Namespace._lazy:"+e+",StopTM"),i=u.uninitialized}return t=null,i=u.initialized,n;case u.working:throw"Illegal: reentrancy on initialization";default:throw"Illegal"}},set:function(t){switch(i){case u.working:throw"Illegal: reentrancy on initialization";default:i=u.initialized,n=t}},enumerable:!0,configurable:!0}},writable:!0,enumerable:!0,configurable:!0},_moduleDefine:{value:function(t,n,r){var s=[t],u=null;return n&&(u=o(e,n),s.push(u)),i(s,r,n||"<ANONYMOUS>"),u},writable:!0,enumerable:!0,configurable:!0}})}(),function(){function e(t,e,r){return t=t||function(){},n.markSupportedForProcessing(t),e&&i(t.prototype,e),r&&i(t,r),t}t.Namespace.define("WinJS.Class",{define:e,derive:function(t,r,o,s){if(t){r=r||function(){};var u=t.prototype;return r.prototype=Object.create(u),n.markSupportedForProcessing(r),Object.defineProperty(r.prototype,"constructor",{value:r,writable:!0,configurable:!0,enumerable:!0}),o&&i(r.prototype,o),s&&i(r,s),r}return e(r,o,s)},mix:function(t){var e,n;for(t=t||function(){},e=1,n=arguments.length;e<n;e++)i(t.prototype,arguments[e]);return t}})}(),{Namespace:t.Namespace,Class:t.Class}}),n("WinJS/Core/_ErrorFromName",["WinJS/Core/_Base"],function(t){var e=t.Class.derive(Error,function(t,e){this.name=t,this.message=e||t},{},{supportedForProcessing:!1});return t.Namespace.define("WinJS",{ErrorFromName:e}),e}),n("WinJS/Core/_Events",["exports","WinJS/Core/_Base"],function(t,e){function n(t){var e="_on"+t+"state";return{get:function(){var t=this[e];return t&&t.userHandler},set:function(n){var r=this[e];n?(r||(r={wrapper:function(t){return r.userHandler(t)},userHandler:n},Object.defineProperty(this,e,{value:r,enumerable:!1,writable:!0,configurable:!0}),this.addEventListener(t,r.wrapper,!1)),r.userHandler=n):r&&(this.removeEventListener(t,r.wrapper,!1),this[e]=null)},enumerable:!0}}var r=e.Class.define(function(t,e,n){this.detail=e,this.target=n,this.timeStamp=Date.now(),this.type=t},{bubbles:{value:!1,writable:!1},cancelable:{value:!1,writable:!1},currentTarget:{get:function(){return this.target}},defaultPrevented:{get:function(){return this._preventDefaultCalled}},trusted:{value:!1,writable:!1},eventPhase:{value:0,writable:!1},target:null,timeStamp:null,type:null,preventDefault:function(){this._preventDefaultCalled=!0},stopImmediatePropagation:function(){this._stopImmediatePropagationCalled=!0},stopPropagation:function(){}},{supportedForProcessing:!1}),i={_listeners:null,addEventListener:function(t,e,n){n=n||!1,this._listeners=this._listeners||{};for(var r=this._listeners[t]=this._listeners[t]||[],i=0,o=r.length;i<o;i++){var s=r[i];if(s.useCapture===n&&s.listener===e)return}r.push({listener:e,useCapture:n})},dispatchEvent:function(t,e){var n=this._listeners&&this._listeners[t];if(n){for(var i=new r(t,e,this),o=0,s=(n=n.slice(0,n.length)).length;o<s&&!i._stopImmediatePropagationCalled;o++)n[o].listener(i);return i.defaultPrevented||!1}return!1},removeEventListener:function(t,e,n){n=n||!1;var r=this._listeners&&this._listeners[t];if(r)for(var i=0,o=r.length;i<o;i++){var s=r[i];if(s.listener===e&&s.useCapture===n){r.splice(i,1),0===r.length&&delete this._listeners[t];break}}}};e.Namespace._moduleDefine(t,"WinJS.Utilities",{_createEventProperty:n,createEventProperties:function(){for(var t={},e=0,r=arguments.length;e<r;e++){var i=arguments[e];t["on"+i]=n(i)}return t},eventMixin:i})}),n("WinJS/Core/_Trace",["WinJS/Core/_Global"],function(t){function e(t){return t}return{_traceAsyncOperationStarting:t.Debug&&t.Debug.msTraceAsyncOperationStarting&&t.Debug.msTraceAsyncOperationStarting.bind(t.Debug)||e,_traceAsyncOperationCompleted:t.Debug&&t.Debug.msTraceAsyncOperationCompleted&&t.Debug.msTraceAsyncOperationCompleted.bind(t.Debug)||e,_traceAsyncCallbackStarting:t.Debug&&t.Debug.msTraceAsyncCallbackStarting&&t.Debug.msTraceAsyncCallbackStarting.bind(t.Debug)||e,_traceAsyncCallbackCompleted:t.Debug&&t.Debug.msTraceAsyncCallbackCompleted&&t.Debug.msTraceAsyncCallbackCompleted.bind(t.Debug)||e}}),n("WinJS/Promise/_StateMachine",["WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_Base","WinJS/Core/_ErrorFromName","WinJS/Core/_Events","WinJS/Core/_Trace"],function(t,e,n,r,i,o){t.Debug&&(t.Debug.setNonUserCodeExceptions=!0);var s=new(n.Class.mix(n.Class.define(null,{},{supportedForProcessing:!1}),i.eventMixin));s._listeners={};var u="error",a="Canceled",l=!1,c={promise:1,thenPromise:2,errorPromise:4,exceptionPromise:8,completePromise:16};c.all=c.promise|c.thenPromise|c.errorPromise|c.exceptionPromise|c.completePromise;var h,f,p,d,m,_,g,v,y,b,C=1;function S(){}h={name:"created",enter:function(t){t._setState(f)},cancel:S,done:S,then:S,_completed:S,_error:S,_notify:S,_progress:S,_setCompleteValue:S,_setErrorValue:S},f={name:"working",enter:S,cancel:function(t){t._setState(m)},done:M,then:F,_completed:L,_error:k,_notify:S,_progress:D,_setCompleteValue:q,_setErrorValue:R},p={name:"waiting",enter:function(t){var e=t._value;if(e instanceof V&&e._state!==b&&e._state!==v)U(e,{promise:t});else{var n=function(r){e._errorId?t._chainedError(r,e):(T(t,r,w,e,n),t._error(r))};n.handlesOnError=!0,e.then(t._completed.bind(t),n,t._progress.bind(t))}},cancel:function(t){t._setState(d)},done:M,then:F,_completed:L,_error:k,_notify:S,_progress:D,_setCompleteValue:q,_setErrorValue:R},d={name:"waiting_canceled",enter:function(t){t._setState(_);var e=t._value;e.cancel&&e.cancel()},cancel:S,done:M,then:F,_completed:L,_error:k,_notify:S,_progress:D,_setCompleteValue:q,_setErrorValue:R},m={name:"canceled",enter:function(t){t._setState(_),t._cancelAction()},cancel:S,done:M,then:F,_completed:L,_error:k,_notify:S,_progress:D,_setCompleteValue:q,_setErrorValue:R},_={name:"canceling",enter:function(t){var e=new Error(a);e.name=e.message,t._value=e,t._setState(y)},cancel:S,done:S,then:S,_completed:S,_error:S,_notify:S,_progress:S,_setCompleteValue:S,_setErrorValue:S},g={name:"complete_notify",enter:function(t){if(t.done=B.prototype.done,t.then=B.prototype.then,t._listeners)for(var e,n=[t];n.length;)(e=n.shift())._state._notify(e,n);t._setState(v)},cancel:S,done:null,then:null,_completed:S,_error:S,_notify:O,_progress:S,_setCompleteValue:S,_setErrorValue:S},v={name:"success",enter:function(t){t.done=B.prototype.done,t.then=B.prototype.then,t._cleanupAction()},cancel:S,done:null,then:null,_completed:S,_error:S,_notify:O,_progress:S,_setCompleteValue:S,_setErrorValue:S},y={name:"error_notify",enter:function(t){if(t.done=W.prototype.done,t.then=W.prototype.then,t._listeners)for(var e,n=[t];n.length;)(e=n.shift())._state._notify(e,n);t._setState(b)},cancel:S,done:null,then:null,_completed:S,_error:S,_notify:I,_progress:S,_setCompleteValue:S,_setErrorValue:S},b={name:"error",enter:function(t){t.done=W.prototype.done,t.then=W.prototype.then,t._cleanupAction()},cancel:S,done:null,then:null,_completed:S,_error:S,_notify:I,_progress:S,_setCompleteValue:S,_setErrorValue:S};var N=n.Class.define(null,{_listeners:null,_nextState:null,_state:null,_value:null,cancel:function(){this._state.cancel(this),this._run()},done:function(t,e,n){this._state.done(this,t,e,n)},then:function(t,e,n){return this._state.then(this,t,e,n)},_chainedError:function(t,e){var n=this._state._error(this,t,P,e);return this._run(),n},_completed:function(t){var e=this._state._completed(this,t);return this._run(),e},_error:function(t){var e=this._state._error(this,t,A);return this._run(),e},_progress:function(t){this._state._progress(this,t)},_setState:function(t){this._nextState=t},_setCompleteValue:function(t){this._state._setCompleteValue(this,t),this._run()},_setChainedErrorValue:function(t,e){var n=this._state._setErrorValue(this,t,P,e);return this._run(),n},_setExceptionValue:function(t){var e=this._state._setErrorValue(this,t,x);return this._run(),e},_run:function(){for(;this._nextState;)this._state=this._nextState,this._nextState=null,this._state.enter(this)}},{supportedForProcessing:!1});function L(t,e){var n;n=e&&"object"==typeof e&&"function"==typeof e.then?p:g,t._value=e,t._setState(n)}function E(t,e,n,r,i,o){return{exception:t,error:e,promise:n,handler:o,id:r,parent:i}}function w(t,e,n,r){var i=n._isException,o=n._errorId;return E(i?e:null,i?null:e,t,o,n,r)}function P(t,e,n){var r=n._isException,i=n._errorId;return K(t,i,r),E(r?e:null,r?null:e,t,i,n)}function A(t,e){var n=++C;return K(t,n),E(null,e,t,n)}function x(t,e){var n=++C;return K(t,n,!0),E(e,null,t,n)}function M(t,e,n,r){U(t,{c:e,e:n,p:r,asyncOpID:o._traceAsyncOperationStarting("WinJS.Promise.done")})}function k(t,e,n,r){t._value=e,T(t,e,n,r),t._setState(y)}function O(e,n){var r,i,s=e._value,u=e._listeners;if(u)for(e._listeners=null,r=0,i=Array.isArray(u)?u.length:1;r<i;r++){var a=1===i?u:u[r],l=a.c,c=a.promise;if(o._traceAsyncOperationCompleted(a.asyncOpID,t.Debug&&t.Debug.MS_ASYNC_OP_STATUS_SUCCESS),c){o._traceAsyncCallbackStarting(a.asyncOpID);try{c._setCompleteValue(l?l(s):s)}catch(t){c._setExceptionValue(t)}finally{o._traceAsyncCallbackCompleted()}c._state!==p&&c._listeners&&n.push(c)}else B.prototype.done.call(e,l)}}function I(e,n){var r,i,s=e._value,u=e._listeners;if(u)for(e._listeners=null,r=0,i=Array.isArray(u)?u.length:1;r<i;r++){var l=1===i?u:u[r],c=l.e,h=l.promise,f=t.Debug&&(s&&s.name===a?t.Debug.MS_ASYNC_OP_STATUS_CANCELED:t.Debug.MS_ASYNC_OP_STATUS_ERROR);if(o._traceAsyncOperationCompleted(l.asyncOpID,f),h){var d=!1;try{c?(o._traceAsyncCallbackStarting(l.asyncOpID),d=!0,c.handlesOnError||T(h,s,w,e,c),h._setCompleteValue(c(s))):h._setChainedErrorValue(s,e)}catch(t){h._setExceptionValue(t)}finally{d&&o._traceAsyncCallbackCompleted()}h._state!==p&&h._listeners&&n.push(h)}else W.prototype.done.call(e,null,c)}}function T(t,e,n,r,i){if(s._listeners[u]){if(e instanceof Error&&e.message===a)return;s.dispatchEvent(u,n(t,e,r,i))}}function D(t,e){var n,r,i=t._listeners;if(i)for(n=0,r=Array.isArray(i)?i.length:1;n<r;n++){var o=1===r?i:i[n],s=o.p;if(s)try{s(e)}catch(t){}o.c||o.e||!o.promise||o.promise._progress(e)}}function U(t,e){var n=t._listeners;n?(n=Array.isArray(n)?n:[n]).push(e):n=e,t._listeners=n}function K(t,e,n){t._isException=n||!1,t._errorId=e}function R(t,e,n,r){t._value=e,T(t,e,n,r),t._setState(b)}function q(t,e){var n;n=e&&"object"==typeof e&&"function"==typeof e.then?p:v,t._value=e,t._setState(n)}function F(t,e,n,r){var i=new V(t);return U(t,{promise:i,c:e,e:n,p:r,asyncOpID:o._traceAsyncOperationStarting("WinJS.Promise.then")}),i}var j,V=n.Class.derive(N,function(t){l&&(!0===l||l&c.thenPromise)&&(this._stack=H._getStack()),this._creator=t,this._setState(h),this._run()},{_creator:null,_cancelAction:function(){this._creator&&this._creator.cancel()},_cleanupAction:function(){this._creator=null}},{supportedForProcessing:!1}),W=n.Class.define(function(t){l&&(!0===l||l&c.errorPromise)&&(this._stack=H._getStack()),this._value=t,T(this,t,A)},{cancel:function(){},done:function(t,e){var n=this._value;if(e)try{e.handlesOnError||T(null,n,w,this,e);var r=e(n);return void(r&&"object"==typeof r&&"function"==typeof r.done&&r.done())}catch(t){n=t}n instanceof Error&&n.message===a||H._doneHandler(n)},then:function(t,e){if(!e)return this;var n,r=this._value;try{e.handlesOnError||T(null,r,w,this,e),n=new B(e(r))}catch(t){n=t===r?this:new Y(t)}return n}},{supportedForProcessing:!1}),Y=n.Class.derive(W,function(t){l&&(!0===l||l&c.exceptionPromise)&&(this._stack=H._getStack()),this._value=t,T(this,t,x)},{},{supportedForProcessing:!1}),B=n.Class.define(function(t){if(l&&(!0===l||l&c.completePromise)&&(this._stack=H._getStack()),t&&"object"==typeof t&&"function"==typeof t.then){var e=new V(null);return e._setCompleteValue(t),e}this._value=t},{cancel:function(){},done:function(t){if(t)try{var e=t(this._value);e&&"object"==typeof e&&"function"==typeof e.done&&e.done()}catch(t){H._doneHandler(t)}},then:function(t){try{var e=t?t(this._value):this._value;return e===this._value?this:new B(e)}catch(t){return new Y(t)}}},{supportedForProcessing:!1});var H=n.Class.derive(N,function(t,e){l&&(!0===l||l&c.promise)&&(this._stack=H._getStack()),this._oncancel=e,this._setState(h),this._run();try{t(this._completed.bind(this),this._error.bind(this),this._progress.bind(this))}catch(t){this._setExceptionValue(t)}},{_oncancel:null,_cancelAction:function(){try{if(!this._oncancel)throw new Error("Promise did not implement oncancel");this._oncancel()}catch(t){t.message,t.stack;s.dispatchEvent("error",t)}},_cleanupAction:function(){this._oncancel=null}},{addEventListener:function(t,e,n){s.addEventListener(t,e,n)},any:function(t){return new H(function(e,n){var r=Object.keys(t);0===r.length&&e();var i=0;r.forEach(function(o){H.as(t[o]).then(function(){e({key:o,value:t[o]})},function(s){s instanceof Error&&s.name===a?++i===r.length&&e(H.cancel):n({key:o,value:t[o]})})})},function(){Object.keys(t).forEach(function(e){var n=H.as(t[e]);"function"==typeof n.cancel&&n.cancel()})})},as:function(t){return t&&"object"==typeof t&&"function"==typeof t.then?t:new B(t)},cancel:{get:function(){return j=j||new W(new r(a))}},dispatchEvent:function(t,e){return s.dispatchEvent(t,e)},is:function(t){return t&&"object"==typeof t&&"function"==typeof t.then},join:function(t){return new H(function(e,n,r){var i=Object.keys(t),o=Array.isArray(t)?[]:{},s=Array.isArray(t)?[]:{},u=0,l=i.length,c=function(t){if(0==--l){var u=Object.keys(o).length;if(0===u)e(s);else{var c=0;i.forEach(function(t){var e=o[t];e instanceof Error&&e.name===a&&c++}),c===u?e(H.cancel):n(o)}}else r({Key:t,Done:!0})};i.forEach(function(e){var n=t[e];void 0===n?u++:H.then(n,function(t){s[e]=t,c(e)},function(t){o[e]=t,c(e)})}),0!==(l-=u)||e(s)},function(){Object.keys(t).forEach(function(e){var n=H.as(t[e]);"function"==typeof n.cancel&&n.cancel()})})},removeEventListener:function(t,e,n){s.removeEventListener(t,e,n)},supportedForProcessing:!1,then:function(t,e,n,r){return H.as(t).then(e,n,r)},thenEach:function(t,e,n,r){var i=Array.isArray(t)?[]:{};return Object.keys(t).forEach(function(o){i[o]=H.as(t[o]).then(e,n,r)}),H.join(i)},timeout:function(n,r){var i,o,s=(i=n,new H(function(n){i?o=t.setTimeout(n,i):e._setImmediate(n)},function(){o&&t.clearTimeout(o)}));return r?function(t,e){var n=function(){t.cancel()};return t.then(function(){e.cancel()}),e.then(n,n),e}(s,r):s},wrap:function(t){return new B(t)},wrapError:function(t){return new W(t)},_veryExpensiveTagWithStack:{get:function(){return l},set:function(t){l=t}},_veryExpensiveTagWithStack_tag:c,_getStack:function(){if(t.Debug&&t.Debug.debuggerEnabled)try{throw new Error}catch(t){return t.stack}},_cancelBlocker:function(t,e){if(!H.is(t))return H.wrap(t);var n,r,i=new H(function(t,e){n=t,r=e},function(){n=null,r=null,e&&e()});return t.then(function(t){n&&n(t)},function(t){r&&r(t)}),i}});return Object.defineProperties(H,i.createEventProperties(u)),H._doneHandler=function(t){e._setImmediate(function(){throw t})},{PromiseStateMachine:N,Promise:H,state_created:h}}),n("WinJS/Promise",["WinJS/Core/_Base","WinJS/Promise/_StateMachine"],function(t,e){return t.Namespace.define("WinJS",{Promise:e.Promise}),e.Promise}),(i=e["WinJS/Core/_WinJS"]).TPromise=i.Promise,i.PPromise=i.Promise}();var o=i.Promise,s=i.TPromise;i.PPromise}).call(this,n(2),n(3))},function(t,e,n){"use strict";(function(t,r){n.d(e,"c",function(){return d}),n.d(e,"b",function(){return m}),n.d(e,"a",function(){return _});var i,o=!1,s=!1,u=!1,a=!1,l=!1;if("object"==typeof t&&"function"==typeof t.nextTick&&"string"==typeof t.platform){o="win32"===t.platform,s="darwin"===t.platform,u="linux"===t.platform;var c=t.env.VSCODE_NLS_CONFIG;if(c)try{var h=JSON.parse(c),f=h.availableLanguages["*"];h.locale,f||"en",h._translationsConfigFile}catch(t){}a=!0}else if("object"==typeof navigator){var p=navigator.userAgent;o=p.indexOf("Windows")>=0,s=p.indexOf("Macintosh")>=0,u=p.indexOf("Linux")>=0,l=!0,navigator.language}!function(t){t[t.Web=0]="Web",t[t.Mac=1]="Mac",t[t.Linux=2]="Linux",t[t.Windows=3]="Windows"}(i||(i={}));i.Web;a&&(s?i.Mac:o?i.Windows:u&&i.Linux);var d=o,m=l;var _="object"==typeof self?self:"object"==typeof r?r:{}}).call(this,n(3),n(2))},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var a,l=[],c=!1,h=-1;function f(){c&&a&&(c=!1,a.length?l=a.concat(l):h=-1,l.length&&p())}function p(){if(!c){var t=u(f);c=!0;for(var e=l.length;e;){for(a=l,l=[];++h<e;)a&&a[h].run();h=-1,e=l.length}a=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new d(t,e)),1!==l.length||c||u(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";n.r(e);var r,i=n(1),o=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function s(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}function u(t){return encodeURIComponent(t).replace(/[!'()*]/g,s)}function a(t){return t.replace(/[#?]/,s)}var l=/^\w[\w\d+.-]*$/,c=/^\//,h=/^\/\//;var f="",p="/",d=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/,m=/^\/[a-zA-Z]:/,_=/^(\/)?([A-Z]:)/,g=/^[a-zA-Z]:/,v=function(){function t(t,e,n,r,i){"object"==typeof t?(this.scheme=t.scheme||f,this.authority=t.authority||f,this.path=t.path||f,this.query=t.query||f,this.fragment=t.fragment||f):(this.scheme=t||f,this.authority=e||f,this.path=n||f,this.query=r||f,this.fragment=i||f,function(t){if(t.scheme&&!l.test(t.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(t.path)if(t.authority){if(!c.test(t.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(h.test(t.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}(this))}return t.isUri=function(e){return e instanceof t||!!e&&("string"==typeof e.authority&&"string"==typeof e.fragment&&"string"==typeof e.path&&"string"==typeof e.query&&"string"==typeof e.scheme)},Object.defineProperty(t.prototype,"fsPath",{get:function(){return C(this)},enumerable:!0,configurable:!0}),t.prototype.with=function(t){if(!t)return this;var e=t.scheme,n=t.authority,r=t.path,i=t.query,o=t.fragment;return void 0===e?e=this.scheme:null===e&&(e=f),void 0===n?n=this.authority:null===n&&(n=f),void 0===r?r=this.path:null===r&&(r=f),void 0===i?i=this.query:null===i&&(i=f),void 0===o?o=this.fragment:null===o&&(o=f),e===this.scheme&&n===this.authority&&r===this.path&&i===this.query&&o===this.fragment?this:new b(e,n,r,i,o)},t.parse=function(t){var e=d.exec(t);return e?new b(e[2]||f,decodeURIComponent(e[4]||f),decodeURIComponent(e[5]||f),decodeURIComponent(e[7]||f),decodeURIComponent(e[9]||f)):new b(f,f,f,f,f)},t.file=function(t){var e=f;if(i.c&&(t=t.replace(/\\/g,p)),t[0]===p&&t[1]===p){var n=t.indexOf(p,2);-1===n?(e=t.substring(2),t=p):(e=t.substring(2,n),t=t.substring(n)||p)}return g.test(t)?t=p+t:t[0]!==p&&(t=p+t),new b("file",e,t,f,f)},t.from=function(t){return new b(t.scheme,t.authority,t.path,t.query,t.fragment)},t.prototype.toString=function(t){return void 0===t&&(t=!1),S(this,t)},t.prototype.toJSON=function(){var t={$mid:1,fsPath:this.fsPath,external:this.toString()};return this.path&&(t.path=this.path),this.scheme&&(t.scheme=this.scheme),this.authority&&(t.authority=this.authority),this.query&&(t.query=this.query),this.fragment&&(t.fragment=this.fragment),t},t.revive=function(e){if(e){if(e instanceof t)return e;var n=new b(e);return n._fsPath=e.fsPath,n._formatted=e.external,n}return e},t}(),y=v,b=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._formatted=null,e._fsPath=null,e}return o(e,t),Object.defineProperty(e.prototype,"fsPath",{get:function(){return this._fsPath||(this._fsPath=C(this)),this._fsPath},enumerable:!0,configurable:!0}),e.prototype.toString=function(t){return void 0===t&&(t=!1),t?S(this,!0):(this._formatted||(this._formatted=S(this,!1)),this._formatted)},e}(v);function C(t){var e;return e=t.authority&&t.path&&"file"===t.scheme?"//"+t.authority+t.path:m.test(t.path)?t.path[1].toLowerCase()+t.path.substr(2):t.path,i.c&&(e=e.replace(/\//g,"\\")),e}function S(t,e){var n=e?a:u,r=[],i=t.scheme,o=t.authority,s=t.path,l=t.query,c=t.fragment;if(i&&r.push(i,":"),(o||"file"===i)&&r.push("//"),o){if(-1!==(g=o.indexOf("@"))){var h=o.substr(0,g);o=o.substr(g+1),-1===(g=h.indexOf(":"))?r.push(n(h)):r.push(n(h.substr(0,g)),":",n(h.substr(g+1))),r.push("@")}-1===(g=(o=o.toLowerCase()).indexOf(":"))?r.push(n(o)):r.push(n(o.substr(0,g)),o.substr(g))}if(s){var d=_.exec(s);d&&(s=d[1]?"/"+d[2].toLowerCase()+s.substr(3):d[2].toLowerCase()+s.substr(2));for(var m=0;;){var g;if(-1===(g=s.indexOf(p,m))){r.push(n(s.substring(m)));break}r.push(n(s.substring(m,g)),p),m=g+1}}return l&&r.push("?",n(l)),c&&r.push("#",n(c)),r.join(f)}var N=n(0),L=function(){function t(t,e){this.lineNumber=t,this.column=e}return t.prototype.equals=function(e){return t.equals(this,e)},t.equals=function(t,e){return!t&&!e||!!t&&!!e&&t.lineNumber===e.lineNumber&&t.column===e.column},t.prototype.isBefore=function(e){return t.isBefore(this,e)},t.isBefore=function(t,e){return t.lineNumber<e.lineNumber||!(e.lineNumber<t.lineNumber)&&t.column<e.column},t.prototype.isBeforeOrEqual=function(e){return t.isBeforeOrEqual(this,e)},t.isBeforeOrEqual=function(t,e){return t.lineNumber<e.lineNumber||!(e.lineNumber<t.lineNumber)&&t.column<=e.column},t.compare=function(t,e){var n=0|t.lineNumber,r=0|e.lineNumber;return n===r?(0|t.column)-(0|e.column):n-r},t.prototype.clone=function(){return new t(this.lineNumber,this.column)},t.prototype.toString=function(){return"("+this.lineNumber+","+this.column+")"},t.lift=function(e){return new t(e.lineNumber,e.column)},t.isIPosition=function(t){return t&&"number"==typeof t.lineNumber&&"number"==typeof t.column},t}(),E=function(){function t(t,e,n,r){t>n||t===n&&e>r?(this.startLineNumber=n,this.startColumn=r,this.endLineNumber=t,this.endColumn=e):(this.startLineNumber=t,this.startColumn=e,this.endLineNumber=n,this.endColumn=r)}return t.prototype.isEmpty=function(){return t.isEmpty(this)},t.isEmpty=function(t){return t.startLineNumber===t.endLineNumber&&t.startColumn===t.endColumn},t.prototype.containsPosition=function(e){return t.containsPosition(this,e)},t.containsPosition=function(t,e){return!(e.lineNumber<t.startLineNumber||e.lineNumber>t.endLineNumber)&&(!(e.lineNumber===t.startLineNumber&&e.column<t.startColumn)&&!(e.lineNumber===t.endLineNumber&&e.column>t.endColumn))},t.prototype.containsRange=function(e){return t.containsRange(this,e)},t.containsRange=function(t,e){return!(e.startLineNumber<t.startLineNumber||e.endLineNumber<t.startLineNumber)&&(!(e.startLineNumber>t.endLineNumber||e.endLineNumber>t.endLineNumber)&&(!(e.startLineNumber===t.startLineNumber&&e.startColumn<t.startColumn)&&!(e.endLineNumber===t.endLineNumber&&e.endColumn>t.endColumn)))},t.prototype.plusRange=function(e){return t.plusRange(this,e)},t.plusRange=function(e,n){var r,i,o,s;return n.startLineNumber<e.startLineNumber?(r=n.startLineNumber,i=n.startColumn):n.startLineNumber===e.startLineNumber?(r=n.startLineNumber,i=Math.min(n.startColumn,e.startColumn)):(r=e.startLineNumber,i=e.startColumn),n.endLineNumber>e.endLineNumber?(o=n.endLineNumber,s=n.endColumn):n.endLineNumber===e.endLineNumber?(o=n.endLineNumber,s=Math.max(n.endColumn,e.endColumn)):(o=e.endLineNumber,s=e.endColumn),new t(r,i,o,s)},t.prototype.intersectRanges=function(e){return t.intersectRanges(this,e)},t.intersectRanges=function(e,n){var r=e.startLineNumber,i=e.startColumn,o=e.endLineNumber,s=e.endColumn,u=n.startLineNumber,a=n.startColumn,l=n.endLineNumber,c=n.endColumn;return r<u?(r=u,i=a):r===u&&(i=Math.max(i,a)),o>l?(o=l,s=c):o===l&&(s=Math.min(s,c)),r>o?null:r===o&&i>s?null:new t(r,i,o,s)},t.prototype.equalsRange=function(e){return t.equalsRange(this,e)},t.equalsRange=function(t,e){return!!t&&!!e&&t.startLineNumber===e.startLineNumber&&t.startColumn===e.startColumn&&t.endLineNumber===e.endLineNumber&&t.endColumn===e.endColumn},t.prototype.getEndPosition=function(){return new L(this.endLineNumber,this.endColumn)},t.prototype.getStartPosition=function(){return new L(this.startLineNumber,this.startColumn)},t.prototype.toString=function(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"},t.prototype.setEndPosition=function(e,n){return new t(this.startLineNumber,this.startColumn,e,n)},t.prototype.setStartPosition=function(e,n){return new t(e,n,this.endLineNumber,this.endColumn)},t.prototype.collapseToStart=function(){return t.collapseToStart(this)},t.collapseToStart=function(e){return new t(e.startLineNumber,e.startColumn,e.startLineNumber,e.startColumn)},t.fromPositions=function(e,n){return void 0===n&&(n=e),new t(e.lineNumber,e.column,n.lineNumber,n.column)},t.lift=function(e){return e?new t(e.startLineNumber,e.startColumn,e.endLineNumber,e.endColumn):null},t.isIRange=function(t){return t&&"number"==typeof t.startLineNumber&&"number"==typeof t.startColumn&&"number"==typeof t.endLineNumber&&"number"==typeof t.endColumn},t.areIntersectingOrTouching=function(t,e){return!(t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<e.startColumn)&&!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<t.startColumn)},t.compareRangesUsingStarts=function(t,e){var n=0|t.startLineNumber,r=0|e.startLineNumber;if(n===r){var i=0|t.startColumn,o=0|e.startColumn;if(i===o){var s=0|t.endLineNumber,u=0|e.endLineNumber;return s===u?(0|t.endColumn)-(0|e.endColumn):s-u}return i-o}return n-r},t.compareRangesUsingEnds=function(t,e){return t.endLineNumber===e.endLineNumber?t.endColumn===e.endColumn?t.startLineNumber===e.startLineNumber?t.startColumn-e.startColumn:t.startLineNumber-e.startLineNumber:t.endColumn-e.endColumn:t.endLineNumber-e.endLineNumber},t.spansMultipleLines=function(t){return t.endLineNumber>t.startLineNumber},t}(),w=function(){function t(t,e,n,r){this.originalStart=t,this.originalLength=e,this.modifiedStart=n,this.modifiedLength=r}return t.prototype.getOriginalEnd=function(){return this.originalStart+this.originalLength},t.prototype.getModifiedEnd=function(){return this.modifiedStart+this.modifiedLength},t}();function P(t){return{getLength:function(){return t.length},getElementHash:function(e){return t[e]}}}function A(t,e,n){return new I(P(t),P(e)).ComputeDiff(n)}var x=function(){function t(){}return t.Assert=function(t,e){if(!t)throw new Error(e)},t}(),M=function(){function t(){}return t.Copy=function(t,e,n,r,i){for(var o=0;o<i;o++)n[r+o]=t[e+o]},t}(),k=function(){function t(){this.m_changes=[],this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE,this.m_originalCount=0,this.m_modifiedCount=0}return t.prototype.MarkNextChange=function(){(this.m_originalCount>0||this.m_modifiedCount>0)&&this.m_changes.push(new w(this.m_originalStart,this.m_originalCount,this.m_modifiedStart,this.m_modifiedCount)),this.m_originalCount=0,this.m_modifiedCount=0,this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE},t.prototype.AddOriginalElement=function(t,e){this.m_originalStart=Math.min(this.m_originalStart,t),this.m_modifiedStart=Math.min(this.m_modifiedStart,e),this.m_originalCount++},t.prototype.AddModifiedElement=function(t,e){this.m_originalStart=Math.min(this.m_originalStart,t),this.m_modifiedStart=Math.min(this.m_modifiedStart,e),this.m_modifiedCount++},t.prototype.getChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes},t.prototype.getReverseChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes.reverse(),this.m_changes},t}(),O=Object.prototype.hasOwnProperty,I=function(){function t(t,e,n){void 0===n&&(n=null),this.OriginalSequence=t,this.ModifiedSequence=e,this.ContinueProcessingPredicate=n,this.m_originalIds=[],this.m_modifiedIds=[],this.m_forwardHistory=[],this.m_reverseHistory=[],this.ComputeUniqueIdentifiers()}return t.prototype.ComputeUniqueIdentifiers=function(){var t=this.OriginalSequence.getLength(),e=this.ModifiedSequence.getLength();this.m_originalIds=new Array(t),this.m_modifiedIds=new Array(e);var n,r={},i=1;for(n=0;n<t;n++){var o=this.OriginalSequence.getElementHash(n);O.call(r,o)?this.m_originalIds[n]=r[o]:(this.m_originalIds[n]=i++,r[o]=this.m_originalIds[n])}for(n=0;n<e;n++){var s=this.ModifiedSequence.getElementHash(n);O.call(r,s)?this.m_modifiedIds[n]=r[s]:(this.m_modifiedIds[n]=i++,r[s]=this.m_modifiedIds[n])}},t.prototype.ElementsAreEqual=function(t,e){return this.m_originalIds[t]===this.m_modifiedIds[e]},t.prototype.OriginalElementsAreEqual=function(t,e){return this.m_originalIds[t]===this.m_originalIds[e]},t.prototype.ModifiedElementsAreEqual=function(t,e){return this.m_modifiedIds[t]===this.m_modifiedIds[e]},t.prototype.ComputeDiff=function(t){return this._ComputeDiff(0,this.OriginalSequence.getLength()-1,0,this.ModifiedSequence.getLength()-1,t)},t.prototype._ComputeDiff=function(t,e,n,r,i){var o=this.ComputeDiffRecursive(t,e,n,r,[!1]);return i?this.ShiftChanges(o):o},t.prototype.ComputeDiffRecursive=function(t,e,n,r,i){for(i[0]=!1;t<=e&&n<=r&&this.ElementsAreEqual(t,n);)t++,n++;for(;e>=t&&r>=n&&this.ElementsAreEqual(e,r);)e--,r--;if(t>e||n>r){var o=void 0;return n<=r?(x.Assert(t===e+1,"originalStart should only be one more than originalEnd"),o=[new w(t,0,n,r-n+1)]):t<=e?(x.Assert(n===r+1,"modifiedStart should only be one more than modifiedEnd"),o=[new w(t,e-t+1,n,0)]):(x.Assert(t===e+1,"originalStart should only be one more than originalEnd"),x.Assert(n===r+1,"modifiedStart should only be one more than modifiedEnd"),o=[]),o}var s=[0],u=[0],a=this.ComputeRecursionPoint(t,e,n,r,s,u,i),l=s[0],c=u[0];if(null!==a)return a;if(!i[0]){var h=this.ComputeDiffRecursive(t,l,n,c,i),f=[];return f=i[0]?[new w(l+1,e-(l+1)+1,c+1,r-(c+1)+1)]:this.ComputeDiffRecursive(l+1,e,c+1,r,i),this.ConcatenateChanges(h,f)}return[new w(t,e-t+1,n,r-n+1)]},t.prototype.WALKTRACE=function(t,e,n,r,i,o,s,u,a,l,c,h,f,p,d,m,_,g){var v,y,b=null,C=new k,S=e,N=n,L=f[0]-m[0]-r,E=Number.MIN_VALUE,P=this.m_forwardHistory.length-1;do{(y=L+t)===S||y<N&&a[y-1]<a[y+1]?(p=(c=a[y+1])-L-r,c<E&&C.MarkNextChange(),E=c,C.AddModifiedElement(c+1,p),L=y+1-t):(p=(c=a[y-1]+1)-L-r,c<E&&C.MarkNextChange(),E=c-1,C.AddOriginalElement(c,p+1),L=y-1-t),P>=0&&(t=(a=this.m_forwardHistory[P])[0],S=1,N=a.length-1)}while(--P>=-1);if(v=C.getReverseChanges(),g[0]){var A=f[0]+1,x=m[0]+1;if(null!==v&&v.length>0){var M=v[v.length-1];A=Math.max(A,M.getOriginalEnd()),x=Math.max(x,M.getModifiedEnd())}b=[new w(A,h-A+1,x,d-x+1)]}else{C=new k,S=o,N=s,L=f[0]-m[0]-u,E=Number.MAX_VALUE,P=_?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{(y=L+i)===S||y<N&&l[y-1]>=l[y+1]?(p=(c=l[y+1]-1)-L-u,c>E&&C.MarkNextChange(),E=c+1,C.AddOriginalElement(c+1,p+1),L=y+1-i):(p=(c=l[y-1])-L-u,c>E&&C.MarkNextChange(),E=c,C.AddModifiedElement(c+1,p+1),L=y-1-i),P>=0&&(i=(l=this.m_reverseHistory[P])[0],S=1,N=l.length-1)}while(--P>=-1);b=C.getChanges()}return this.ConcatenateChanges(v,b)},t.prototype.ComputeRecursionPoint=function(t,e,n,r,i,o,s){var u,a,l,c=0,h=0,f=0,p=0;t--,n--,i[0]=0,o[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];var d,m,_=e-t+(r-n),g=_+1,v=new Array(g),y=new Array(g),b=r-n,C=e-t,S=t-n,N=e-r,L=(C-b)%2==0;for(v[b]=t,y[C]=e,s[0]=!1,l=1;l<=_/2+1;l++){var E=0,P=0;for(c=this.ClipDiagonalBound(b-l,l,b,g),h=this.ClipDiagonalBound(b+l,l,b,g),d=c;d<=h;d+=2){for(a=(u=d===c||d<h&&v[d-1]<v[d+1]?v[d+1]:v[d-1]+1)-(d-b)-S,m=u;u<e&&a<r&&this.ElementsAreEqual(u+1,a+1);)u++,a++;if(v[d]=u,u+a>E+P&&(E=u,P=a),!L&&Math.abs(d-C)<=l-1&&u>=y[d])return i[0]=u,o[0]=a,m<=y[d]&&l<=1448?this.WALKTRACE(b,c,h,S,C,f,p,N,v,y,u,e,i,a,r,o,L,s):null}var A=(E-t+(P-n)-l)/2;if(null!==this.ContinueProcessingPredicate&&!this.ContinueProcessingPredicate(E,this.OriginalSequence,A))return s[0]=!0,i[0]=E,o[0]=P,A>0&&l<=1448?this.WALKTRACE(b,c,h,S,C,f,p,N,v,y,u,e,i,a,r,o,L,s):[new w(++t,e-t+1,++n,r-n+1)];for(f=this.ClipDiagonalBound(C-l,l,C,g),p=this.ClipDiagonalBound(C+l,l,C,g),d=f;d<=p;d+=2){for(a=(u=d===f||d<p&&y[d-1]>=y[d+1]?y[d+1]-1:y[d-1])-(d-C)-N,m=u;u>t&&a>n&&this.ElementsAreEqual(u,a);)u--,a--;if(y[d]=u,L&&Math.abs(d-b)<=l&&u<=v[d])return i[0]=u,o[0]=a,m>=v[d]&&l<=1448?this.WALKTRACE(b,c,h,S,C,f,p,N,v,y,u,e,i,a,r,o,L,s):null}if(l<=1447){var x=new Array(h-c+2);x[0]=b-c+1,M.Copy(v,c,x,1,h-c+1),this.m_forwardHistory.push(x),(x=new Array(p-f+2))[0]=C-f+1,M.Copy(y,f,x,1,p-f+1),this.m_reverseHistory.push(x)}}return this.WALKTRACE(b,c,h,S,C,f,p,N,v,y,u,e,i,a,r,o,L,s)},t.prototype.ShiftChanges=function(t){var e;do{e=!1;for(var n=0;n<t.length;n++)for(var r=t[n],i=n<t.length-1?t[n+1].originalStart:this.OriginalSequence.getLength(),o=n<t.length-1?t[n+1].modifiedStart:this.ModifiedSequence.getLength(),s=r.originalLength>0,u=r.modifiedLength>0;r.originalStart+r.originalLength<i&&r.modifiedStart+r.modifiedLength<o&&(!s||this.OriginalElementsAreEqual(r.originalStart,r.originalStart+r.originalLength))&&(!u||this.ModifiedElementsAreEqual(r.modifiedStart,r.modifiedStart+r.modifiedLength));)r.originalStart++,r.modifiedStart++;var a=new Array,l=[null];for(n=0;n<t.length;n++)n<t.length-1&&this.ChangesOverlap(t[n],t[n+1],l)?(e=!0,a.push(l[0]),n++):a.push(t[n]);t=a}while(e);for(n=t.length-1;n>=0;n--){r=t[n],i=0,o=0;if(n>0){var c=t[n-1];c.originalLength>0&&(i=c.originalStart+c.originalLength),c.modifiedLength>0&&(o=c.modifiedStart+c.modifiedLength)}s=r.originalLength>0,u=r.modifiedLength>0;for(var h=0,f=this._boundaryScore(r.originalStart,r.originalLength,r.modifiedStart,r.modifiedLength),p=1;;p++){var d=r.originalStart-p,m=r.modifiedStart-p;if(d<i||m<o)break;if(s&&!this.OriginalElementsAreEqual(d,d+r.originalLength))break;if(u&&!this.ModifiedElementsAreEqual(m,m+r.modifiedLength))break;var _=this._boundaryScore(d,r.originalLength,m,r.modifiedLength);_>f&&(f=_,h=p)}r.originalStart-=h,r.modifiedStart-=h}return t},t.prototype._OriginalIsBoundary=function(t){return t<=0||t>=this.OriginalSequence.getLength()-1||/^\s*$/.test(this.OriginalSequence.getElementHash(t))},t.prototype._OriginalRegionIsBoundary=function(t,e){if(this._OriginalIsBoundary(t)||this._OriginalIsBoundary(t-1))return!0;if(e>0){var n=t+e;if(this._OriginalIsBoundary(n-1)||this._OriginalIsBoundary(n))return!0}return!1},t.prototype._ModifiedIsBoundary=function(t){return t<=0||t>=this.ModifiedSequence.getLength()-1||/^\s*$/.test(this.ModifiedSequence.getElementHash(t))},t.prototype._ModifiedRegionIsBoundary=function(t,e){if(this._ModifiedIsBoundary(t)||this._ModifiedIsBoundary(t-1))return!0;if(e>0){var n=t+e;if(this._ModifiedIsBoundary(n-1)||this._ModifiedIsBoundary(n))return!0}return!1},t.prototype._boundaryScore=function(t,e,n,r){return(this._OriginalRegionIsBoundary(t,e)?1:0)+(this._ModifiedRegionIsBoundary(n,r)?1:0)},t.prototype.ConcatenateChanges=function(t,e){var n=[],r=null;return 0===t.length||0===e.length?e.length>0?e:t:this.ChangesOverlap(t[t.length-1],e[0],n)?(r=new Array(t.length+e.length-1),M.Copy(t,0,r,0,t.length-1),r[t.length-1]=n[0],M.Copy(e,1,r,t.length,e.length-1),r):(r=new Array(t.length+e.length),M.Copy(t,0,r,0,t.length),M.Copy(e,0,r,t.length,e.length),r)},t.prototype.ChangesOverlap=function(t,e,n){if(x.Assert(t.originalStart<=e.originalStart,"Left change is not less than or equal to right change"),x.Assert(t.modifiedStart<=e.modifiedStart,"Left change is not less than or equal to right change"),t.originalStart+t.originalLength>=e.originalStart||t.modifiedStart+t.modifiedLength>=e.modifiedStart){var r=t.originalStart,i=t.originalLength,o=t.modifiedStart,s=t.modifiedLength;return t.originalStart+t.originalLength>=e.originalStart&&(i=e.originalStart+e.originalLength-t.originalStart),t.modifiedStart+t.modifiedLength>=e.modifiedStart&&(s=e.modifiedStart+e.modifiedLength-t.modifiedStart),n[0]=new w(r,i,o,s),!0}return n[0]=null,!1},t.prototype.ClipDiagonalBound=function(t,e,n,r){if(t>=0&&t<r)return t;var i=e%2==0;return t<0?i===(n%2==0)?0:1:i===((r-n-1)%2==0)?r-1:r-2},t}(),T=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();var D,U=function(){function t(){this._value="",this._pos=0}return t.prototype.reset=function(t){return this._value=t,this._pos=0,this},t.prototype.next=function(){return this._pos+=1,this},t.prototype.join=function(t){return t.join("")},t.prototype.hasNext=function(){return this._pos<this._value.length-1},t.prototype.cmp=function(t){return t.charCodeAt(0)-this._value.charCodeAt(this._pos)},t.prototype.value=function(){return this._value[this._pos]},t}(),K=function(){function t(){}return t.prototype.reset=function(t){return this._value=t.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()},t.prototype.hasNext=function(){return this._to<this._value.length},t.prototype.join=function(t){return t.join("/")},t.prototype.next=function(){this._from=this._to;for(var e=!0;this._to<this._value.length;this._to++){var n=this._value.charCodeAt(this._to);if(n===t._fwd||n===t._bwd){if(!e)break;this._from++}else e=!1}return this},t.prototype.cmp=function(t){for(var e=0,n=t.length,r=this._from;e<n&&r<this._to;){var i=t.charCodeAt(e)-this._value.charCodeAt(r);if(0!==i)return i;e+=1,r+=1}return n===this._to-this._from?0:e<n?-1:1},t.prototype.value=function(){return this._value.substring(this._from,this._to)},t._fwd="/".charCodeAt(0),t._bwd="\\".charCodeAt(0),t}(),R=function(){function t(){}return t.prototype.isEmpty=function(){return!(this.left||this.mid||this.right||this.element)},t}();(function(){function t(t){this._iter=t}t.forPaths=function(){return new t(new K)},t.forStrings=function(){return new t(new U)},t.prototype.clear=function(){this._root=void 0},t.prototype.set=function(t,e){var n,r=this._iter.reset(t);for(this._root||(this._root=new R,this._root.str=r.value()),n=this._root;;){var i=r.cmp(n.str);if(i>0)n.left||(n.left=new R,n.left.str=r.value()),n=n.left;else if(i<0)n.right||(n.right=new R,n.right.str=r.value()),n=n.right;else{if(!r.hasNext())break;r.next(),n.mid||(n.mid=new R,n.mid.str=r.value()),n=n.mid}}var o=n.element;return n.element=e,o},t.prototype.get=function(t){for(var e=this._iter.reset(t),n=this._root;n;){var r=e.cmp(n.str);if(r>0)n=n.left;else if(r<0)n=n.right;else{if(!e.hasNext())break;e.next(),n=n.mid}}return n?n.element:void 0},t.prototype.delete=function(t){for(var e=this._iter.reset(t),n=[],r=this._root;r;){var i=e.cmp(r.str);if(i>0)n.push([1,r]),r=r.left;else if(i<0)n.push([-1,r]),r=r.right;else{if(!e.hasNext()){for(r.element=void 0;n.length>0&&r.isEmpty();){var o=n.pop(),s=o[0],u=o[1];switch(s){case 1:u.left=void 0;break;case 0:u.mid=void 0;break;case-1:u.right=void 0}r=u}break}e.next(),n.push([0,r]),r=r.mid}}},t.prototype.findSubstr=function(t){for(var e,n=this._iter.reset(t),r=this._root;r;){var i=n.cmp(r.str);if(i>0)r=r.left;else if(i<0)r=r.right;else{if(!n.hasNext())break;n.next(),e=r.element||e,r=r.mid}}return r&&r.element||e},t.prototype.findSuperstr=function(e){for(var n=this._iter.reset(e),r=this._root;r;){var i=n.cmp(r.str);if(i>0)r=r.left;else if(i<0)r=r.right;else{if(!n.hasNext()){if(!r.mid)return;var o=new t(this._iter);return o._root=r.mid,o}n.next(),r=r.mid}}},t.prototype.forEach=function(t){this._forEach(this._root,[],t)},t.prototype._forEach=function(t,e,n){t&&(this._forEach(t.left,e,n),e.push(t.str),t.element&&n(t.element,this._iter.join(e)),this._forEach(t.mid,e,n),e.pop(),this._forEach(t.right,e,n))}})(),function(){function t(){this.map=new Map,this.ignoreCase=!1}t.prototype.set=function(t,e){this.map.set(this.toKey(t),e)},t.prototype.get=function(t){return this.map.get(this.toKey(t))},t.prototype.has=function(t){return this.map.has(this.toKey(t))},Object.defineProperty(t.prototype,"size",{get:function(){return this.map.size},enumerable:!0,configurable:!0}),t.prototype.clear=function(){this.map.clear()},t.prototype.delete=function(t){return this.map.delete(this.toKey(t))},t.prototype.forEach=function(t){this.map.forEach(t)},t.prototype.values=function(){return t=this.map,e=[],t.forEach(function(t){return e.push(t)}),e;var t,e},t.prototype.toKey=function(t){var e=t.toString();return this.ignoreCase&&(e=e.toLowerCase()),e},t.prototype.keys=function(){return(t=this.map,e=[],t.forEach(function(t,n){return e.push(n)}),e).map(y.parse);var t,e}}();!function(t){t[t.None=0]="None",t[t.AsOld=1]="AsOld",t[t.AsNew=2]="AsNew"}(D||(D={}));var q=function(t){function e(e,n){void 0===n&&(n=1);var r=t.call(this)||this;return r._limit=e,r._ratio=Math.min(Math.max(0,n),1),r}return T(e,t),Object.defineProperty(e.prototype,"limit",{get:function(){return this._limit},set:function(t){this._limit=t,this.checkTrim()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ratio",{get:function(){return this._ratio},set:function(t){this._ratio=Math.min(Math.max(0,t),1),this.checkTrim()},enumerable:!0,configurable:!0}),e.prototype.get=function(e){return t.prototype.get.call(this,e,D.AsNew)},e.prototype.peek=function(e){return t.prototype.get.call(this,e,D.None)},e.prototype.set=function(e,n){t.prototype.set.call(this,e,n,D.AsNew),this.checkTrim()},e.prototype.checkTrim=function(){this.size>this._limit&&this.trimOld(Math.round(this._limit*this._ratio))},e}(function(){function t(){this._map=new Map,this._head=void 0,this._tail=void 0,this._size=0}return t.prototype.clear=function(){this._map.clear(),this._head=void 0,this._tail=void 0,this._size=0},t.prototype.isEmpty=function(){return!this._head&&!this._tail},Object.defineProperty(t.prototype,"size",{get:function(){return this._size},enumerable:!0,configurable:!0}),t.prototype.has=function(t){return this._map.has(t)},t.prototype.get=function(t,e){void 0===e&&(e=D.None);var n=this._map.get(t);if(n)return e!==D.None&&this.touch(n,e),n.value},t.prototype.set=function(t,e,n){void 0===n&&(n=D.None);var r=this._map.get(t);if(r)r.value=e,n!==D.None&&this.touch(r,n);else{switch(r={key:t,value:e,next:void 0,previous:void 0},n){case D.None:this.addItemLast(r);break;case D.AsOld:this.addItemFirst(r);break;case D.AsNew:default:this.addItemLast(r)}this._map.set(t,r),this._size++}},t.prototype.delete=function(t){return!!this.remove(t)},t.prototype.remove=function(t){var e=this._map.get(t);if(e)return this._map.delete(t),this.removeItem(e),this._size--,e.value},t.prototype.shift=function(){if(this._head||this._tail){if(!this._head||!this._tail)throw new Error("Invalid list");var t=this._head;return this._map.delete(t.key),this.removeItem(t),this._size--,t.value}},t.prototype.forEach=function(t,e){for(var n=this._head;n;)e?t.bind(e)(n.value,n.key,this):t(n.value,n.key,this),n=n.next},t.prototype.values=function(){for(var t=[],e=this._head;e;)t.push(e.value),e=e.next;return t},t.prototype.keys=function(){for(var t=[],e=this._head;e;)t.push(e.key),e=e.next;return t},t.prototype.trimOld=function(t){if(!(t>=this.size))if(0!==t){for(var e=this._head,n=this.size;e&&n>t;)this._map.delete(e.key),e=e.next,n--;this._head=e,this._size=n,e.previous=void 0}else this.clear()},t.prototype.addItemFirst=function(t){if(this._head||this._tail){if(!this._head)throw new Error("Invalid list");t.next=this._head,this._head.previous=t}else this._tail=t;this._head=t},t.prototype.addItemLast=function(t){if(this._head||this._tail){if(!this._tail)throw new Error("Invalid list");t.previous=this._tail,this._tail.next=t}else this._head=t;this._tail=t},t.prototype.removeItem=function(t){if(t===this._head&&t===this._tail)this._head=void 0,this._tail=void 0;else if(t===this._head)this._head=t.next;else if(t===this._tail)this._tail=t.previous;else{var e=t.next,n=t.previous;if(!e||!n)throw new Error("Invalid list");e.previous=n,n.next=e}},t.prototype.touch=function(t,e){if(!this._head||!this._tail)throw new Error("Invalid list");if(e===D.AsOld||e===D.AsNew)if(e===D.AsOld){if(t===this._head)return;var n=t.next,r=t.previous;t===this._tail?(r.next=void 0,this._tail=r):(n.previous=r,r.next=n),t.previous=void 0,t.next=this._head,this._head.previous=t,this._head=t}else if(e===D.AsNew){if(t===this._tail)return;n=t.next,r=t.previous;t===this._head?(n.previous=void 0,this._head=n):(n.previous=r,r.next=n),t.next=void 0,t.previous=this._tail,this._tail.next=t,this._tail=t}},t.prototype.toJSON=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),t},t.prototype.fromJSON=function(t){this.clear();for(var e=0,n=t;e<n.length;e++){var r=n[e],i=r[0],o=r[1];this.set(i,o)}},t}());new q(1e4);new q(1e4);String.fromCharCode(65279);var F=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),j=5e3,V=3;function W(t,e,n,r){return new I(t,e,n).ComputeDiff(r)}var Y=function(){function t(t,e,n){this.buffer=t,this.startMarkers=e,this.endMarkers=n}return t.prototype.getLength=function(){return this.startMarkers.length},t.prototype.getElementHash=function(t){return this.buffer.substring(this.startMarkers[t].offset,this.endMarkers[t].offset)},t.prototype.getStartLineNumber=function(t){return t===this.startMarkers.length?this.startMarkers[t-1].lineNumber+1:this.startMarkers[t].lineNumber},t.prototype.getStartColumn=function(t){return this.startMarkers[t].column},t.prototype.getEndLineNumber=function(t){return this.endMarkers[t].lineNumber},t.prototype.getEndColumn=function(t){return this.endMarkers[t].column},t}(),B=function(t){function e(n){for(var r="",i=[],o=[],s=0,u=0,a=n.length;u<a;u++){r+=n[u];var l=e._getFirstNonBlankColumn(n[u],1),c=e._getLastNonBlankColumn(n[u],1);i.push({offset:s+l-1,lineNumber:u+1,column:l}),o.push({offset:s+c-1,lineNumber:u+1,column:c}),s+=n[u].length}return t.call(this,r,i,o)||this}return F(e,t),e._getFirstNonBlankColumn=function(t,e){var n=function(t){for(var e=0,n=t.length;e<n;e++){var r=t.charCodeAt(e);if(32!==r&&9!==r)return e}return-1}(t);return-1===n?e:n+1},e._getLastNonBlankColumn=function(t,e){var n=function(t,e){void 0===e&&(e=t.length-1);for(var n=e;n>=0;n--){var r=t.charCodeAt(n);if(32!==r&&9!==r)return n}return-1}(t);return-1===n?e:n+2},e.prototype.getCharSequence=function(t,e){for(var n=[],r=[],i=t;i<=e;i++)for(var o=this.startMarkers[i],s=this.endMarkers[i],u=o.offset;u<s.offset;u++)n.push({offset:u,lineNumber:o.lineNumber,column:o.column+(u-o.offset)}),r.push({offset:u+1,lineNumber:o.lineNumber,column:o.column+(u-o.offset)+1});return new Y(this.buffer,n,r)},e}(Y),H=function(){function t(t,e,n,r,i,o,s,u){this.originalStartLineNumber=t,this.originalStartColumn=e,this.originalEndLineNumber=n,this.originalEndColumn=r,this.modifiedStartLineNumber=i,this.modifiedStartColumn=o,this.modifiedEndLineNumber=s,this.modifiedEndColumn=u}return t.createFromDiffChange=function(e,n,r){var i,o,s,u,a,l,c,h;return 0===e.originalLength?(i=0,o=0,s=0,u=0):(i=n.getStartLineNumber(e.originalStart),o=n.getStartColumn(e.originalStart),s=n.getEndLineNumber(e.originalStart+e.originalLength-1),u=n.getEndColumn(e.originalStart+e.originalLength-1)),0===e.modifiedLength?(a=0,l=0,c=0,h=0):(a=r.getStartLineNumber(e.modifiedStart),l=r.getStartColumn(e.modifiedStart),c=r.getEndLineNumber(e.modifiedStart+e.modifiedLength-1),h=r.getEndColumn(e.modifiedStart+e.modifiedLength-1)),new t(i,o,s,u,a,l,c,h)},t}();var J=function(){function t(t,e,n,r,i){this.originalStartLineNumber=t,this.originalEndLineNumber=e,this.modifiedStartLineNumber=n,this.modifiedEndLineNumber=r,this.charChanges=i}return t.createFromDiffResult=function(e,n,r,i,o){var s,u,a,l,c;if(0===e.originalLength?(s=n.getStartLineNumber(e.originalStart)-1,u=0):(s=n.getStartLineNumber(e.originalStart),u=n.getEndLineNumber(e.originalStart+e.originalLength-1)),0===e.modifiedLength?(a=r.getStartLineNumber(e.modifiedStart)-1,l=0):(a=r.getStartLineNumber(e.modifiedStart),l=r.getEndLineNumber(e.modifiedStart+e.modifiedLength-1)),0!==e.originalLength&&0!==e.modifiedLength&&i()){var h=n.getCharSequence(e.originalStart,e.originalStart+e.originalLength-1),f=r.getCharSequence(e.modifiedStart,e.modifiedStart+e.modifiedLength-1),p=W(h,f,i,!0);o&&(p=function(t){if(t.length<=1)return t;for(var e=[t[0]],n=e[0],r=1,i=t.length;r<i;r++){var o=t[r],s=o.originalStart-(n.originalStart+n.originalLength),u=o.modifiedStart-(n.modifiedStart+n.modifiedLength);Math.min(s,u)<V?(n.originalLength=o.originalStart+o.originalLength-n.originalStart,n.modifiedLength=o.modifiedStart+o.modifiedLength-n.modifiedStart):(e.push(o),n=o)}return e}(p)),c=[];for(var d=0,m=p.length;d<m;d++)c.push(H.createFromDiffChange(p[d],h,f))}return new t(s,u,a,l,c)},t}(),z=function(){function t(t,e,n){this.shouldPostProcessCharChanges=n.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=n.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=n.shouldMakePrettyDiff,this.maximumRunTimeMs=j,this.originalLines=t,this.modifiedLines=e,this.original=new B(t),this.modified=new B(e)}return t.prototype.computeDiff=function(){if(1===this.original.getLength()&&0===this.original.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.getLength(),charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];if(1===this.modified.getLength()&&0===this.modified.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:this.original.getLength(),modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];this.computationStartTime=(new Date).getTime();var t=W(this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldMakePrettyDiff);if(this.shouldIgnoreTrimWhitespace){for(var e=[],n=0,r=t.length;n<r;n++)e.push(J.createFromDiffResult(t[n],this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges));return e}for(var i=[],o=0,s=0,u=(n=-1,t.length);n<u;n++){for(var a=n+1<u?t[n+1]:null,l=a?a.originalStart:this.originalLines.length,c=a?a.modifiedStart:this.modifiedLines.length;o<l&&s<c;){var h=this.originalLines[o],f=this.modifiedLines[s];if(h!==f){for(var p=B._getFirstNonBlankColumn(h,1),d=B._getFirstNonBlankColumn(f,1);p>1&&d>1;){if(h.charCodeAt(p-2)!==f.charCodeAt(d-2))break;p--,d--}(p>1||d>1)&&this._pushTrimWhitespaceCharChange(i,o+1,1,p,s+1,1,d);for(var m=B._getLastNonBlankColumn(h,1),_=B._getLastNonBlankColumn(f,1),g=h.length+1,v=f.length+1;m<g&&_<v;){if(h.charCodeAt(m-1)!==h.charCodeAt(_-1))break;m++,_++}(m<g||_<v)&&this._pushTrimWhitespaceCharChange(i,o+1,m,g,s+1,_,v)}o++,s++}a&&(i.push(J.createFromDiffResult(a,this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges)),o+=a.originalLength,s+=a.modifiedLength)}return i},t.prototype._pushTrimWhitespaceCharChange=function(t,e,n,r,i,o,s){this._mergeTrimWhitespaceCharChange(t,e,n,r,i,o,s)||t.push(new J(e,e,i,i,[new H(e,n,e,r,i,o,i,s)]))},t.prototype._mergeTrimWhitespaceCharChange=function(t,e,n,r,i,o,s){var u=t.length;if(0===u)return!1;var a=t[u-1];return 0!==a.originalEndLineNumber&&0!==a.modifiedEndLineNumber&&(a.originalEndLineNumber+1===e&&a.modifiedEndLineNumber+1===i&&(a.originalEndLineNumber=e,a.modifiedEndLineNumber=i,a.charChanges.push(new H(e,n,e,r,i,o,i,s)),!0))},t.prototype._continueProcessingPredicate=function(){return 0===this.maximumRunTimeMs||(new Date).getTime()-this.computationStartTime<this.maximumRunTimeMs},t}(),Q=function(){function t(t,e,n){for(var r=new Uint8Array(t*e),i=0,o=t*e;i<o;i++)r[i]=n;this._data=r,this.rows=t,this.cols=e}return t.prototype.get=function(t,e){return this._data[t*this.cols+e]},t.prototype.set=function(t,e,n){this._data[t*this.cols+e]=n},t}();function G(t){return t<0?0:t>255?255:0|t}function X(t){return t<0?0:t>4294967295?4294967295:0|t}var $=function(){return function(t,e){this.index=t,this.remainder=e}}(),Z=function(){function t(t){this.values=t,this.prefixSum=new Uint32Array(t.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}return t.prototype.getCount=function(){return this.values.length},t.prototype.insertValues=function(t,e){t=X(t);var n=this.values,r=this.prefixSum,i=e.length;return 0!==i&&(this.values=new Uint32Array(n.length+i),this.values.set(n.subarray(0,t),0),this.values.set(n.subarray(t),t+i),this.values.set(e,t),t-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=t-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(r.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},t.prototype.changeValue=function(t,e){return t=X(t),e=X(e),this.values[t]!==e&&(this.values[t]=e,t-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=t-1),!0)},t.prototype.removeValues=function(t,e){t=X(t),e=X(e);var n=this.values,r=this.prefixSum;if(t>=n.length)return!1;var i=n.length-t;return e>=i&&(e=i),0!==e&&(this.values=new Uint32Array(n.length-e),this.values.set(n.subarray(0,t),0),this.values.set(n.subarray(t+e),t),this.prefixSum=new Uint32Array(this.values.length),t-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=t-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(r.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},t.prototype.getTotalValue=function(){return 0===this.values.length?0:this._getAccumulatedValue(this.values.length-1)},t.prototype.getAccumulatedValue=function(t){return t<0?0:(t=X(t),this._getAccumulatedValue(t))},t.prototype._getAccumulatedValue=function(t){if(t<=this.prefixSumValidIndex[0])return this.prefixSum[t];var e=this.prefixSumValidIndex[0]+1;0===e&&(this.prefixSum[0]=this.values[0],e++),t>=this.values.length&&(t=this.values.length-1);for(var n=e;n<=t;n++)this.prefixSum[n]=this.prefixSum[n-1]+this.values[n];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],t),this.prefixSum[t]},t.prototype.getIndexOf=function(t){t=Math.floor(t),this.getTotalValue();for(var e,n,r,i=0,o=this.values.length-1;i<=o;)if(e=i+(o-i)/2|0,t<(r=(n=this.prefixSum[e])-this.values[e]))o=e-1;else{if(!(t>=n))break;i=e+1}return new $(e,t-r)},t}(),tt=(function(){function t(t){this._cacheAccumulatedValueStart=0,this._cache=null,this._actual=new Z(t),this._bustCache()}t.prototype._bustCache=function(){this._cacheAccumulatedValueStart=0,this._cache=null},t.prototype.insertValues=function(t,e){this._actual.insertValues(t,e)&&this._bustCache()},t.prototype.changeValue=function(t,e){this._actual.changeValue(t,e)&&this._bustCache()},t.prototype.removeValues=function(t,e){this._actual.removeValues(t,e)&&this._bustCache()},t.prototype.getTotalValue=function(){return this._actual.getTotalValue()},t.prototype.getAccumulatedValue=function(t){return this._actual.getAccumulatedValue(t)},t.prototype.getIndexOf=function(t){if(t=Math.floor(t),null!==this._cache){var e=t-this._cacheAccumulatedValueStart;if(e>=0&&e<this._cache.length)return this._cache[e]}return this._actual.getIndexOf(t)},t.prototype.warmUpCache=function(t,e){for(var n=[],r=t;r<=e;r++)n[r-t]=this.getIndexOf(r);this._cache=n,this._cacheAccumulatedValueStart=t}}(),function(){function t(t,e,n,r){this._uri=t,this._lines=e,this._eol=n,this._versionId=r}return t.prototype.dispose=function(){this._lines.length=0},Object.defineProperty(t.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),t.prototype.getText=function(){return this._lines.join(this._eol)},t.prototype.onEvents=function(t){t.eol&&t.eol!==this._eol&&(this._eol=t.eol,this._lineStarts=null);for(var e=t.changes,n=0,r=e.length;n<r;n++){var i=e[n];this._acceptDeleteRange(i.range),this._acceptInsertText(new L(i.range.startLineNumber,i.range.startColumn),i.text)}this._versionId=t.versionId},t.prototype._ensureLineStarts=function(){if(!this._lineStarts){for(var t=this._eol.length,e=this._lines.length,n=new Uint32Array(e),r=0;r<e;r++)n[r]=this._lines[r].length+t;this._lineStarts=new Z(n)}},t.prototype._setLineText=function(t,e){this._lines[t]=e,this._lineStarts&&this._lineStarts.changeValue(t,this._lines[t].length+this._eol.length)},t.prototype._acceptDeleteRange=function(t){if(t.startLineNumber!==t.endLineNumber)this._setLineText(t.startLineNumber-1,this._lines[t.startLineNumber-1].substring(0,t.startColumn-1)+this._lines[t.endLineNumber-1].substring(t.endColumn-1)),this._lines.splice(t.startLineNumber,t.endLineNumber-t.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(t.startLineNumber,t.endLineNumber-t.startLineNumber);else{if(t.startColumn===t.endColumn)return;this._setLineText(t.startLineNumber-1,this._lines[t.startLineNumber-1].substring(0,t.startColumn-1)+this._lines[t.startLineNumber-1].substring(t.endColumn-1))}},t.prototype._acceptInsertText=function(t,e){if(0!==e.length){var n=e.split(/\r\n|\r|\n/);if(1!==n.length){n[n.length-1]+=this._lines[t.lineNumber-1].substring(t.column-1),this._setLineText(t.lineNumber-1,this._lines[t.lineNumber-1].substring(0,t.column-1)+n[0]);for(var r=new Uint32Array(n.length-1),i=1;i<n.length;i++)this._lines.splice(t.lineNumber+i-1,0,n[i]),r[i-1]=n[i].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(t.lineNumber,r)}else this._setLineText(t.lineNumber-1,this._lines[t.lineNumber-1].substring(0,t.column-1)+n[0]+this._lines[t.lineNumber-1].substring(t.column-1))}},t}()),et=function(){function t(e){var n=G(e);this._defaultValue=n,this._asciiMap=t._createAsciiMap(n),this._map=new Map}return t._createAsciiMap=function(t){for(var e=new Uint8Array(256),n=0;n<256;n++)e[n]=t;return e},t.prototype.set=function(t,e){var n=G(e);t>=0&&t<256?this._asciiMap[t]=n:this._map.set(t,n)},t.prototype.get=function(t){return t>=0&&t<256?this._asciiMap[t]:this._map.get(t)||this._defaultValue},t}(),nt=(function(){function t(){this._actual=new et(0)}t.prototype.add=function(t){this._actual.set(t,1)},t.prototype.has=function(t){return 1===this._actual.get(t)}}(),function(){function t(t){for(var e=0,n=0,r=0,i=t.length;r<i;r++){var o=t[r],s=o[0],u=o[1],a=o[2];u>e&&(e=u),s>n&&(n=s),a>n&&(n=a)}var l=new Q(++n,++e,0);for(r=0,i=t.length;r<i;r++){var c=t[r];s=c[0],u=c[1],a=c[2];l.set(s,u,a)}this._states=l,this._maxCharCode=e}return t.prototype.nextState=function(t,e){return e<0||e>=this._maxCharCode?0:this._states.get(t,e)},t}()),rt=null;var it=null;var ot=function(){function t(){}return t._createLink=function(t,e,n,r,i){var o=i-1;do{var s=e.charCodeAt(o);if(2!==t.get(s))break;o--}while(o>r);if(r>0){var u=e.charCodeAt(r-1),a=e.charCodeAt(o);(40===u&&41===a||91===u&&93===a||123===u&&125===a)&&o--}return{range:{startLineNumber:n,startColumn:r+1,endLineNumber:n,endColumn:o+2},url:e.substring(r,o+1)}},t.computeLinks=function(e){for(var n=(null===rt&&(rt=new nt([[1,104,2],[1,72,2],[1,102,6],[1,70,6],[2,116,3],[2,84,3],[3,116,4],[3,84,4],[4,112,5],[4,80,5],[5,115,9],[5,83,9],[5,58,10],[6,105,7],[6,73,7],[7,108,8],[7,76,8],[8,101,9],[8,69,9],[9,58,10],[10,47,11],[11,47,12]])),rt),r=function(){if(null===it){it=new et(0);for(var t=0;t<" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".length;t++)it.set(" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".charCodeAt(t),1);for(t=0;t<".,;".length;t++)it.set(".,;".charCodeAt(t),2)}return it}(),i=[],o=1,s=e.getLineCount();o<=s;o++){for(var u=e.getLineContent(o),a=u.length,l=0,c=0,h=0,f=1,p=!1,d=!1,m=!1;l<a;){var _=!1,g=u.charCodeAt(l);if(13===f){var v=void 0;switch(g){case 40:p=!0,v=0;break;case 41:v=p?0:1;break;case 91:d=!0,v=0;break;case 93:v=d?0:1;break;case 123:m=!0,v=0;break;case 125:v=m?0:1;break;case 39:v=34===h||96===h?0:1;break;case 34:v=39===h||96===h?0:1;break;case 96:v=39===h||34===h?0:1;break;default:v=r.get(g)}1===v&&(i.push(t._createLink(r,u,o,c,l)),_=!0)}else if(12===f){1===(v=r.get(g))?_=!0:f=13}else 0===(f=n.nextState(f,g))&&(_=!0);_&&(f=1,p=!1,d=!1,m=!1,c=l+1,h=g),l++}13===f&&i.push(t._createLink(r,u,o,c,a))}return i},t}();var st=function(){function t(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}return t.prototype.navigateValueSet=function(t,e,n,r,i){var o;if(t&&e&&(o=this.doNavigateValueSet(e,i)))return{range:t,value:o};if(n&&r&&(o=this.doNavigateValueSet(r,i)))return{range:n,value:o};return null},t.prototype.doNavigateValueSet=function(t,e){var n=this.numberReplace(t,e);return null!==n?n:this.textReplace(t,e)},t.prototype.numberReplace=function(t,e){var n=Math.pow(10,t.length-(t.lastIndexOf(".")+1)),r=Number(t),i=parseFloat(t);return isNaN(r)||isNaN(i)||r!==i?null:0!==r||e?(r=Math.floor(r*n),r+=e?n:-n,String(r/n)):null},t.prototype.textReplace=function(t,e){return this.valueSetsReplace(this._defaultValueSet,t,e)},t.prototype.valueSetsReplace=function(t,e,n){for(var r=null,i=0,o=t.length;null===r&&i<o;i++)r=this.valueSetReplace(t[i],e,n);return r},t.prototype.valueSetReplace=function(t,e,n){var r=t.indexOf(e);return r>=0?((r+=n?1:-1)<0?r=t.length-1:r%=t.length,t[r]):null},t.INSTANCE=new t,t}(),ut="`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";var at=function(t){void 0===t&&(t="");for(var e="(-?\\d*\\.\\d\\w*)|([^",n=0;n<ut.length;n++)t.indexOf(ut[n])>=0||(e+="\\"+ut[n]);return e+="\\s]+)",new RegExp(e,"g")}();function lt(t){var e,n=this,r=!1;return function(){return r?e:(r=!0,e=t.apply(n,arguments))}}var ct=Object.freeze({dispose:function(){}});function ht(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return Array.isArray(t)?(t.forEach(function(t){return t&&t.dispose()}),[]):0===e.length?t?(t.dispose(),t):void 0:(ht(t),ht(e),[])}var ft=function(){function t(){this._toDispose=[]}return t.prototype.dispose=function(){this._toDispose=ht(this._toDispose)},t.prototype._register=function(t){return this._toDispose.push(t),t},t}(),pt=(function(){function t(){this.references=Object.create(null)}t.prototype.acquire=function(t){var e=this,n=this.references[t];n||(n=this.references[t]={counter:0,object:this.createReferencedObject(t)});var r=n.object,i=lt(function(){0==--n.counter&&(e.destroyReferencedObject(n.object),delete e.references[t])});return n.counter++,{object:r,dispose:i}}}(),function(){function t(t){this.object=t}t.prototype.dispose=function(){}}(),{});N.b.addEventListener("error",function(t){var e=t.detail,n=e.id;e.parent?e.handler&&pt&&delete pt[n]:(pt[n]=e,1===Object.keys(pt).length&&setTimeout(function(){var t=pt;pt={},Object.keys(t).forEach(function(e){var n=t[e];n.exception?mt(n.exception):n.error&&mt(n.error),console.log("WARNING: Promise with no error callback:"+n.id),console.log(n),n.exception&&console.log(n.exception.stack)})},0))});var dt=new(function(){function t(){this.listeners=[],this.unexpectedErrorHandler=function(t){setTimeout(function(){if(t.stack)throw new Error(t.message+"\n\n"+t.stack);throw t},0)}}return t.prototype.addListener=function(t){var e=this;return this.listeners.push(t),function(){e._removeListener(t)}},t.prototype.emit=function(t){this.listeners.forEach(function(e){e(t)})},t.prototype._removeListener=function(t){this.listeners.splice(this.listeners.indexOf(t),1)},t.prototype.setUnexpectedErrorHandler=function(t){this.unexpectedErrorHandler=t},t.prototype.getUnexpectedErrorHandler=function(){return this.unexpectedErrorHandler},t.prototype.onUnexpectedError=function(t){this.unexpectedErrorHandler(t),this.emit(t)},t.prototype.onUnexpectedExternalError=function(t){this.unexpectedErrorHandler(t)},t}());function mt(t){vt(t)||dt.onUnexpectedError(t)}function _t(t){return t instanceof Error?{$isError:!0,name:t.name,message:t.message,stack:t.stacktrace||t.stack}:t}var gt="Canceled";function vt(t){return t instanceof Error&&t.name===gt&&t.message===gt}var yt,bt=function(){return function(t){this.element=t}}(),Ct=function(){function t(){}return t.prototype.isEmpty=function(){return!this._first},t.prototype.clear=function(){this._first=void 0,this._last=void 0},t.prototype.unshift=function(t){return this.insert(t,!1)},t.prototype.push=function(t){return this.insert(t,!0)},t.prototype.insert=function(t,e){var n=this,r=new bt(t);if(this._first)if(e){var i=this._last;this._last=r,r.prev=i,i.next=r}else{var o=this._first;this._first=r,r.next=o,o.prev=r}else this._first=r,this._last=r;return function(){for(var t=n._first;t instanceof bt;t=t.next)if(t===r){if(t.prev&&t.next){var e=t.prev;e.next=t.next,t.next.prev=e}else t.prev||t.next?t.next?t.prev||(n._first=n._first.next,n._first.prev=void 0):(n._last=n._last.prev,n._last.next=void 0):(n._first=void 0,n._last=void 0);break}}},t.prototype.iterator=function(){var t={done:void 0,value:void 0},e=this._first;return{next:function(){return e?(t.done=!1,t.value=e.element,e=e.next):(t.done=!0,t.value=void 0),t}}},t.prototype.toArray=function(){for(var t=[],e=this._first;e instanceof bt;e=e.next)t.push(e.element);return t},t}();!function(t){var e={dispose:function(){}};t.None=function(){return e}}(yt||(yt={}));var St=function(){function t(t){this._options=t}return Object.defineProperty(t.prototype,"event",{get:function(){var e=this;return this._event||(this._event=function(n,r,i){e._listeners||(e._listeners=new Ct);var o=e._listeners.isEmpty();o&&e._options&&e._options.onFirstListenerAdd&&e._options.onFirstListenerAdd(e);var s,u=e._listeners.push(r?[n,r]:n);return o&&e._options&&e._options.onFirstListenerDidAdd&&e._options.onFirstListenerDidAdd(e),e._options&&e._options.onListenerDidAdd&&e._options.onListenerDidAdd(e,n,r),s={dispose:function(){s.dispose=t._noop,e._disposed||(u(),e._options&&e._options.onLastListenerRemove&&e._listeners.isEmpty()&&e._options.onLastListenerRemove(e))}},Array.isArray(i)&&i.push(s),s}),this._event},enumerable:!0,configurable:!0}),t.prototype.fire=function(t){if(this._listeners){this._deliveryQueue||(this._deliveryQueue=[]);for(var e=this._listeners.iterator(),n=e.next();!n.done;n=e.next())this._deliveryQueue.push([n.value,t]);for(;this._deliveryQueue.length>0;){var r=this._deliveryQueue.shift(),i=r[0],o=r[1];try{"function"==typeof i?i.call(void 0,o):i[0].call(i[1],o)}catch(n){mt(n)}}}},t.prototype.dispose=function(){this._listeners&&(this._listeners=void 0),this._deliveryQueue&&(this._deliveryQueue.length=0),this._disposed=!0},t._noop=function(){},t}();!function(){function t(){var t=this;this.hasListeners=!1,this.events=[],this.emitter=new St({onFirstListenerAdd:function(){return t.onFirstListenerAdd()},onLastListenerRemove:function(){return t.onLastListenerRemove()}})}Object.defineProperty(t.prototype,"event",{get:function(){return this.emitter.event},enumerable:!0,configurable:!0}),t.prototype.add=function(t){var e=this,n={event:t,listener:null};this.events.push(n),this.hasListeners&&this.hook(n);return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return{dispose:function(){for(var e=0,n=t;e<n.length;e++)(0,n[e])()}}}(lt(function(){e.hasListeners&&e.unhook(n);var t=e.events.indexOf(n);e.events.splice(t,1)}))},t.prototype.onFirstListenerAdd=function(){var t=this;this.hasListeners=!0,this.events.forEach(function(e){return t.hook(e)})},t.prototype.onLastListenerRemove=function(){var t=this;this.hasListeners=!1,this.events.forEach(function(e){return t.unhook(e)})},t.prototype.hook=function(t){var e=this;t.listener=t.event(function(t){return e.emitter.fire(t)})},t.prototype.unhook=function(t){t.listener.dispose(),t.listener=null},t.prototype.dispose=function(){this.emitter.dispose()}}();!function(){function t(){this.buffers=[]}t.prototype.wrapEvent=function(t){var e=this;return function(n,r,i){return t(function(t){var i=e.buffers[e.buffers.length-1];i?i.push(function(){return n.call(r,t)}):n.call(r,t)},void 0,i)}},t.prototype.bufferEvents=function(t){var e=[];this.buffers.push(e),t(),this.buffers.pop(),e.forEach(function(t){return t()})}}();function Nt(t,e){return function(n,r,i){return void 0===r&&(r=null),t(function(t){return n.call(r,e(t))},null,i)}}function Lt(t,e){return function(n,r,i){return void 0===r&&(r=null),t(function(t){return e(t)&&n.call(r,t)},null,i)}}!function(){function t(t){this._event=t}Object.defineProperty(t.prototype,"event",{get:function(){return this._event},enumerable:!0,configurable:!0}),t.prototype.map=function(e){return new t(Nt(this._event,e))},t.prototype.forEach=function(e){return new t((n=this._event,r=e,function(t,e,i){return void 0===e&&(e=null),n(function(n){r(n),t.call(e,n)},null,i)}));var n,r},t.prototype.filter=function(e){return new t(Lt(this._event,e))},t.prototype.latch=function(){return new t((e=this._event,r=!0,Lt(e,function(t){var e=r||t!==n;return r=!1,n=t,e})));var e,n,r},t.prototype.on=function(t,e,n){return this._event(t,e,n)}}();!function(){function t(){this.emitter=new St,this.event=this.emitter.event,this.disposable=ct}Object.defineProperty(t.prototype,"input",{set:function(t){this.disposable.dispose(),this.disposable=t(this.emitter.fire,this.emitter)},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){this.disposable.dispose(),this.emitter.dispose()}}();var Et,wt=function(){function t(){this._keyCodeToStr=[],this._strToKeyCode=Object.create(null)}return t.prototype.define=function(t,e){this._keyCodeToStr[t]=e,this._strToKeyCode[e.toLowerCase()]=t},t.prototype.keyCodeToStr=function(t){return this._keyCodeToStr[t]},t.prototype.strToKeyCode=function(t){return this._strToKeyCode[t.toLowerCase()]||0},t}(),Pt=new wt,At=new wt,xt=new wt;!function(){function t(t,e,n,r){void 0===n&&(n=e),void 0===r&&(r=n),Pt.define(t,e),At.define(t,n),xt.define(t,r)}t(0,"unknown"),t(1,"Backspace"),t(2,"Tab"),t(3,"Enter"),t(4,"Shift"),t(5,"Ctrl"),t(6,"Alt"),t(7,"PauseBreak"),t(8,"CapsLock"),t(9,"Escape"),t(10,"Space"),t(11,"PageUp"),t(12,"PageDown"),t(13,"End"),t(14,"Home"),t(15,"LeftArrow","Left"),t(16,"UpArrow","Up"),t(17,"RightArrow","Right"),t(18,"DownArrow","Down"),t(19,"Insert"),t(20,"Delete"),t(21,"0"),t(22,"1"),t(23,"2"),t(24,"3"),t(25,"4"),t(26,"5"),t(27,"6"),t(28,"7"),t(29,"8"),t(30,"9"),t(31,"A"),t(32,"B"),t(33,"C"),t(34,"D"),t(35,"E"),t(36,"F"),t(37,"G"),t(38,"H"),t(39,"I"),t(40,"J"),t(41,"K"),t(42,"L"),t(43,"M"),t(44,"N"),t(45,"O"),t(46,"P"),t(47,"Q"),t(48,"R"),t(49,"S"),t(50,"T"),t(51,"U"),t(52,"V"),t(53,"W"),t(54,"X"),t(55,"Y"),t(56,"Z"),t(57,"Meta"),t(58,"ContextMenu"),t(59,"F1"),t(60,"F2"),t(61,"F3"),t(62,"F4"),t(63,"F5"),t(64,"F6"),t(65,"F7"),t(66,"F8"),t(67,"F9"),t(68,"F10"),t(69,"F11"),t(70,"F12"),t(71,"F13"),t(72,"F14"),t(73,"F15"),t(74,"F16"),t(75,"F17"),t(76,"F18"),t(77,"F19"),t(78,"NumLock"),t(79,"ScrollLock"),t(80,";",";","OEM_1"),t(81,"=","=","OEM_PLUS"),t(82,",",",","OEM_COMMA"),t(83,"-","-","OEM_MINUS"),t(84,".",".","OEM_PERIOD"),t(85,"/","/","OEM_2"),t(86,"`","`","OEM_3"),t(110,"ABNT_C1"),t(111,"ABNT_C2"),t(87,"[","[","OEM_4"),t(88,"\\","\\","OEM_5"),t(89,"]","]","OEM_6"),t(90,"'","'","OEM_7"),t(91,"OEM_8"),t(92,"OEM_102"),t(93,"NumPad0"),t(94,"NumPad1"),t(95,"NumPad2"),t(96,"NumPad3"),t(97,"NumPad4"),t(98,"NumPad5"),t(99,"NumPad6"),t(100,"NumPad7"),t(101,"NumPad8"),t(102,"NumPad9"),t(103,"NumPad_Multiply"),t(104,"NumPad_Add"),t(105,"NumPad_Separator"),t(106,"NumPad_Subtract"),t(107,"NumPad_Decimal"),t(108,"NumPad_Divide")}(),function(t){t.toString=function(t){return Pt.keyCodeToStr(t)},t.fromString=function(t){return Pt.strToKeyCode(t)},t.toUserSettingsUS=function(t){return At.keyCodeToStr(t)},t.toUserSettingsGeneral=function(t){return xt.keyCodeToStr(t)},t.fromUserSettings=function(t){return At.strToKeyCode(t)||xt.strToKeyCode(t)}}(Et||(Et={}));(function(){function t(t,e,n,r,i){this.type=1,this.ctrlKey=t,this.shiftKey=e,this.altKey=n,this.metaKey=r,this.keyCode=i}t.prototype.equals=function(t){return 1===t.type&&(this.ctrlKey===t.ctrlKey&&this.shiftKey===t.shiftKey&&this.altKey===t.altKey&&this.metaKey===t.metaKey&&this.keyCode===t.keyCode)},t.prototype.getHashCode=function(){return""+(this.ctrlKey?"1":"0")+(this.shiftKey?"1":"0")+(this.altKey?"1":"0")+(this.metaKey?"1":"0")+this.keyCode},t.prototype.isModifierKey=function(){return 0===this.keyCode||5===this.keyCode||57===this.keyCode||6===this.keyCode||4===this.keyCode},t.prototype.isDuplicateModifierCase=function(){return this.ctrlKey&&5===this.keyCode||this.shiftKey&&4===this.keyCode||this.altKey&&6===this.keyCode||this.metaKey&&57===this.keyCode}})(),function(){function t(t,e){this.type=2,this.firstPart=t,this.chordPart=e}t.prototype.getHashCode=function(){return this.firstPart.getHashCode()+";"+this.chordPart.getHashCode()}}();var Mt,kt=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t[t.LTR=0]="LTR",t[t.RTL=1]="RTL"}(Mt||(Mt={}));var Ot,It,Tt=function(t){function e(e,n,r,i){var o=t.call(this,e,n,r,i)||this;return o.selectionStartLineNumber=e,o.selectionStartColumn=n,o.positionLineNumber=r,o.positionColumn=i,o}return kt(e,t),e.prototype.clone=function(){return new e(this.selectionStartLineNumber,this.selectionStartColumn,this.positionLineNumber,this.positionColumn)},e.prototype.toString=function(){return"["+this.selectionStartLineNumber+","+this.selectionStartColumn+" -> "+this.positionLineNumber+","+this.positionColumn+"]"},e.prototype.equalsSelection=function(t){return e.selectionsEqual(this,t)},e.selectionsEqual=function(t,e){return t.selectionStartLineNumber===e.selectionStartLineNumber&&t.selectionStartColumn===e.selectionStartColumn&&t.positionLineNumber===e.positionLineNumber&&t.positionColumn===e.positionColumn},e.prototype.getDirection=function(){return this.selectionStartLineNumber===this.startLineNumber&&this.selectionStartColumn===this.startColumn?Mt.LTR:Mt.RTL},e.prototype.setEndPosition=function(t,n){return this.getDirection()===Mt.LTR?new e(this.startLineNumber,this.startColumn,t,n):new e(t,n,this.startLineNumber,this.startColumn)},e.prototype.getPosition=function(){return new L(this.positionLineNumber,this.positionColumn)},e.prototype.setStartPosition=function(t,n){return this.getDirection()===Mt.LTR?new e(t,n,this.endLineNumber,this.endColumn):new e(this.endLineNumber,this.endColumn,t,n)},e.fromPositions=function(t,n){return void 0===n&&(n=t),new e(t.lineNumber,t.column,n.lineNumber,n.column)},e.liftSelection=function(t){return new e(t.selectionStartLineNumber,t.selectionStartColumn,t.positionLineNumber,t.positionColumn)},e.selectionsArrEqual=function(t,e){if(t&&!e||!t&&e)return!1;if(!t&&!e)return!0;if(t.length!==e.length)return!1;for(var n=0,r=t.length;n<r;n++)if(!this.selectionsEqual(t[n],e[n]))return!1;return!0},e.isISelection=function(t){return t&&"number"==typeof t.selectionStartLineNumber&&"number"==typeof t.selectionStartColumn&&"number"==typeof t.positionLineNumber&&"number"==typeof t.positionColumn},e.createWithDirection=function(t,n,r,i,o){return o===Mt.LTR?new e(t,n,r,i):new e(r,i,t,n)},e}(E),Dt=Object.freeze(function(t,e){var n=setTimeout(t.bind(e),0);return{dispose:function(){clearTimeout(n)}}});(It=Ot||(Ot={})).None=Object.freeze({isCancellationRequested:!1,onCancellationRequested:yt.None}),It.Cancelled=Object.freeze({isCancellationRequested:!0,onCancellationRequested:Dt});var Ut,Kt,Rt=function(){function t(){this._isCancelled=!1}return t.prototype.cancel=function(){this._isCancelled||(this._isCancelled=!0,this._emitter&&(this._emitter.fire(void 0),this.dispose()))},Object.defineProperty(t.prototype,"isCancellationRequested",{get:function(){return this._isCancelled},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"onCancellationRequested",{get:function(){return this._isCancelled?Dt:(this._emitter||(this._emitter=new St),this._emitter.event)},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){this._emitter&&(this._emitter.dispose(),this._emitter=void 0)},t}(),qt=function(){function t(){}return Object.defineProperty(t.prototype,"token",{get:function(){return this._token||(this._token=new Rt),this._token},enumerable:!0,configurable:!0}),t.prototype.cancel=function(){this._token?this._token instanceof Rt&&this._token.cancel():this._token=Ot.Cancelled},t.prototype.dispose=function(){this._token?this._token instanceof Rt&&this._token.dispose():this._token=Ot.None},t}(),Ft=function(){function t(t,e,n){this.offset=0|t,this.type=e,this.language=n}return t.prototype.toString=function(){return"("+this.offset+", "+this.type+")"},t}();!function(t){t[t.Ignore=0]="Ignore",t[t.Info=1]="Info",t[t.Warning=2]="Warning",t[t.Error=3]="Error"}(Ut||(Ut={})),function(t){t[t.Hint=1]="Hint",t[t.Info=2]="Info",t[t.Warning=4]="Warning",t[t.Error=8]="Error"}(Kt||(Kt={}));var jt,Vt=function(){function t(){}return t.chord=function(t,e){return function(t,e){return(t|(65535&e)<<16>>>0)>>>0}(t,e)},t.CtrlCmd=2048,t.Shift=1024,t.Alt=512,t.WinCtrl=256,t}();!function(t){t[t.Unknown=0]="Unknown",t[t.Backspace=1]="Backspace",t[t.Tab=2]="Tab",t[t.Enter=3]="Enter",t[t.Shift=4]="Shift",t[t.Ctrl=5]="Ctrl",t[t.Alt=6]="Alt",t[t.PauseBreak=7]="PauseBreak",t[t.CapsLock=8]="CapsLock",t[t.Escape=9]="Escape",t[t.Space=10]="Space",t[t.PageUp=11]="PageUp",t[t.PageDown=12]="PageDown",t[t.End=13]="End",t[t.Home=14]="Home",t[t.LeftArrow=15]="LeftArrow",t[t.UpArrow=16]="UpArrow",t[t.RightArrow=17]="RightArrow",t[t.DownArrow=18]="DownArrow",t[t.Insert=19]="Insert",t[t.Delete=20]="Delete",t[t.KEY_0=21]="KEY_0",t[t.KEY_1=22]="KEY_1",t[t.KEY_2=23]="KEY_2",t[t.KEY_3=24]="KEY_3",t[t.KEY_4=25]="KEY_4",t[t.KEY_5=26]="KEY_5",t[t.KEY_6=27]="KEY_6",t[t.KEY_7=28]="KEY_7",t[t.KEY_8=29]="KEY_8",t[t.KEY_9=30]="KEY_9",t[t.KEY_A=31]="KEY_A",t[t.KEY_B=32]="KEY_B",t[t.KEY_C=33]="KEY_C",t[t.KEY_D=34]="KEY_D",t[t.KEY_E=35]="KEY_E",t[t.KEY_F=36]="KEY_F",t[t.KEY_G=37]="KEY_G",t[t.KEY_H=38]="KEY_H",t[t.KEY_I=39]="KEY_I",t[t.KEY_J=40]="KEY_J",t[t.KEY_K=41]="KEY_K",t[t.KEY_L=42]="KEY_L",t[t.KEY_M=43]="KEY_M",t[t.KEY_N=44]="KEY_N",t[t.KEY_O=45]="KEY_O",t[t.KEY_P=46]="KEY_P",t[t.KEY_Q=47]="KEY_Q",t[t.KEY_R=48]="KEY_R",t[t.KEY_S=49]="KEY_S",t[t.KEY_T=50]="KEY_T",t[t.KEY_U=51]="KEY_U",t[t.KEY_V=52]="KEY_V",t[t.KEY_W=53]="KEY_W",t[t.KEY_X=54]="KEY_X",t[t.KEY_Y=55]="KEY_Y",t[t.KEY_Z=56]="KEY_Z",t[t.Meta=57]="Meta",t[t.ContextMenu=58]="ContextMenu",t[t.F1=59]="F1",t[t.F2=60]="F2",t[t.F3=61]="F3",t[t.F4=62]="F4",t[t.F5=63]="F5",t[t.F6=64]="F6",t[t.F7=65]="F7",t[t.F8=66]="F8",t[t.F9=67]="F9",t[t.F10=68]="F10",t[t.F11=69]="F11",t[t.F12=70]="F12",t[t.F13=71]="F13",t[t.F14=72]="F14",t[t.F15=73]="F15",t[t.F16=74]="F16",t[t.F17=75]="F17",t[t.F18=76]="F18",t[t.F19=77]="F19",t[t.NumLock=78]="NumLock",t[t.ScrollLock=79]="ScrollLock",t[t.US_SEMICOLON=80]="US_SEMICOLON",t[t.US_EQUAL=81]="US_EQUAL",t[t.US_COMMA=82]="US_COMMA",t[t.US_MINUS=83]="US_MINUS",t[t.US_DOT=84]="US_DOT",t[t.US_SLASH=85]="US_SLASH",t[t.US_BACKTICK=86]="US_BACKTICK",t[t.US_OPEN_SQUARE_BRACKET=87]="US_OPEN_SQUARE_BRACKET",t[t.US_BACKSLASH=88]="US_BACKSLASH",t[t.US_CLOSE_SQUARE_BRACKET=89]="US_CLOSE_SQUARE_BRACKET",t[t.US_QUOTE=90]="US_QUOTE",t[t.OEM_8=91]="OEM_8",t[t.OEM_102=92]="OEM_102",t[t.NUMPAD_0=93]="NUMPAD_0",t[t.NUMPAD_1=94]="NUMPAD_1",t[t.NUMPAD_2=95]="NUMPAD_2",t[t.NUMPAD_3=96]="NUMPAD_3",t[t.NUMPAD_4=97]="NUMPAD_4",t[t.NUMPAD_5=98]="NUMPAD_5",t[t.NUMPAD_6=99]="NUMPAD_6",t[t.NUMPAD_7=100]="NUMPAD_7",t[t.NUMPAD_8=101]="NUMPAD_8",t[t.NUMPAD_9=102]="NUMPAD_9",t[t.NUMPAD_MULTIPLY=103]="NUMPAD_MULTIPLY",t[t.NUMPAD_ADD=104]="NUMPAD_ADD",t[t.NUMPAD_SEPARATOR=105]="NUMPAD_SEPARATOR",t[t.NUMPAD_SUBTRACT=106]="NUMPAD_SUBTRACT",t[t.NUMPAD_DECIMAL=107]="NUMPAD_DECIMAL",t[t.NUMPAD_DIVIDE=108]="NUMPAD_DIVIDE",t[t.KEY_IN_COMPOSITION=109]="KEY_IN_COMPOSITION",t[t.ABNT_C1=110]="ABNT_C1",t[t.ABNT_C2=111]="ABNT_C2",t[t.MAX_VALUE=112]="MAX_VALUE"}(jt||(jt={}));var Wt=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Yt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Wt(e,t),Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"eol",{get:function(){return this._eol},enumerable:!0,configurable:!0}),e.prototype.getValue=function(){return this.getText()},e.prototype.getLinesContent=function(){return this._lines.slice(0)},e.prototype.getLineCount=function(){return this._lines.length},e.prototype.getLineContent=function(t){return this._lines[t-1]},e.prototype.getWordAtPosition=function(t,e){var n=function(t,e,n,r){e.lastIndex=0;var i=e.exec(n);if(!i)return null;var o=i[0].indexOf(" ")>=0?function(t,e,n,r){var i,o=t-1-r;for(e.lastIndex=0;i=e.exec(n);){if(i.index>o)return null;if(e.lastIndex>=o)return{word:i[0],startColumn:r+1+i.index,endColumn:r+1+e.lastIndex}}return null}(t,e,n,r):function(t,e,n,r){var i,o=t-1-r,s=n.lastIndexOf(" ",o-1)+1,u=n.indexOf(" ",o);for(-1===u&&(u=n.length),e.lastIndex=s;i=e.exec(n);)if(i.index<=o&&e.lastIndex>=o)return{word:i[0],startColumn:r+1+i.index,endColumn:r+1+e.lastIndex};return null}(t,e,n,r);return e.lastIndex=0,o}(t.column,function(t){var e=at;if(t&&t instanceof RegExp)if(t.global)e=t;else{var n="g";t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),e=new RegExp(t.source,n)}return e.lastIndex=0,e}(e),this._lines[t.lineNumber-1],0);return n?new E(t.lineNumber,n.startColumn,t.lineNumber,n.endColumn):null},e.prototype.getWordUntilPosition=function(t,e){var n=this.getWordAtPosition(t,e);return n?{word:this._lines[t.lineNumber-1].substring(n.startColumn-1,t.column-1),startColumn:n.startColumn,endColumn:t.column}:{word:"",startColumn:t.column,endColumn:t.column}},e.prototype.createWordIterator=function(t){var e,n=this,r={done:!1,value:""},i=0,o=0,s=[],u=function(){if(o<s.length)r.done=!1,r.value=e.substring(s[o].start,s[o].end),o+=1;else{if(!(i>=n._lines.length))return e=n._lines[i],s=n._wordenize(e,t),o=0,i+=1,u();r.done=!0,r.value=void 0}return r};return{next:u}},e.prototype._wordenize=function(t,e){var n,r=[];for(e.lastIndex=0;(n=e.exec(t))&&0!==n[0].length;)r.push({start:n.index,end:n.index+n[0].length});return r},e.prototype.getValueInRange=function(t){if((t=this._validateRange(t)).startLineNumber===t.endLineNumber)return this._lines[t.startLineNumber-1].substring(t.startColumn-1,t.endColumn-1);var e=this._eol,n=t.startLineNumber-1,r=t.endLineNumber-1,i=[];i.push(this._lines[n].substring(t.startColumn-1));for(var o=n+1;o<r;o++)i.push(this._lines[o]);return i.push(this._lines[r].substring(0,t.endColumn-1)),i.join(e)},e.prototype.offsetAt=function(t){return t=this._validatePosition(t),this._ensureLineStarts(),this._lineStarts.getAccumulatedValue(t.lineNumber-2)+(t.column-1)},e.prototype.positionAt=function(t){t=Math.floor(t),t=Math.max(0,t),this._ensureLineStarts();var e=this._lineStarts.getIndexOf(t),n=this._lines[e.index].length;return{lineNumber:1+e.index,column:1+Math.min(e.remainder,n)}},e.prototype._validateRange=function(t){var e=this._validatePosition({lineNumber:t.startLineNumber,column:t.startColumn}),n=this._validatePosition({lineNumber:t.endLineNumber,column:t.endColumn});return e.lineNumber!==t.startLineNumber||e.column!==t.startColumn||n.lineNumber!==t.endLineNumber||n.column!==t.endColumn?{startLineNumber:e.lineNumber,startColumn:e.column,endLineNumber:n.lineNumber,endColumn:n.column}:t},e.prototype._validatePosition=function(t){if(!L.isIPosition(t))throw new Error("bad position");var e=t.lineNumber,n=t.column,r=!1;if(e<1)e=1,n=1,r=!0;else if(e>this._lines.length)e=this._lines.length,n=this._lines[e-1].length+1,r=!0;else{var i=this._lines[e-1].length+1;n<1?(n=1,r=!0):n>i&&(n=i,r=!0)}return r?{lineNumber:e,column:n}:t},e}(tt),Bt=function(t){function e(e){var n=t.call(this,e)||this;return n._models=Object.create(null),n}return Wt(e,t),e.prototype.dispose=function(){this._models=Object.create(null)},e.prototype._getModel=function(t){return this._models[t]},e.prototype._getModels=function(){var t=this,e=[];return Object.keys(this._models).forEach(function(n){return e.push(t._models[n])}),e},e.prototype.acceptNewModel=function(t){this._models[t.url]=new Yt(y.parse(t.url),t.lines,t.EOL,t.versionId)},e.prototype.acceptModelChanged=function(t,e){this._models[t]&&this._models[t].onEvents(e)},e.prototype.acceptRemovedModel=function(t){this._models[t]&&delete this._models[t]},e}(function(){function t(t){this._foreignModuleFactory=t,this._foreignModule=null}return t.prototype.computeDiff=function(t,e,n){var r=this._getModel(t),i=this._getModel(e);if(!r||!i)return null;var o=r.getLinesContent(),s=i.getLinesContent(),u=new z(o,s,{shouldPostProcessCharChanges:!0,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return N.b.as(u.computeDiff())},t.prototype.computeDirtyDiff=function(t,e,n){var r=this._getModel(t),i=this._getModel(e);if(!r||!i)return null;var o=r.getLinesContent(),s=i.getLinesContent(),u=new z(o,s,{shouldPostProcessCharChanges:!1,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return N.b.as(u.computeDiff())},t.prototype.computeMoreMinimalEdits=function(e,n){var r=this._getModel(e);if(!r)return N.b.as(n);for(var i,o=[],s=0,u=n;s<u.length;s++){var a=u[s],l=a.range,c=a.text,h=a.eol;if("number"==typeof h&&(i=h),l){var f=r.getValueInRange(l);if(f!==(c=c.replace(/\r\n|\n|\r/g,r.eol)))if(Math.max(c.length,f.length)>t._diffLimit)o.push({range:l,text:c});else for(var p=A(f,c,!1),d=r.offsetAt(E.lift(l).getStartPosition()),m=0,_=p;m<_.length;m++){var g=_[m],v=r.positionAt(d+g.originalStart),y=r.positionAt(d+g.originalStart+g.originalLength),b={text:c.substr(g.modifiedStart,g.modifiedLength),range:{startLineNumber:v.lineNumber,startColumn:v.column,endLineNumber:y.lineNumber,endColumn:y.column}};r.getValueInRange(b.range)!==b.text&&o.push(b)}}}return"number"==typeof i&&o.push({eol:i,text:void 0,range:void 0}),N.b.as(o)},t.prototype.computeLinks=function(t){var e=this._getModel(t);return e?N.b.as(function(t){return t&&"function"==typeof t.getLineCount&&"function"==typeof t.getLineContent?ot.computeLinks(t):[]}(e)):null},t.prototype.textualSuggest=function(e,n,r,i){var o=this._getModel(e);if(o){var s=[],u=new RegExp(r,i),a=o.getWordUntilPosition(n,u).word,l=Object.create(null);l[a]=!0;for(var c=o.createWordIterator(u),h=c.next();!h.done&&s.length<=t._suggestionsLimit;h=c.next()){var f=h.value;l[f]||(l[f]=!0,isNaN(Number(f))&&s.push({type:"text",label:f,insertText:f,noAutoAccept:!0,overwriteBefore:a.length}))}return N.b.as({suggestions:s})}},t.prototype.navigateValueSet=function(t,e,n,r,i){var o=this._getModel(t);if(!o)return null;var s=new RegExp(r,i);e.startColumn===e.endColumn&&(e={startLineNumber:e.startLineNumber,startColumn:e.startColumn,endLineNumber:e.endLineNumber,endColumn:e.endColumn+1});var u=o.getValueInRange(e),a=o.getWordAtPosition({lineNumber:e.startLineNumber,column:e.startColumn},s),l=null;null!==a&&(l=o.getValueInRange(a));var c=st.INSTANCE.navigateValueSet(e,u,a,l,n);return N.b.as(c)},t.prototype.loadForeignModule=function(t,e){var r=this,i={getMirrorModels:function(){return r._getModels()}};if(this._foreignModuleFactory){this._foreignModule=this._foreignModuleFactory(i,e);var o=[];for(var s in this._foreignModule)"function"==typeof this._foreignModule[s]&&o.push(s);return N.b.as(o)}return new N.b(function(o,s){Promise.resolve().then(function(){var s=[n(5)(t)];(function(t){r._foreignModule=t.create(i,e);var n=[];for(var s in r._foreignModule)"function"==typeof r._foreignModule[s]&&n.push(s);o(n)}).apply(null,s)}).catch(s.bind(this))})},t.prototype.fmr=function(t,e){if(!this._foreignModule||"function"!=typeof this._foreignModule[t])return N.b.wrapError(new Error("Missing requestHandler or method: "+t));try{return N.b.as(this._foreignModule[t].apply(this._foreignModule,e))}catch(t){return N.b.wrapError(t)}},t._diffLimit=1e4,t._suggestionsLimit=1e4,t}());"function"==typeof importScripts&&(i.a.monaco={editor:void 0,languages:void 0,CancellationTokenSource:qt,Emitter:St,KeyCode:jt,KeyMod:Vt,Position:L,Range:E,Selection:Tt,SelectionDirection:Mt,Severity:Ut,MarkerSeverity:Kt,Promise:N.b,Uri:y,Token:Ft});var Ht=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();var Jt=function(){function t(){this.activePromise=null,this.queuedPromise=null,this.queuedPromiseFactory=null}return t.prototype.queue=function(t){var e=this;if(this.activePromise){if(this.queuedPromiseFactory=t,!this.queuedPromise){var n=function(){e.queuedPromise=null;var t=e.queue(e.queuedPromiseFactory);return e.queuedPromiseFactory=null,t};this.queuedPromise=new N.b(function(t,r,i){e.activePromise.then(n,n,i).done(t)},function(){e.activePromise.cancel()})}return new N.b(function(t,n,r){e.queuedPromise.then(t,n,r)},function(){})}return this.activePromise=t(),new N.b(function(t,n,r){e.activePromise.done(function(n){e.activePromise=null,t(n)},function(t){e.activePromise=null,n(t)},r)},function(){e.activePromise.cancel()})},t}(),zt=(function(){function t(){this.current=N.b.wrap(null)}t.prototype.queue=function(t){return this.current=this.current.then(function(){return t()})}}(),function(t){function e(e){var n=t.call(this,e)||this;return n.throttler=new Jt,n}Ht(e,t),e.prototype.trigger=function(e,n){var r=this;return t.prototype.trigger.call(this,function(){return r.throttler.queue(e)},n)}}(function(){function t(t){this.defaultDelay=t,this.timeout=null,this.completionPromise=null,this.onSuccess=null,this.task=null}return t.prototype.trigger=function(t,e){var n=this;return void 0===e&&(e=this.defaultDelay),this.task=t,this.cancelTimeout(),this.completionPromise||(this.completionPromise=new N.b(function(t){n.onSuccess=t},function(){}).then(function(){n.completionPromise=null,n.onSuccess=null;var t=n.task;return n.task=null,t()})),this.timeout=setTimeout(function(){n.timeout=null,n.onSuccess(null)},e),this.completionPromise},t.prototype.isTriggered=function(){return null!==this.timeout},t.prototype.cancel=function(){this.cancelTimeout(),this.completionPromise&&(this.completionPromise.cancel(),this.completionPromise=null)},t.prototype.cancelTimeout=function(){null!==this.timeout&&(clearTimeout(this.timeout),this.timeout=null)},t}()),function(){function t(){var t=this;this._isOpen=!1,this._promise=new N.b(function(e,n,r){t._completePromise=e},function(){console.warn("You should really not try to cancel this ready promise!")})}t.prototype.isOpen=function(){return this._isOpen},t.prototype.open=function(){this._isOpen=!0,this._completePromise(!0)},t.prototype.wait=function(){return this._promise}}(),function(t){function e(e){var n,r,i,o;return n=t.call(this,function(t,e,n){r=t,i=e,o=n},function(){var t;i(((t=new Error(gt)).name=t.message,t))})||this,e.then(r,i,o),n}return Ht(e,t),e}(N.b));function Qt(t,e){return n=t,N.b.is(n)&&"function"==typeof n.done?new N.b(function(n,r,i){t.done(function(t){try{e(t)}catch(t){mt(t)}n(t)},function(t){try{e(t)}catch(t){mt(t)}r(t)},function(t){i(t)})},function(){t.cancel()}):(t.then(function(t){return e()},function(t){return e()}),t);var n}var Gt=function(t){function e(){return t.call(this,1)||this}return Ht(e,t),e}(function(){function t(t){this.maxDegreeOfParalellism=t,this.outstandingPromises=[],this.runningPromises=0,this._onFinished=new St}return Object.defineProperty(t.prototype,"onFinished",{get:function(){return this._onFinished.event},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this.runningPromises+this.outstandingPromises.length},enumerable:!0,configurable:!0}),t.prototype.queue=function(t){var e=this;return new N.b(function(n,r,i){e.outstandingPromises.push({factory:t,c:n,e:r,p:i}),e.consume()})},t.prototype.consume=function(){for(var t=this;this.outstandingPromises.length&&this.runningPromises<this.maxDegreeOfParalellism;){var e=this.outstandingPromises.shift();this.runningPromises++;var n=e.factory();n.done(e.c,e.e,e.p),n.done(function(){return t.consumed()},function(){return t.consumed()})}},t.prototype.consumed=function(){this.runningPromises--,this.outstandingPromises.length>0?this.consume():this._onFinished.fire()},t.prototype.dispose=function(){this._onFinished.dispose()},t}());!function(){function t(){this.queues=Object.create(null)}t.prototype.queueFor=function(t){var e=this,n=t.toString();if(!this.queues[n]){var r=new Gt;r.onFinished(function(){r.dispose(),delete e.queues[n]}),this.queues[n]=r}return this.queues[n]}}();(function(t){function e(){var e=t.call(this)||this;return e._token=-1,e}Ht(e,t),e.prototype.dispose=function(){this.cancel(),t.prototype.dispose.call(this)},e.prototype.cancel=function(){-1!==this._token&&(clearTimeout(this._token),this._token=-1)},e.prototype.cancelAndSet=function(t,e){var n=this;this.cancel(),this._token=setTimeout(function(){n._token=-1,t()},e)},e.prototype.setIfNotSet=function(t,e){var n=this;-1===this._token&&(this._token=setTimeout(function(){n._token=-1,t()},e))}})(ft),function(t){function e(){var e=t.call(this)||this;return e._token=-1,e}Ht(e,t),e.prototype.dispose=function(){this.cancel(),t.prototype.dispose.call(this)},e.prototype.cancel=function(){-1!==this._token&&(clearInterval(this._token),this._token=-1)},e.prototype.cancelAndSet=function(t,e){this.cancel(),this._token=setInterval(function(){t()},e)}}(ft),function(){function t(t,e){this.timeoutToken=-1,this.runner=t,this.timeout=e,this.timeoutHandler=this.onTimeout.bind(this)}t.prototype.dispose=function(){this.cancel(),this.runner=null},t.prototype.cancel=function(){this.isScheduled()&&(clearTimeout(this.timeoutToken),this.timeoutToken=-1)},t.prototype.schedule=function(t){void 0===t&&(t=this.timeout),this.cancel(),this.timeoutToken=setTimeout(this.timeoutHandler,t)},t.prototype.isScheduled=function(){return-1!==this.timeoutToken},t.prototype.onTimeout=function(){this.timeoutToken=-1,this.runner&&this.runner()}}();!function(t){function e(){return null!==t&&t.apply(this,arguments)||this}Ht(e,t),e.prototype.throttle=function(t){var e=this;return this.suspended=!0,Qt(t,function(){return e.resume()})},e.prototype.fire=function(e){return this.suspended?(this.lastEvent=e,void(this.hasLastEvent=!0)):t.prototype.fire.call(this,e)},e.prototype.resume=function(){this.suspended=!1,this.hasLastEvent&&this.fire(this.lastEvent),this.hasLastEvent=!1,this.lastEvent=void 0}}(St);var Xt=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$t="$initialize";var Zt=function(){function t(t){this._workerId=-1,this._handler=t,this._lastSentReq=0,this._pendingReplies=Object.create(null)}return t.prototype.setWorkerId=function(t){this._workerId=t},t.prototype.sendMessage=function(t,e){var n=String(++this._lastSentReq),r={c:null,e:null},i=new N.b(function(t,e,n){r.c=t,r.e=e},function(){});return this._pendingReplies[n]=r,this._send({vsWorker:this._workerId,req:n,method:t,args:e}),i},t.prototype.handleMessage=function(t){var e;try{e=JSON.parse(t)}catch(t){}e&&e.vsWorker&&(-1!==this._workerId&&e.vsWorker!==this._workerId||this._handleMessage(e))},t.prototype._handleMessage=function(t){var e=this;if(t.seq){var n=t;if(!this._pendingReplies[n.seq])return void console.warn("Got reply to unknown seq");var r=this._pendingReplies[n.seq];if(delete this._pendingReplies[n.seq],n.err){var i=n.err;return n.err.$isError&&((i=new Error).name=n.err.name,i.message=n.err.message,i.stack=n.err.stack),void r.e(i)}r.c(n.res)}else{var o=t,s=o.req;this._handler.handleMessage(o.method,o.args).then(function(t){e._send({vsWorker:e._workerId,seq:s,res:t,err:void 0})},function(t){t.detail instanceof Error&&(t.detail=_t(t.detail)),e._send({vsWorker:e._workerId,seq:s,res:void 0,err:_t(t)})})}},t.prototype._send=function(t){var e=JSON.stringify(t);this._handler.sendMessage(e)},t}(),te=(function(t){function e(e,n){var r=t.call(this)||this,i=null,o=null;r._worker=r._register(e.create("vs/base/common/worker/simpleWorker",function(t){r._protocol.handleMessage(t)},function(t){o(t)})),r._protocol=new Zt({sendMessage:function(t){r._worker.postMessage(t)},handleMessage:function(t,e){return N.b.as(null)}}),r._protocol.setWorkerId(r._worker.getId());var s=null;void 0!==self.require&&"function"==typeof self.require.getConfig?s=self.require.getConfig():void 0!==self.requirejs&&(s=self.requirejs.s.contexts._.config),r._lazyProxy=new N.b(function(t,e,n){i=t,o=e},function(){}),r._onModuleLoaded=r._protocol.sendMessage($t,[r._worker.getId(),n,s]),r._onModuleLoaded.then(function(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=a(t[n],u);i(e)},function(t){o(t),r._onError("Worker failed to load "+n,t)});var u=function(t,e){return r._request(t,e)},a=function(t,e){return function(){var n=Array.prototype.slice.call(arguments,0);return e(t,n)}};return r}Xt(e,t),e.prototype.getProxyObject=function(){return new zt(this._lazyProxy)},e.prototype._request=function(t,e){var n=this;return new N.b(function(r,i,o){n._onModuleLoaded.then(function(){n._protocol.sendMessage(t,e).then(r,i)},i)},function(){})},e.prototype._onError=function(t,e){console.error(t),console.info(e)}}(ft),function(){function t(t,e){var n=this;this._requestHandler=e,this._protocol=new Zt({sendMessage:function(e){t(e)},handleMessage:function(t,e){return n._handleMessage(t,e)}})}return t.prototype.onmessage=function(t){this._protocol.handleMessage(t)},t.prototype._handleMessage=function(t,e){if(t===$t)return this.initialize(e[0],e[1],e[2]);if(!this._requestHandler||"function"!=typeof this._requestHandler[t])return N.b.wrapError(new Error("Missing requestHandler or method: "+t));try{return N.b.as(this._requestHandler[t].apply(this._requestHandler,e))}catch(t){return N.b.wrapError(t)}},t.prototype.initialize=function(t,e,n){var r,i,o=this;if(this._protocol.setWorkerId(t),this._requestHandler){var s=[];for(var u in this._requestHandler)"function"==typeof this._requestHandler[u]&&s.push(u);return N.b.as(s)}n&&(void 0!==n.baseUrl&&delete n.baseUrl,void 0!==n.paths&&void 0!==n.paths.vs&&delete n.paths.vs,n.catchError=!0,self.require.config(n));var a=new N.b(function(t,e,n){r=t,i=e});return self.require([e],function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[0];o._requestHandler=n.create();var i=[];for(var s in o._requestHandler)"function"==typeof o._requestHandler[s]&&i.push(s);r(i)},i),a},t}());n.d(e,"initialize",function(){return ne});var ee=!1;function ne(t){if(!ee){ee=!0;var e=new Bt(t),n=new te(function(t){self.postMessage(t)},e);self.onmessage=function(t){n.onmessage(t.data)}}}self.onmessage=function(t){ee||ne(null)}},function(t,e){function n(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}n.keys=function(){return[]},n.resolve=n,t.exports=n,n.id=5}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,