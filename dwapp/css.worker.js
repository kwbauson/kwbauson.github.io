!function(e){this.webpackChunk=function(t,i){for(var r in i)e[r]=i[r];for(;t.length;)n[t.pop()]=1};var t={},n={0:1};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=4)}([function(e,t,n){"use strict";(function(e,i){var r;n.d(t,"a",function(){return o}),n.d(t,"b",function(){return s}),function(){var t=Object.create(null);t["WinJS/Core/_WinJS"]={};var n=function(e,n,i){var r={},o=!1,s=n.map(function(e){return"exports"===e?(o=!0,r):t[e]}),a=i.apply({},s);t[e]=o?r:a};n("WinJS/Core/_Global",[],function(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:void 0!==e?e:{}}),n("WinJS/Core/_BaseCoreUtils",["WinJS/Core/_Global"],function(e){var t=null;return{hasWinRT:!!e.Windows,markSupportedForProcessing:function(e){return e.supportedForProcessing=!0,e},_setImmediate:function(n){null===t&&(t=e.setImmediate?e.setImmediate.bind(e):void 0!==i&&"function"==typeof i.nextTick?i.nextTick.bind(i):e.setTimeout.bind(e)),t(n)}}}),n("WinJS/Core/_WriteProfilerMark",["WinJS/Core/_Global"],function(e){return e.msWriteProfilerMark||function(){}}),n("WinJS/Core/_Base",["WinJS/Core/_WinJS","WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_WriteProfilerMark"],function(e,t,n,i){function r(e,t,n){var i,r,o,s=Object.keys(t),a=Array.isArray(e);for(r=0,o=s.length;r<o;r++){var l=s[r],c=95!==l.charCodeAt(0),h=t[l];!h||"object"!=typeof h||void 0===h.value&&"function"!=typeof h.get&&"function"!=typeof h.set?c?a?e.forEach(function(e){e[l]=h}):e[l]=h:(i=i||{})[l]={value:h,enumerable:c,configurable:!0,writable:!0}:(void 0===h.enumerable&&(h.enumerable=c),n&&h.setName&&"function"==typeof h.setName&&h.setName(n+"."+l),(i=i||{})[l]=h)}i&&(a?e.forEach(function(e){Object.defineProperties(e,i)}):Object.defineProperties(e,i))}return function(){var n=e;function o(n,i){var r=n||{};if(i){var o=i.split(".");r===t&&"WinJS"===o[0]&&(r=e,o.splice(0,1));for(var s=0,a=o.length;s<a;s++){var l=o[s];r[l]||Object.defineProperty(r,l,{value:{},writable:!1,enumerable:!0,configurable:!0}),r=r[l]}}return r}function s(e,t,n){var i=o(e,t);return n&&r(i,n,t||"<ANONYMOUS>"),i}n.Namespace||(n.Namespace=Object.create(Object.prototype));var a={uninitialized:1,working:2,initialized:3};Object.defineProperties(n.Namespace,{defineWithParent:{value:s,writable:!0,enumerable:!0,configurable:!0},define:{value:function(e,n){return s(t,e,n)},writable:!0,enumerable:!0,configurable:!0},_lazy:{value:function(e){var t,n,r=a.uninitialized;return{setName:function(e){t=e},get:function(){switch(r){case a.initialized:return n;case a.uninitialized:r=a.working;try{i("WinJS.Namespace._lazy:"+t+",StartTM"),n=e()}finally{i("WinJS.Namespace._lazy:"+t+",StopTM"),r=a.uninitialized}return e=null,r=a.initialized,n;case a.working:throw"Illegal: reentrancy on initialization";default:throw"Illegal"}},set:function(e){switch(r){case a.working:throw"Illegal: reentrancy on initialization";default:r=a.initialized,n=e}},enumerable:!0,configurable:!0}},writable:!0,enumerable:!0,configurable:!0},_moduleDefine:{value:function(e,n,i){var s=[e],a=null;return n&&(a=o(t,n),s.push(a)),r(s,i,n||"<ANONYMOUS>"),a},writable:!0,enumerable:!0,configurable:!0}})}(),function(){function t(e,t,i){return e=e||function(){},n.markSupportedForProcessing(e),t&&r(e.prototype,t),i&&r(e,i),e}e.Namespace.define("WinJS.Class",{define:t,derive:function(e,i,o,s){if(e){i=i||function(){};var a=e.prototype;return i.prototype=Object.create(a),n.markSupportedForProcessing(i),Object.defineProperty(i.prototype,"constructor",{value:i,writable:!0,configurable:!0,enumerable:!0}),o&&r(i.prototype,o),s&&r(i,s),i}return t(i,o,s)},mix:function(e){var t,n;for(e=e||function(){},t=1,n=arguments.length;t<n;t++)r(e.prototype,arguments[t]);return e}})}(),{Namespace:e.Namespace,Class:e.Class}}),n("WinJS/Core/_ErrorFromName",["WinJS/Core/_Base"],function(e){var t=e.Class.derive(Error,function(e,t){this.name=e,this.message=t||e},{},{supportedForProcessing:!1});return e.Namespace.define("WinJS",{ErrorFromName:t}),t}),n("WinJS/Core/_Events",["exports","WinJS/Core/_Base"],function(e,t){function n(e){var t="_on"+e+"state";return{get:function(){var e=this[t];return e&&e.userHandler},set:function(n){var i=this[t];n?(i||(i={wrapper:function(e){return i.userHandler(e)},userHandler:n},Object.defineProperty(this,t,{value:i,enumerable:!1,writable:!0,configurable:!0}),this.addEventListener(e,i.wrapper,!1)),i.userHandler=n):i&&(this.removeEventListener(e,i.wrapper,!1),this[t]=null)},enumerable:!0}}var i=t.Class.define(function(e,t,n){this.detail=t,this.target=n,this.timeStamp=Date.now(),this.type=e},{bubbles:{value:!1,writable:!1},cancelable:{value:!1,writable:!1},currentTarget:{get:function(){return this.target}},defaultPrevented:{get:function(){return this._preventDefaultCalled}},trusted:{value:!1,writable:!1},eventPhase:{value:0,writable:!1},target:null,timeStamp:null,type:null,preventDefault:function(){this._preventDefaultCalled=!0},stopImmediatePropagation:function(){this._stopImmediatePropagationCalled=!0},stopPropagation:function(){}},{supportedForProcessing:!1}),r={_listeners:null,addEventListener:function(e,t,n){n=n||!1,this._listeners=this._listeners||{};for(var i=this._listeners[e]=this._listeners[e]||[],r=0,o=i.length;r<o;r++){var s=i[r];if(s.useCapture===n&&s.listener===t)return}i.push({listener:t,useCapture:n})},dispatchEvent:function(e,t){var n=this._listeners&&this._listeners[e];if(n){for(var r=new i(e,t,this),o=0,s=(n=n.slice(0,n.length)).length;o<s&&!r._stopImmediatePropagationCalled;o++)n[o].listener(r);return r.defaultPrevented||!1}return!1},removeEventListener:function(e,t,n){n=n||!1;var i=this._listeners&&this._listeners[e];if(i)for(var r=0,o=i.length;r<o;r++){var s=i[r];if(s.listener===t&&s.useCapture===n){i.splice(r,1),0===i.length&&delete this._listeners[e];break}}}};t.Namespace._moduleDefine(e,"WinJS.Utilities",{_createEventProperty:n,createEventProperties:function(){for(var e={},t=0,i=arguments.length;t<i;t++){var r=arguments[t];e["on"+r]=n(r)}return e},eventMixin:r})}),n("WinJS/Core/_Trace",["WinJS/Core/_Global"],function(e){function t(e){return e}return{_traceAsyncOperationStarting:e.Debug&&e.Debug.msTraceAsyncOperationStarting&&e.Debug.msTraceAsyncOperationStarting.bind(e.Debug)||t,_traceAsyncOperationCompleted:e.Debug&&e.Debug.msTraceAsyncOperationCompleted&&e.Debug.msTraceAsyncOperationCompleted.bind(e.Debug)||t,_traceAsyncCallbackStarting:e.Debug&&e.Debug.msTraceAsyncCallbackStarting&&e.Debug.msTraceAsyncCallbackStarting.bind(e.Debug)||t,_traceAsyncCallbackCompleted:e.Debug&&e.Debug.msTraceAsyncCallbackCompleted&&e.Debug.msTraceAsyncCallbackCompleted.bind(e.Debug)||t}}),n("WinJS/Promise/_StateMachine",["WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_Base","WinJS/Core/_ErrorFromName","WinJS/Core/_Events","WinJS/Core/_Trace"],function(e,t,n,i,r,o){e.Debug&&(e.Debug.setNonUserCodeExceptions=!0);var s=new(n.Class.mix(n.Class.define(null,{},{supportedForProcessing:!1}),r.eventMixin));s._listeners={};var a="error",l="Canceled",c=!1,h={promise:1,thenPromise:2,errorPromise:4,exceptionPromise:8,completePromise:16};h.all=h.promise|h.thenPromise|h.errorPromise|h.exceptionPromise|h.completePromise;var d,u,m,p,f,g,b,y,v,w,x=1;function k(){}d={name:"created",enter:function(e){e._setState(u)},cancel:k,done:k,then:k,_completed:k,_error:k,_notify:k,_progress:k,_setCompleteValue:k,_setErrorValue:k},u={name:"working",enter:k,cancel:function(e){e._setState(f)},done:P,then:j,_completed:S,_error:T,_notify:k,_progress:L,_setCompleteValue:U,_setErrorValue:M},m={name:"waiting",enter:function(e){var t=e._value;if(t instanceof B&&t._state!==w&&t._state!==y)R(t,{promise:e});else{var n=function(i){t._errorId?e._chainedError(i,t):(D(e,i,F,t,n),e._error(i))};n.handlesOnError=!0,t.then(e._completed.bind(e),n,e._progress.bind(e))}},cancel:function(e){e._setState(p)},done:P,then:j,_completed:S,_error:T,_notify:k,_progress:L,_setCompleteValue:U,_setErrorValue:M},p={name:"waiting_canceled",enter:function(e){e._setState(g);var t=e._value;t.cancel&&t.cancel()},cancel:k,done:P,then:j,_completed:S,_error:T,_notify:k,_progress:L,_setCompleteValue:U,_setErrorValue:M},f={name:"canceled",enter:function(e){e._setState(g),e._cancelAction()},cancel:k,done:P,then:j,_completed:S,_error:T,_notify:k,_progress:L,_setCompleteValue:U,_setErrorValue:M},g={name:"canceling",enter:function(e){var t=new Error(l);t.name=t.message,e._value=t,e._setState(v)},cancel:k,done:k,then:k,_completed:k,_error:k,_notify:k,_progress:k,_setCompleteValue:k,_setErrorValue:k},b={name:"complete_notify",enter:function(e){if(e.done=W.prototype.done,e.then=W.prototype.then,e._listeners)for(var t,n=[e];n.length;)(t=n.shift())._state._notify(t,n);e._setState(y)},cancel:k,done:null,then:null,_completed:k,_error:k,_notify:O,_progress:k,_setCompleteValue:k,_setErrorValue:k},y={name:"success",enter:function(e){e.done=W.prototype.done,e.then=W.prototype.then,e._cleanupAction()},cancel:k,done:null,then:null,_completed:k,_error:k,_notify:O,_progress:k,_setCompleteValue:k,_setErrorValue:k},v={name:"error_notify",enter:function(e){if(e.done=K.prototype.done,e.then=K.prototype.then,e._listeners)for(var t,n=[e];n.length;)(t=n.shift())._state._notify(t,n);e._setState(w)},cancel:k,done:null,then:null,_completed:k,_error:k,_notify:N,_progress:k,_setCompleteValue:k,_setErrorValue:k},w={name:"error",enter:function(e){e.done=K.prototype.done,e.then=K.prototype.then,e._cleanupAction()},cancel:k,done:null,then:null,_completed:k,_error:k,_notify:N,_progress:k,_setCompleteValue:k,_setErrorValue:k};var C=n.Class.define(null,{_listeners:null,_nextState:null,_state:null,_value:null,cancel:function(){this._state.cancel(this),this._run()},done:function(e,t,n){this._state.done(this,e,t,n)},then:function(e,t,n){return this._state.then(this,e,t,n)},_chainedError:function(e,t){var n=this._state._error(this,e,E,t);return this._run(),n},_completed:function(e){var t=this._state._completed(this,e);return this._run(),t},_error:function(e){var t=this._state._error(this,e,I);return this._run(),t},_progress:function(e){this._state._progress(this,e)},_setState:function(e){this._nextState=e},_setCompleteValue:function(e){this._state._setCompleteValue(this,e),this._run()},_setChainedErrorValue:function(e,t){var n=this._state._setErrorValue(this,e,E,t);return this._run(),n},_setExceptionValue:function(e){var t=this._state._setErrorValue(this,e,A);return this._run(),t},_run:function(){for(;this._nextState;)this._state=this._nextState,this._nextState=null,this._state.enter(this)}},{supportedForProcessing:!1});function S(e,t){var n;n=t&&"object"==typeof t&&"function"==typeof t.then?m:b,e._value=t,e._setState(n)}function _(e,t,n,i,r,o){return{exception:e,error:t,promise:n,handler:o,id:i,parent:r}}function F(e,t,n,i){var r=n._isException,o=n._errorId;return _(r?t:null,r?null:t,e,o,n,i)}function E(e,t,n){var i=n._isException,r=n._errorId;return z(e,r,i),_(i?t:null,i?null:t,e,r,n)}function I(e,t){var n=++x;return z(e,n),_(null,t,e,n)}function A(e,t){var n=++x;return z(e,n,!0),_(t,null,e,n)}function P(e,t,n,i){R(e,{c:t,e:n,p:i,asyncOpID:o._traceAsyncOperationStarting("WinJS.Promise.done")})}function T(e,t,n,i){e._value=t,D(e,t,n,i),e._setState(v)}function O(t,n){var i,r,s=t._value,a=t._listeners;if(a)for(t._listeners=null,i=0,r=Array.isArray(a)?a.length:1;i<r;i++){var l=1===r?a:a[i],c=l.c,h=l.promise;if(o._traceAsyncOperationCompleted(l.asyncOpID,e.Debug&&e.Debug.MS_ASYNC_OP_STATUS_SUCCESS),h){o._traceAsyncCallbackStarting(l.asyncOpID);try{h._setCompleteValue(c?c(s):s)}catch(e){h._setExceptionValue(e)}finally{o._traceAsyncCallbackCompleted()}h._state!==m&&h._listeners&&n.push(h)}else W.prototype.done.call(t,c)}}function N(t,n){var i,r,s=t._value,a=t._listeners;if(a)for(t._listeners=null,i=0,r=Array.isArray(a)?a.length:1;i<r;i++){var c=1===r?a:a[i],h=c.e,d=c.promise,u=e.Debug&&(s&&s.name===l?e.Debug.MS_ASYNC_OP_STATUS_CANCELED:e.Debug.MS_ASYNC_OP_STATUS_ERROR);if(o._traceAsyncOperationCompleted(c.asyncOpID,u),d){var p=!1;try{h?(o._traceAsyncCallbackStarting(c.asyncOpID),p=!0,h.handlesOnError||D(d,s,F,t,h),d._setCompleteValue(h(s))):d._setChainedErrorValue(s,t)}catch(e){d._setExceptionValue(e)}finally{p&&o._traceAsyncCallbackCompleted()}d._state!==m&&d._listeners&&n.push(d)}else K.prototype.done.call(t,null,h)}}function D(e,t,n,i,r){if(s._listeners[a]){if(t instanceof Error&&t.message===l)return;s.dispatchEvent(a,n(e,t,i,r))}}function L(e,t){var n,i,r=e._listeners;if(r)for(n=0,i=Array.isArray(r)?r.length:1;n<i;n++){var o=1===i?r:r[n],s=o.p;if(s)try{s(t)}catch(e){}o.c||o.e||!o.promise||o.promise._progress(t)}}function R(e,t){var n=e._listeners;n?(n=Array.isArray(n)?n:[n]).push(t):n=t,e._listeners=n}function z(e,t,n){e._isException=n||!1,e._errorId=t}function M(e,t,n,i){e._value=t,D(e,t,n,i),e._setState(w)}function U(e,t){var n;n=t&&"object"==typeof t&&"function"==typeof t.then?m:y,e._value=t,e._setState(n)}function j(e,t,n,i){var r=new B(e);return R(e,{promise:r,c:t,e:n,p:i,asyncOpID:o._traceAsyncOperationStarting("WinJS.Promise.then")}),r}var V,B=n.Class.derive(C,function(e){c&&(!0===c||c&h.thenPromise)&&(this._stack=$._getStack()),this._creator=e,this._setState(d),this._run()},{_creator:null,_cancelAction:function(){this._creator&&this._creator.cancel()},_cleanupAction:function(){this._creator=null}},{supportedForProcessing:!1}),K=n.Class.define(function(e){c&&(!0===c||c&h.errorPromise)&&(this._stack=$._getStack()),this._value=e,D(this,e,I)},{cancel:function(){},done:function(e,t){var n=this._value;if(t)try{t.handlesOnError||D(null,n,F,this,t);var i=t(n);return void(i&&"object"==typeof i&&"function"==typeof i.done&&i.done())}catch(e){n=e}n instanceof Error&&n.message===l||$._doneHandler(n)},then:function(e,t){if(!t)return this;var n,i=this._value;try{t.handlesOnError||D(null,i,F,this,t),n=new W(t(i))}catch(e){n=e===i?this:new q(e)}return n}},{supportedForProcessing:!1}),q=n.Class.derive(K,function(e){c&&(!0===c||c&h.exceptionPromise)&&(this._stack=$._getStack()),this._value=e,D(this,e,A)},{},{supportedForProcessing:!1}),W=n.Class.define(function(e){if(c&&(!0===c||c&h.completePromise)&&(this._stack=$._getStack()),e&&"object"==typeof e&&"function"==typeof e.then){var t=new B(null);return t._setCompleteValue(e),t}this._value=e},{cancel:function(){},done:function(e){if(e)try{var t=e(this._value);t&&"object"==typeof t&&"function"==typeof t.done&&t.done()}catch(e){$._doneHandler(e)}},then:function(e){try{var t=e?e(this._value):this._value;return t===this._value?this:new W(t)}catch(e){return new q(e)}}},{supportedForProcessing:!1});var $=n.Class.derive(C,function(e,t){c&&(!0===c||c&h.promise)&&(this._stack=$._getStack()),this._oncancel=t,this._setState(d),this._run();try{e(this._completed.bind(this),this._error.bind(this),this._progress.bind(this))}catch(e){this._setExceptionValue(e)}},{_oncancel:null,_cancelAction:function(){try{if(!this._oncancel)throw new Error("Promise did not implement oncancel");this._oncancel()}catch(e){e.message,e.stack;s.dispatchEvent("error",e)}},_cleanupAction:function(){this._oncancel=null}},{addEventListener:function(e,t,n){s.addEventListener(e,t,n)},any:function(e){return new $(function(t,n){var i=Object.keys(e);0===i.length&&t();var r=0;i.forEach(function(o){$.as(e[o]).then(function(){t({key:o,value:e[o]})},function(s){s instanceof Error&&s.name===l?++r===i.length&&t($.cancel):n({key:o,value:e[o]})})})},function(){Object.keys(e).forEach(function(t){var n=$.as(e[t]);"function"==typeof n.cancel&&n.cancel()})})},as:function(e){return e&&"object"==typeof e&&"function"==typeof e.then?e:new W(e)},cancel:{get:function(){return V=V||new K(new i(l))}},dispatchEvent:function(e,t){return s.dispatchEvent(e,t)},is:function(e){return e&&"object"==typeof e&&"function"==typeof e.then},join:function(e){return new $(function(t,n,i){var r=Object.keys(e),o=Array.isArray(e)?[]:{},s=Array.isArray(e)?[]:{},a=0,c=r.length,h=function(e){if(0==--c){var a=Object.keys(o).length;if(0===a)t(s);else{var h=0;r.forEach(function(e){var t=o[e];t instanceof Error&&t.name===l&&h++}),h===a?t($.cancel):n(o)}}else i({Key:e,Done:!0})};r.forEach(function(t){var n=e[t];void 0===n?a++:$.then(n,function(e){s[t]=e,h(t)},function(e){o[t]=e,h(t)})}),0!==(c-=a)||t(s)},function(){Object.keys(e).forEach(function(t){var n=$.as(e[t]);"function"==typeof n.cancel&&n.cancel()})})},removeEventListener:function(e,t,n){s.removeEventListener(e,t,n)},supportedForProcessing:!1,then:function(e,t,n,i){return $.as(e).then(t,n,i)},thenEach:function(e,t,n,i){var r=Array.isArray(e)?[]:{};return Object.keys(e).forEach(function(o){r[o]=$.as(e[o]).then(t,n,i)}),$.join(r)},timeout:function(n,i){var r,o,s=(r=n,new $(function(n){r?o=e.setTimeout(n,r):t._setImmediate(n)},function(){o&&e.clearTimeout(o)}));return i?function(e,t){var n=function(){e.cancel()};return e.then(function(){t.cancel()}),t.then(n,n),t}(s,i):s},wrap:function(e){return new W(e)},wrapError:function(e){return new K(e)},_veryExpensiveTagWithStack:{get:function(){return c},set:function(e){c=e}},_veryExpensiveTagWithStack_tag:h,_getStack:function(){if(e.Debug&&e.Debug.debuggerEnabled)try{throw new Error}catch(e){return e.stack}},_cancelBlocker:function(e,t){if(!$.is(e))return $.wrap(e);var n,i,r=new $(function(e,t){n=e,i=t},function(){n=null,i=null,t&&t()});return e.then(function(e){n&&n(e)},function(e){i&&i(e)}),r}});return Object.defineProperties($,r.createEventProperties(a)),$._doneHandler=function(e){t._setImmediate(function(){throw e})},{PromiseStateMachine:C,Promise:$,state_created:d}}),n("WinJS/Promise",["WinJS/Core/_Base","WinJS/Promise/_StateMachine"],function(e,t){return e.Namespace.define("WinJS",{Promise:t.Promise}),t.Promise}),(r=t["WinJS/Core/_WinJS"]).TPromise=r.Promise,r.PPromise=r.Promise}();var o=r.Promise,s=r.TPromise;r.PPromise}).call(this,n(2),n(3))},function(e,t,n){"use strict";(function(e,i){n.d(t,"c",function(){return p}),n.d(t,"b",function(){return f}),n.d(t,"a",function(){return g});var r,o=!1,s=!1,a=!1,l=!1,c=!1;if("object"==typeof e&&"function"==typeof e.nextTick&&"string"==typeof e.platform){o="win32"===e.platform,s="darwin"===e.platform,a="linux"===e.platform;var h=e.env.VSCODE_NLS_CONFIG;if(h)try{var d=JSON.parse(h),u=d.availableLanguages["*"];d.locale,u||"en",d._translationsConfigFile}catch(e){}l=!0}else if("object"==typeof navigator){var m=navigator.userAgent;o=m.indexOf("Windows")>=0,s=m.indexOf("Macintosh")>=0,a=m.indexOf("Linux")>=0,c=!0,navigator.language}!function(e){e[e.Web=0]="Web",e[e.Mac=1]="Mac",e[e.Linux=2]="Linux",e[e.Windows=3]="Windows"}(r||(r={}));r.Web;l&&(s?r.Mac:o?r.Windows:a&&r.Linux);var p=o,f=c;var g="object"==typeof self?self:"object"==typeof i?i:{}}).call(this,n(3),n(2))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(e){i=s}}();var l,c=[],h=!1,d=-1;function u(){h&&l&&(h=!1,l.length?c=l.concat(c):d=-1,c.length&&m())}function m(){if(!h){var e=a(u);h=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,h=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function f(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||h||a(m)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var i,r=n(1),o=(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});function s(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}function a(e){return encodeURIComponent(e).replace(/[!'()*]/g,s)}function l(e){return e.replace(/[#?]/,s)}var c=/^\w[\w\d+.-]*$/,h=/^\//,d=/^\/\//;var u="",m="/",p=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/,f=/^\/[a-zA-Z]:/,g=/^(\/)?([A-Z]:)/,b=/^[a-zA-Z]:/,y=function(){function e(e,t,n,i,r){"object"==typeof e?(this.scheme=e.scheme||u,this.authority=e.authority||u,this.path=e.path||u,this.query=e.query||u,this.fragment=e.fragment||u):(this.scheme=e||u,this.authority=t||u,this.path=n||u,this.query=i||u,this.fragment=r||u,function(e){if(e.scheme&&!c.test(e.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(e.path)if(e.authority){if(!h.test(e.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(d.test(e.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}(this))}return e.isUri=function(t){return t instanceof e||!!t&&("string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme)},Object.defineProperty(e.prototype,"fsPath",{get:function(){return x(this)},enumerable:!0,configurable:!0}),e.prototype.with=function(e){if(!e)return this;var t=e.scheme,n=e.authority,i=e.path,r=e.query,o=e.fragment;return void 0===t?t=this.scheme:null===t&&(t=u),void 0===n?n=this.authority:null===n&&(n=u),void 0===i?i=this.path:null===i&&(i=u),void 0===r?r=this.query:null===r&&(r=u),void 0===o?o=this.fragment:null===o&&(o=u),t===this.scheme&&n===this.authority&&i===this.path&&r===this.query&&o===this.fragment?this:new w(t,n,i,r,o)},e.parse=function(e){var t=p.exec(e);return t?new w(t[2]||u,decodeURIComponent(t[4]||u),decodeURIComponent(t[5]||u),decodeURIComponent(t[7]||u),decodeURIComponent(t[9]||u)):new w(u,u,u,u,u)},e.file=function(e){var t=u;if(r.c&&(e=e.replace(/\\/g,m)),e[0]===m&&e[1]===m){var n=e.indexOf(m,2);-1===n?(t=e.substring(2),e=m):(t=e.substring(2,n),e=e.substring(n)||m)}return b.test(e)?e=m+e:e[0]!==m&&(e=m+e),new w("file",t,e,u,u)},e.from=function(e){return new w(e.scheme,e.authority,e.path,e.query,e.fragment)},e.prototype.toString=function(e){return void 0===e&&(e=!1),k(this,e)},e.prototype.toJSON=function(){var e={$mid:1,fsPath:this.fsPath,external:this.toString()};return this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e},e.revive=function(t){if(t){if(t instanceof e)return t;var n=new w(t);return n._fsPath=t.fsPath,n._formatted=t.external,n}return t},e}(),v=y,w=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._formatted=null,t._fsPath=null,t}return o(t,e),Object.defineProperty(t.prototype,"fsPath",{get:function(){return this._fsPath||(this._fsPath=x(this)),this._fsPath},enumerable:!0,configurable:!0}),t.prototype.toString=function(e){return void 0===e&&(e=!1),e?k(this,!0):(this._formatted||(this._formatted=k(this,!1)),this._formatted)},t}(y);function x(e){var t;return t=e.authority&&e.path&&"file"===e.scheme?"//"+e.authority+e.path:f.test(e.path)?e.path[1].toLowerCase()+e.path.substr(2):e.path,r.c&&(t=t.replace(/\//g,"\\")),t}function k(e,t){var n=t?l:a,i=[],r=e.scheme,o=e.authority,s=e.path,c=e.query,h=e.fragment;if(r&&i.push(r,":"),(o||"file"===r)&&i.push("//"),o){if(-1!==(b=o.indexOf("@"))){var d=o.substr(0,b);o=o.substr(b+1),-1===(b=d.indexOf(":"))?i.push(n(d)):i.push(n(d.substr(0,b)),":",n(d.substr(b+1))),i.push("@")}-1===(b=(o=o.toLowerCase()).indexOf(":"))?i.push(n(o)):i.push(n(o.substr(0,b)),o.substr(b))}if(s){var p=g.exec(s);p&&(s=p[1]?"/"+p[2].toLowerCase()+s.substr(3):p[2].toLowerCase()+s.substr(2));for(var f=0;;){var b;if(-1===(b=s.indexOf(m,f))){i.push(n(s.substring(f)));break}i.push(n(s.substring(f,b)),m),f=b+1}}return c&&i.push("?",n(c)),h&&i.push("#",n(h)),i.join(u)}var C=n(0),S=function(){function e(e,t){this.lineNumber=e,this.column=t}return e.prototype.equals=function(t){return e.equals(this,t)},e.equals=function(e,t){return!e&&!t||!!e&&!!t&&e.lineNumber===t.lineNumber&&e.column===t.column},e.prototype.isBefore=function(t){return e.isBefore(this,t)},e.isBefore=function(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<t.column},e.prototype.isBeforeOrEqual=function(t){return e.isBeforeOrEqual(this,t)},e.isBeforeOrEqual=function(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<=t.column},e.compare=function(e,t){var n=0|e.lineNumber,i=0|t.lineNumber;return n===i?(0|e.column)-(0|t.column):n-i},e.prototype.clone=function(){return new e(this.lineNumber,this.column)},e.prototype.toString=function(){return"("+this.lineNumber+","+this.column+")"},e.lift=function(t){return new e(t.lineNumber,t.column)},e.isIPosition=function(e){return e&&"number"==typeof e.lineNumber&&"number"==typeof e.column},e}(),_=function(){function e(e,t,n,i){e>n||e===n&&t>i?(this.startLineNumber=n,this.startColumn=i,this.endLineNumber=e,this.endColumn=t):(this.startLineNumber=e,this.startColumn=t,this.endLineNumber=n,this.endColumn=i)}return e.prototype.isEmpty=function(){return e.isEmpty(this)},e.isEmpty=function(e){return e.startLineNumber===e.endLineNumber&&e.startColumn===e.endColumn},e.prototype.containsPosition=function(t){return e.containsPosition(this,t)},e.containsPosition=function(e,t){return!(t.lineNumber<e.startLineNumber||t.lineNumber>e.endLineNumber)&&(!(t.lineNumber===e.startLineNumber&&t.column<e.startColumn)&&!(t.lineNumber===e.endLineNumber&&t.column>e.endColumn))},e.prototype.containsRange=function(t){return e.containsRange(this,t)},e.containsRange=function(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber)&&(!(t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber)&&(!(t.startLineNumber===e.startLineNumber&&t.startColumn<e.startColumn)&&!(t.endLineNumber===e.endLineNumber&&t.endColumn>e.endColumn)))},e.prototype.plusRange=function(t){return e.plusRange(this,t)},e.plusRange=function(t,n){var i,r,o,s;return n.startLineNumber<t.startLineNumber?(i=n.startLineNumber,r=n.startColumn):n.startLineNumber===t.startLineNumber?(i=n.startLineNumber,r=Math.min(n.startColumn,t.startColumn)):(i=t.startLineNumber,r=t.startColumn),n.endLineNumber>t.endLineNumber?(o=n.endLineNumber,s=n.endColumn):n.endLineNumber===t.endLineNumber?(o=n.endLineNumber,s=Math.max(n.endColumn,t.endColumn)):(o=t.endLineNumber,s=t.endColumn),new e(i,r,o,s)},e.prototype.intersectRanges=function(t){return e.intersectRanges(this,t)},e.intersectRanges=function(t,n){var i=t.startLineNumber,r=t.startColumn,o=t.endLineNumber,s=t.endColumn,a=n.startLineNumber,l=n.startColumn,c=n.endLineNumber,h=n.endColumn;return i<a?(i=a,r=l):i===a&&(r=Math.max(r,l)),o>c?(o=c,s=h):o===c&&(s=Math.min(s,h)),i>o?null:i===o&&r>s?null:new e(i,r,o,s)},e.prototype.equalsRange=function(t){return e.equalsRange(this,t)},e.equalsRange=function(e,t){return!!e&&!!t&&e.startLineNumber===t.startLineNumber&&e.startColumn===t.startColumn&&e.endLineNumber===t.endLineNumber&&e.endColumn===t.endColumn},e.prototype.getEndPosition=function(){return new S(this.endLineNumber,this.endColumn)},e.prototype.getStartPosition=function(){return new S(this.startLineNumber,this.startColumn)},e.prototype.toString=function(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"},e.prototype.setEndPosition=function(t,n){return new e(this.startLineNumber,this.startColumn,t,n)},e.prototype.setStartPosition=function(t,n){return new e(t,n,this.endLineNumber,this.endColumn)},e.prototype.collapseToStart=function(){return e.collapseToStart(this)},e.collapseToStart=function(t){return new e(t.startLineNumber,t.startColumn,t.startLineNumber,t.startColumn)},e.fromPositions=function(t,n){return void 0===n&&(n=t),new e(t.lineNumber,t.column,n.lineNumber,n.column)},e.lift=function(t){return t?new e(t.startLineNumber,t.startColumn,t.endLineNumber,t.endColumn):null},e.isIRange=function(e){return e&&"number"==typeof e.startLineNumber&&"number"==typeof e.startColumn&&"number"==typeof e.endLineNumber&&"number"==typeof e.endColumn},e.areIntersectingOrTouching=function(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<t.startColumn)&&!(t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<e.startColumn)},e.compareRangesUsingStarts=function(e,t){var n=0|e.startLineNumber,i=0|t.startLineNumber;if(n===i){var r=0|e.startColumn,o=0|t.startColumn;if(r===o){var s=0|e.endLineNumber,a=0|t.endLineNumber;return s===a?(0|e.endColumn)-(0|t.endColumn):s-a}return r-o}return n-i},e.compareRangesUsingEnds=function(e,t){return e.endLineNumber===t.endLineNumber?e.endColumn===t.endColumn?e.startLineNumber===t.startLineNumber?e.startColumn-t.startColumn:e.startLineNumber-t.startLineNumber:e.endColumn-t.endColumn:e.endLineNumber-t.endLineNumber},e.spansMultipleLines=function(e){return e.endLineNumber>e.startLineNumber},e}(),F=function(){function e(e,t,n,i){this.originalStart=e,this.originalLength=t,this.modifiedStart=n,this.modifiedLength=i}return e.prototype.getOriginalEnd=function(){return this.originalStart+this.originalLength},e.prototype.getModifiedEnd=function(){return this.modifiedStart+this.modifiedLength},e}();function E(e){return{getLength:function(){return e.length},getElementHash:function(t){return e[t]}}}function I(e,t,n){return new N(E(e),E(t)).ComputeDiff(n)}var A=function(){function e(){}return e.Assert=function(e,t){if(!e)throw new Error(t)},e}(),P=function(){function e(){}return e.Copy=function(e,t,n,i,r){for(var o=0;o<r;o++)n[i+o]=e[t+o]},e}(),T=function(){function e(){this.m_changes=[],this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE,this.m_originalCount=0,this.m_modifiedCount=0}return e.prototype.MarkNextChange=function(){(this.m_originalCount>0||this.m_modifiedCount>0)&&this.m_changes.push(new F(this.m_originalStart,this.m_originalCount,this.m_modifiedStart,this.m_modifiedCount)),this.m_originalCount=0,this.m_modifiedCount=0,this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE},e.prototype.AddOriginalElement=function(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_originalCount++},e.prototype.AddModifiedElement=function(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_modifiedCount++},e.prototype.getChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes},e.prototype.getReverseChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes.reverse(),this.m_changes},e}(),O=Object.prototype.hasOwnProperty,N=function(){function e(e,t,n){void 0===n&&(n=null),this.OriginalSequence=e,this.ModifiedSequence=t,this.ContinueProcessingPredicate=n,this.m_originalIds=[],this.m_modifiedIds=[],this.m_forwardHistory=[],this.m_reverseHistory=[],this.ComputeUniqueIdentifiers()}return e.prototype.ComputeUniqueIdentifiers=function(){var e=this.OriginalSequence.getLength(),t=this.ModifiedSequence.getLength();this.m_originalIds=new Array(e),this.m_modifiedIds=new Array(t);var n,i={},r=1;for(n=0;n<e;n++){var o=this.OriginalSequence.getElementHash(n);O.call(i,o)?this.m_originalIds[n]=i[o]:(this.m_originalIds[n]=r++,i[o]=this.m_originalIds[n])}for(n=0;n<t;n++){var s=this.ModifiedSequence.getElementHash(n);O.call(i,s)?this.m_modifiedIds[n]=i[s]:(this.m_modifiedIds[n]=r++,i[s]=this.m_modifiedIds[n])}},e.prototype.ElementsAreEqual=function(e,t){return this.m_originalIds[e]===this.m_modifiedIds[t]},e.prototype.OriginalElementsAreEqual=function(e,t){return this.m_originalIds[e]===this.m_originalIds[t]},e.prototype.ModifiedElementsAreEqual=function(e,t){return this.m_modifiedIds[e]===this.m_modifiedIds[t]},e.prototype.ComputeDiff=function(e){return this._ComputeDiff(0,this.OriginalSequence.getLength()-1,0,this.ModifiedSequence.getLength()-1,e)},e.prototype._ComputeDiff=function(e,t,n,i,r){var o=this.ComputeDiffRecursive(e,t,n,i,[!1]);return r?this.ShiftChanges(o):o},e.prototype.ComputeDiffRecursive=function(e,t,n,i,r){for(r[0]=!1;e<=t&&n<=i&&this.ElementsAreEqual(e,n);)e++,n++;for(;t>=e&&i>=n&&this.ElementsAreEqual(t,i);)t--,i--;if(e>t||n>i){var o=void 0;return n<=i?(A.Assert(e===t+1,"originalStart should only be one more than originalEnd"),o=[new F(e,0,n,i-n+1)]):e<=t?(A.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),o=[new F(e,t-e+1,n,0)]):(A.Assert(e===t+1,"originalStart should only be one more than originalEnd"),A.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),o=[]),o}var s=[0],a=[0],l=this.ComputeRecursionPoint(e,t,n,i,s,a,r),c=s[0],h=a[0];if(null!==l)return l;if(!r[0]){var d=this.ComputeDiffRecursive(e,c,n,h,r),u=[];return u=r[0]?[new F(c+1,t-(c+1)+1,h+1,i-(h+1)+1)]:this.ComputeDiffRecursive(c+1,t,h+1,i,r),this.ConcatenateChanges(d,u)}return[new F(e,t-e+1,n,i-n+1)]},e.prototype.WALKTRACE=function(e,t,n,i,r,o,s,a,l,c,h,d,u,m,p,f,g,b){var y,v,w=null,x=new T,k=t,C=n,S=u[0]-f[0]-i,_=Number.MIN_VALUE,E=this.m_forwardHistory.length-1;do{(v=S+e)===k||v<C&&l[v-1]<l[v+1]?(m=(h=l[v+1])-S-i,h<_&&x.MarkNextChange(),_=h,x.AddModifiedElement(h+1,m),S=v+1-e):(m=(h=l[v-1]+1)-S-i,h<_&&x.MarkNextChange(),_=h-1,x.AddOriginalElement(h,m+1),S=v-1-e),E>=0&&(e=(l=this.m_forwardHistory[E])[0],k=1,C=l.length-1)}while(--E>=-1);if(y=x.getReverseChanges(),b[0]){var I=u[0]+1,A=f[0]+1;if(null!==y&&y.length>0){var P=y[y.length-1];I=Math.max(I,P.getOriginalEnd()),A=Math.max(A,P.getModifiedEnd())}w=[new F(I,d-I+1,A,p-A+1)]}else{x=new T,k=o,C=s,S=u[0]-f[0]-a,_=Number.MAX_VALUE,E=g?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{(v=S+r)===k||v<C&&c[v-1]>=c[v+1]?(m=(h=c[v+1]-1)-S-a,h>_&&x.MarkNextChange(),_=h+1,x.AddOriginalElement(h+1,m+1),S=v+1-r):(m=(h=c[v-1])-S-a,h>_&&x.MarkNextChange(),_=h,x.AddModifiedElement(h+1,m+1),S=v-1-r),E>=0&&(r=(c=this.m_reverseHistory[E])[0],k=1,C=c.length-1)}while(--E>=-1);w=x.getChanges()}return this.ConcatenateChanges(y,w)},e.prototype.ComputeRecursionPoint=function(e,t,n,i,r,o,s){var a,l,c,h=0,d=0,u=0,m=0;e--,n--,r[0]=0,o[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];var p,f,g=t-e+(i-n),b=g+1,y=new Array(b),v=new Array(b),w=i-n,x=t-e,k=e-n,C=t-i,S=(x-w)%2==0;for(y[w]=e,v[x]=t,s[0]=!1,c=1;c<=g/2+1;c++){var _=0,E=0;for(h=this.ClipDiagonalBound(w-c,c,w,b),d=this.ClipDiagonalBound(w+c,c,w,b),p=h;p<=d;p+=2){for(l=(a=p===h||p<d&&y[p-1]<y[p+1]?y[p+1]:y[p-1]+1)-(p-w)-k,f=a;a<t&&l<i&&this.ElementsAreEqual(a+1,l+1);)a++,l++;if(y[p]=a,a+l>_+E&&(_=a,E=l),!S&&Math.abs(p-x)<=c-1&&a>=v[p])return r[0]=a,o[0]=l,f<=v[p]&&c<=1448?this.WALKTRACE(w,h,d,k,x,u,m,C,y,v,a,t,r,l,i,o,S,s):null}var I=(_-e+(E-n)-c)/2;if(null!==this.ContinueProcessingPredicate&&!this.ContinueProcessingPredicate(_,this.OriginalSequence,I))return s[0]=!0,r[0]=_,o[0]=E,I>0&&c<=1448?this.WALKTRACE(w,h,d,k,x,u,m,C,y,v,a,t,r,l,i,o,S,s):[new F(++e,t-e+1,++n,i-n+1)];for(u=this.ClipDiagonalBound(x-c,c,x,b),m=this.ClipDiagonalBound(x+c,c,x,b),p=u;p<=m;p+=2){for(l=(a=p===u||p<m&&v[p-1]>=v[p+1]?v[p+1]-1:v[p-1])-(p-x)-C,f=a;a>e&&l>n&&this.ElementsAreEqual(a,l);)a--,l--;if(v[p]=a,S&&Math.abs(p-w)<=c&&a<=y[p])return r[0]=a,o[0]=l,f>=y[p]&&c<=1448?this.WALKTRACE(w,h,d,k,x,u,m,C,y,v,a,t,r,l,i,o,S,s):null}if(c<=1447){var A=new Array(d-h+2);A[0]=w-h+1,P.Copy(y,h,A,1,d-h+1),this.m_forwardHistory.push(A),(A=new Array(m-u+2))[0]=x-u+1,P.Copy(v,u,A,1,m-u+1),this.m_reverseHistory.push(A)}}return this.WALKTRACE(w,h,d,k,x,u,m,C,y,v,a,t,r,l,i,o,S,s)},e.prototype.ShiftChanges=function(e){var t;do{t=!1;for(var n=0;n<e.length;n++)for(var i=e[n],r=n<e.length-1?e[n+1].originalStart:this.OriginalSequence.getLength(),o=n<e.length-1?e[n+1].modifiedStart:this.ModifiedSequence.getLength(),s=i.originalLength>0,a=i.modifiedLength>0;i.originalStart+i.originalLength<r&&i.modifiedStart+i.modifiedLength<o&&(!s||this.OriginalElementsAreEqual(i.originalStart,i.originalStart+i.originalLength))&&(!a||this.ModifiedElementsAreEqual(i.modifiedStart,i.modifiedStart+i.modifiedLength));)i.originalStart++,i.modifiedStart++;var l=new Array,c=[null];for(n=0;n<e.length;n++)n<e.length-1&&this.ChangesOverlap(e[n],e[n+1],c)?(t=!0,l.push(c[0]),n++):l.push(e[n]);e=l}while(t);for(n=e.length-1;n>=0;n--){i=e[n],r=0,o=0;if(n>0){var h=e[n-1];h.originalLength>0&&(r=h.originalStart+h.originalLength),h.modifiedLength>0&&(o=h.modifiedStart+h.modifiedLength)}s=i.originalLength>0,a=i.modifiedLength>0;for(var d=0,u=this._boundaryScore(i.originalStart,i.originalLength,i.modifiedStart,i.modifiedLength),m=1;;m++){var p=i.originalStart-m,f=i.modifiedStart-m;if(p<r||f<o)break;if(s&&!this.OriginalElementsAreEqual(p,p+i.originalLength))break;if(a&&!this.ModifiedElementsAreEqual(f,f+i.modifiedLength))break;var g=this._boundaryScore(p,i.originalLength,f,i.modifiedLength);g>u&&(u=g,d=m)}i.originalStart-=d,i.modifiedStart-=d}return e},e.prototype._OriginalIsBoundary=function(e){return e<=0||e>=this.OriginalSequence.getLength()-1||/^\s*$/.test(this.OriginalSequence.getElementHash(e))},e.prototype._OriginalRegionIsBoundary=function(e,t){if(this._OriginalIsBoundary(e)||this._OriginalIsBoundary(e-1))return!0;if(t>0){var n=e+t;if(this._OriginalIsBoundary(n-1)||this._OriginalIsBoundary(n))return!0}return!1},e.prototype._ModifiedIsBoundary=function(e){return e<=0||e>=this.ModifiedSequence.getLength()-1||/^\s*$/.test(this.ModifiedSequence.getElementHash(e))},e.prototype._ModifiedRegionIsBoundary=function(e,t){if(this._ModifiedIsBoundary(e)||this._ModifiedIsBoundary(e-1))return!0;if(t>0){var n=e+t;if(this._ModifiedIsBoundary(n-1)||this._ModifiedIsBoundary(n))return!0}return!1},e.prototype._boundaryScore=function(e,t,n,i){return(this._OriginalRegionIsBoundary(e,t)?1:0)+(this._ModifiedRegionIsBoundary(n,i)?1:0)},e.prototype.ConcatenateChanges=function(e,t){var n=[],i=null;return 0===e.length||0===t.length?t.length>0?t:e:this.ChangesOverlap(e[e.length-1],t[0],n)?(i=new Array(e.length+t.length-1),P.Copy(e,0,i,0,e.length-1),i[e.length-1]=n[0],P.Copy(t,1,i,e.length,t.length-1),i):(i=new Array(e.length+t.length),P.Copy(e,0,i,0,e.length),P.Copy(t,0,i,e.length,t.length),i)},e.prototype.ChangesOverlap=function(e,t,n){if(A.Assert(e.originalStart<=t.originalStart,"Left change is not less than or equal to right change"),A.Assert(e.modifiedStart<=t.modifiedStart,"Left change is not less than or equal to right change"),e.originalStart+e.originalLength>=t.originalStart||e.modifiedStart+e.modifiedLength>=t.modifiedStart){var i=e.originalStart,r=e.originalLength,o=e.modifiedStart,s=e.modifiedLength;return e.originalStart+e.originalLength>=t.originalStart&&(r=t.originalStart+t.originalLength-e.originalStart),e.modifiedStart+e.modifiedLength>=t.modifiedStart&&(s=t.modifiedStart+t.modifiedLength-e.modifiedStart),n[0]=new F(i,r,o,s),!0}return n[0]=null,!1},e.prototype.ClipDiagonalBound=function(e,t,n,i){if(e>=0&&e<i)return e;var r=t%2==0;return e<0?r===(n%2==0)?0:1:r===((i-n-1)%2==0)?i-1:i-2},e}(),D=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();var L,R=function(){function e(){this._value="",this._pos=0}return e.prototype.reset=function(e){return this._value=e,this._pos=0,this},e.prototype.next=function(){return this._pos+=1,this},e.prototype.join=function(e){return e.join("")},e.prototype.hasNext=function(){return this._pos<this._value.length-1},e.prototype.cmp=function(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)},e.prototype.value=function(){return this._value[this._pos]},e}(),z=function(){function e(){}return e.prototype.reset=function(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()},e.prototype.hasNext=function(){return this._to<this._value.length},e.prototype.join=function(e){return e.join("/")},e.prototype.next=function(){this._from=this._to;for(var t=!0;this._to<this._value.length;this._to++){var n=this._value.charCodeAt(this._to);if(n===e._fwd||n===e._bwd){if(!t)break;this._from++}else t=!1}return this},e.prototype.cmp=function(e){for(var t=0,n=e.length,i=this._from;t<n&&i<this._to;){var r=e.charCodeAt(t)-this._value.charCodeAt(i);if(0!==r)return r;t+=1,i+=1}return n===this._to-this._from?0:t<n?-1:1},e.prototype.value=function(){return this._value.substring(this._from,this._to)},e._fwd="/".charCodeAt(0),e._bwd="\\".charCodeAt(0),e}(),M=function(){function e(){}return e.prototype.isEmpty=function(){return!(this.left||this.mid||this.right||this.element)},e}();(function(){function e(e){this._iter=e}e.forPaths=function(){return new e(new z)},e.forStrings=function(){return new e(new R)},e.prototype.clear=function(){this._root=void 0},e.prototype.set=function(e,t){var n,i=this._iter.reset(e);for(this._root||(this._root=new M,this._root.str=i.value()),n=this._root;;){var r=i.cmp(n.str);if(r>0)n.left||(n.left=new M,n.left.str=i.value()),n=n.left;else if(r<0)n.right||(n.right=new M,n.right.str=i.value()),n=n.right;else{if(!i.hasNext())break;i.next(),n.mid||(n.mid=new M,n.mid.str=i.value()),n=n.mid}}var o=n.element;return n.element=t,o},e.prototype.get=function(e){for(var t=this._iter.reset(e),n=this._root;n;){var i=t.cmp(n.str);if(i>0)n=n.left;else if(i<0)n=n.right;else{if(!t.hasNext())break;t.next(),n=n.mid}}return n?n.element:void 0},e.prototype.delete=function(e){for(var t=this._iter.reset(e),n=[],i=this._root;i;){var r=t.cmp(i.str);if(r>0)n.push([1,i]),i=i.left;else if(r<0)n.push([-1,i]),i=i.right;else{if(!t.hasNext()){for(i.element=void 0;n.length>0&&i.isEmpty();){var o=n.pop(),s=o[0],a=o[1];switch(s){case 1:a.left=void 0;break;case 0:a.mid=void 0;break;case-1:a.right=void 0}i=a}break}t.next(),n.push([0,i]),i=i.mid}}},e.prototype.findSubstr=function(e){for(var t,n=this._iter.reset(e),i=this._root;i;){var r=n.cmp(i.str);if(r>0)i=i.left;else if(r<0)i=i.right;else{if(!n.hasNext())break;n.next(),t=i.element||t,i=i.mid}}return i&&i.element||t},e.prototype.findSuperstr=function(t){for(var n=this._iter.reset(t),i=this._root;i;){var r=n.cmp(i.str);if(r>0)i=i.left;else if(r<0)i=i.right;else{if(!n.hasNext()){if(!i.mid)return;var o=new e(this._iter);return o._root=i.mid,o}n.next(),i=i.mid}}},e.prototype.forEach=function(e){this._forEach(this._root,[],e)},e.prototype._forEach=function(e,t,n){e&&(this._forEach(e.left,t,n),t.push(e.str),e.element&&n(e.element,this._iter.join(t)),this._forEach(e.mid,t,n),t.pop(),this._forEach(e.right,t,n))}})(),function(){function e(){this.map=new Map,this.ignoreCase=!1}e.prototype.set=function(e,t){this.map.set(this.toKey(e),t)},e.prototype.get=function(e){return this.map.get(this.toKey(e))},e.prototype.has=function(e){return this.map.has(this.toKey(e))},Object.defineProperty(e.prototype,"size",{get:function(){return this.map.size},enumerable:!0,configurable:!0}),e.prototype.clear=function(){this.map.clear()},e.prototype.delete=function(e){return this.map.delete(this.toKey(e))},e.prototype.forEach=function(e){this.map.forEach(e)},e.prototype.values=function(){return e=this.map,t=[],e.forEach(function(e){return t.push(e)}),t;var e,t},e.prototype.toKey=function(e){var t=e.toString();return this.ignoreCase&&(t=t.toLowerCase()),t},e.prototype.keys=function(){return(e=this.map,t=[],e.forEach(function(e,n){return t.push(n)}),t).map(v.parse);var e,t}}();!function(e){e[e.None=0]="None",e[e.AsOld=1]="AsOld",e[e.AsNew=2]="AsNew"}(L||(L={}));var U=function(e){function t(t,n){void 0===n&&(n=1);var i=e.call(this)||this;return i._limit=t,i._ratio=Math.min(Math.max(0,n),1),i}return D(t,e),Object.defineProperty(t.prototype,"limit",{get:function(){return this._limit},set:function(e){this._limit=e,this.checkTrim()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ratio",{get:function(){return this._ratio},set:function(e){this._ratio=Math.min(Math.max(0,e),1),this.checkTrim()},enumerable:!0,configurable:!0}),t.prototype.get=function(t){return e.prototype.get.call(this,t,L.AsNew)},t.prototype.peek=function(t){return e.prototype.get.call(this,t,L.None)},t.prototype.set=function(t,n){e.prototype.set.call(this,t,n,L.AsNew),this.checkTrim()},t.prototype.checkTrim=function(){this.size>this._limit&&this.trimOld(Math.round(this._limit*this._ratio))},t}(function(){function e(){this._map=new Map,this._head=void 0,this._tail=void 0,this._size=0}return e.prototype.clear=function(){this._map.clear(),this._head=void 0,this._tail=void 0,this._size=0},e.prototype.isEmpty=function(){return!this._head&&!this._tail},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.get=function(e,t){void 0===t&&(t=L.None);var n=this._map.get(e);if(n)return t!==L.None&&this.touch(n,t),n.value},e.prototype.set=function(e,t,n){void 0===n&&(n=L.None);var i=this._map.get(e);if(i)i.value=t,n!==L.None&&this.touch(i,n);else{switch(i={key:e,value:t,next:void 0,previous:void 0},n){case L.None:this.addItemLast(i);break;case L.AsOld:this.addItemFirst(i);break;case L.AsNew:default:this.addItemLast(i)}this._map.set(e,i),this._size++}},e.prototype.delete=function(e){return!!this.remove(e)},e.prototype.remove=function(e){var t=this._map.get(e);if(t)return this._map.delete(e),this.removeItem(t),this._size--,t.value},e.prototype.shift=function(){if(this._head||this._tail){if(!this._head||!this._tail)throw new Error("Invalid list");var e=this._head;return this._map.delete(e.key),this.removeItem(e),this._size--,e.value}},e.prototype.forEach=function(e,t){for(var n=this._head;n;)t?e.bind(t)(n.value,n.key,this):e(n.value,n.key,this),n=n.next},e.prototype.values=function(){for(var e=[],t=this._head;t;)e.push(t.value),t=t.next;return e},e.prototype.keys=function(){for(var e=[],t=this._head;t;)e.push(t.key),t=t.next;return e},e.prototype.trimOld=function(e){if(!(e>=this.size))if(0!==e){for(var t=this._head,n=this.size;t&&n>e;)this._map.delete(t.key),t=t.next,n--;this._head=t,this._size=n,t.previous=void 0}else this.clear()},e.prototype.addItemFirst=function(e){if(this._head||this._tail){if(!this._head)throw new Error("Invalid list");e.next=this._head,this._head.previous=e}else this._tail=e;this._head=e},e.prototype.addItemLast=function(e){if(this._head||this._tail){if(!this._tail)throw new Error("Invalid list");e.previous=this._tail,this._tail.next=e}else this._head=e;this._tail=e},e.prototype.removeItem=function(e){if(e===this._head&&e===this._tail)this._head=void 0,this._tail=void 0;else if(e===this._head)this._head=e.next;else if(e===this._tail)this._tail=e.previous;else{var t=e.next,n=e.previous;if(!t||!n)throw new Error("Invalid list");t.previous=n,n.next=t}},e.prototype.touch=function(e,t){if(!this._head||!this._tail)throw new Error("Invalid list");if(t===L.AsOld||t===L.AsNew)if(t===L.AsOld){if(e===this._head)return;var n=e.next,i=e.previous;e===this._tail?(i.next=void 0,this._tail=i):(n.previous=i,i.next=n),e.previous=void 0,e.next=this._head,this._head.previous=e,this._head=e}else if(t===L.AsNew){if(e===this._tail)return;n=e.next,i=e.previous;e===this._head?(n.previous=void 0,this._head=n):(n.previous=i,i.next=n),e.next=void 0,e.previous=this._tail,this._tail.next=e,this._tail=e}},e.prototype.toJSON=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),e},e.prototype.fromJSON=function(e){this.clear();for(var t=0,n=e;t<n.length;t++){var i=n[t],r=i[0],o=i[1];this.set(r,o)}},e}());new U(1e4);new U(1e4);String.fromCharCode(65279);var j=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),V=5e3,B=3;function K(e,t,n,i){return new N(e,t,n).ComputeDiff(i)}var q=function(){function e(e,t,n){this.buffer=e,this.startMarkers=t,this.endMarkers=n}return e.prototype.getLength=function(){return this.startMarkers.length},e.prototype.getElementHash=function(e){return this.buffer.substring(this.startMarkers[e].offset,this.endMarkers[e].offset)},e.prototype.getStartLineNumber=function(e){return e===this.startMarkers.length?this.startMarkers[e-1].lineNumber+1:this.startMarkers[e].lineNumber},e.prototype.getStartColumn=function(e){return this.startMarkers[e].column},e.prototype.getEndLineNumber=function(e){return this.endMarkers[e].lineNumber},e.prototype.getEndColumn=function(e){return this.endMarkers[e].column},e}(),W=function(e){function t(n){for(var i="",r=[],o=[],s=0,a=0,l=n.length;a<l;a++){i+=n[a];var c=t._getFirstNonBlankColumn(n[a],1),h=t._getLastNonBlankColumn(n[a],1);r.push({offset:s+c-1,lineNumber:a+1,column:c}),o.push({offset:s+h-1,lineNumber:a+1,column:h}),s+=n[a].length}return e.call(this,i,r,o)||this}return j(t,e),t._getFirstNonBlankColumn=function(e,t){var n=function(e){for(var t=0,n=e.length;t<n;t++){var i=e.charCodeAt(t);if(32!==i&&9!==i)return t}return-1}(e);return-1===n?t:n+1},t._getLastNonBlankColumn=function(e,t){var n=function(e,t){void 0===t&&(t=e.length-1);for(var n=t;n>=0;n--){var i=e.charCodeAt(n);if(32!==i&&9!==i)return n}return-1}(e);return-1===n?t:n+2},t.prototype.getCharSequence=function(e,t){for(var n=[],i=[],r=e;r<=t;r++)for(var o=this.startMarkers[r],s=this.endMarkers[r],a=o.offset;a<s.offset;a++)n.push({offset:a,lineNumber:o.lineNumber,column:o.column+(a-o.offset)}),i.push({offset:a+1,lineNumber:o.lineNumber,column:o.column+(a-o.offset)+1});return new q(this.buffer,n,i)},t}(q),$=function(){function e(e,t,n,i,r,o,s,a){this.originalStartLineNumber=e,this.originalStartColumn=t,this.originalEndLineNumber=n,this.originalEndColumn=i,this.modifiedStartLineNumber=r,this.modifiedStartColumn=o,this.modifiedEndLineNumber=s,this.modifiedEndColumn=a}return e.createFromDiffChange=function(t,n,i){var r,o,s,a,l,c,h,d;return 0===t.originalLength?(r=0,o=0,s=0,a=0):(r=n.getStartLineNumber(t.originalStart),o=n.getStartColumn(t.originalStart),s=n.getEndLineNumber(t.originalStart+t.originalLength-1),a=n.getEndColumn(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(l=0,c=0,h=0,d=0):(l=i.getStartLineNumber(t.modifiedStart),c=i.getStartColumn(t.modifiedStart),h=i.getEndLineNumber(t.modifiedStart+t.modifiedLength-1),d=i.getEndColumn(t.modifiedStart+t.modifiedLength-1)),new e(r,o,s,a,l,c,h,d)},e}();var G=function(){function e(e,t,n,i,r){this.originalStartLineNumber=e,this.originalEndLineNumber=t,this.modifiedStartLineNumber=n,this.modifiedEndLineNumber=i,this.charChanges=r}return e.createFromDiffResult=function(t,n,i,r,o){var s,a,l,c,h;if(0===t.originalLength?(s=n.getStartLineNumber(t.originalStart)-1,a=0):(s=n.getStartLineNumber(t.originalStart),a=n.getEndLineNumber(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(l=i.getStartLineNumber(t.modifiedStart)-1,c=0):(l=i.getStartLineNumber(t.modifiedStart),c=i.getEndLineNumber(t.modifiedStart+t.modifiedLength-1)),0!==t.originalLength&&0!==t.modifiedLength&&r()){var d=n.getCharSequence(t.originalStart,t.originalStart+t.originalLength-1),u=i.getCharSequence(t.modifiedStart,t.modifiedStart+t.modifiedLength-1),m=K(d,u,r,!0);o&&(m=function(e){if(e.length<=1)return e;for(var t=[e[0]],n=t[0],i=1,r=e.length;i<r;i++){var o=e[i],s=o.originalStart-(n.originalStart+n.originalLength),a=o.modifiedStart-(n.modifiedStart+n.modifiedLength);Math.min(s,a)<B?(n.originalLength=o.originalStart+o.originalLength-n.originalStart,n.modifiedLength=o.modifiedStart+o.modifiedLength-n.modifiedStart):(t.push(o),n=o)}return t}(m)),h=[];for(var p=0,f=m.length;p<f;p++)h.push($.createFromDiffChange(m[p],d,u))}return new e(s,a,l,c,h)},e}(),H=function(){function e(e,t,n){this.shouldPostProcessCharChanges=n.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=n.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=n.shouldMakePrettyDiff,this.maximumRunTimeMs=V,this.originalLines=e,this.modifiedLines=t,this.original=new W(e),this.modified=new W(t)}return e.prototype.computeDiff=function(){if(1===this.original.getLength()&&0===this.original.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.getLength(),charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];if(1===this.modified.getLength()&&0===this.modified.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:this.original.getLength(),modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];this.computationStartTime=(new Date).getTime();var e=K(this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldMakePrettyDiff);if(this.shouldIgnoreTrimWhitespace){for(var t=[],n=0,i=e.length;n<i;n++)t.push(G.createFromDiffResult(e[n],this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges));return t}for(var r=[],o=0,s=0,a=(n=-1,e.length);n<a;n++){for(var l=n+1<a?e[n+1]:null,c=l?l.originalStart:this.originalLines.length,h=l?l.modifiedStart:this.modifiedLines.length;o<c&&s<h;){var d=this.originalLines[o],u=this.modifiedLines[s];if(d!==u){for(var m=W._getFirstNonBlankColumn(d,1),p=W._getFirstNonBlankColumn(u,1);m>1&&p>1;){if(d.charCodeAt(m-2)!==u.charCodeAt(p-2))break;m--,p--}(m>1||p>1)&&this._pushTrimWhitespaceCharChange(r,o+1,1,m,s+1,1,p);for(var f=W._getLastNonBlankColumn(d,1),g=W._getLastNonBlankColumn(u,1),b=d.length+1,y=u.length+1;f<b&&g<y;){if(d.charCodeAt(f-1)!==d.charCodeAt(g-1))break;f++,g++}(f<b||g<y)&&this._pushTrimWhitespaceCharChange(r,o+1,f,b,s+1,g,y)}o++,s++}l&&(r.push(G.createFromDiffResult(l,this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges)),o+=l.originalLength,s+=l.modifiedLength)}return r},e.prototype._pushTrimWhitespaceCharChange=function(e,t,n,i,r,o,s){this._mergeTrimWhitespaceCharChange(e,t,n,i,r,o,s)||e.push(new G(t,t,r,r,[new $(t,n,t,i,r,o,r,s)]))},e.prototype._mergeTrimWhitespaceCharChange=function(e,t,n,i,r,o,s){var a=e.length;if(0===a)return!1;var l=e[a-1];return 0!==l.originalEndLineNumber&&0!==l.modifiedEndLineNumber&&(l.originalEndLineNumber+1===t&&l.modifiedEndLineNumber+1===r&&(l.originalEndLineNumber=t,l.modifiedEndLineNumber=r,l.charChanges.push(new $(t,n,t,i,r,o,r,s)),!0))},e.prototype._continueProcessingPredicate=function(){return 0===this.maximumRunTimeMs||(new Date).getTime()-this.computationStartTime<this.maximumRunTimeMs},e}(),J=function(){function e(e,t,n){for(var i=new Uint8Array(e*t),r=0,o=e*t;r<o;r++)i[r]=n;this._data=i,this.rows=e,this.cols=t}return e.prototype.get=function(e,t){return this._data[e*this.cols+t]},e.prototype.set=function(e,t,n){this._data[e*this.cols+t]=n},e}();function Y(e){return e<0?0:e>255?255:0|e}function X(e){return e<0?0:e>4294967295?4294967295:0|e}var Q=function(){return function(e,t){this.index=e,this.remainder=t}}(),Z=function(){function e(e){this.values=e,this.prefixSum=new Uint32Array(e.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}return e.prototype.getCount=function(){return this.values.length},e.prototype.insertValues=function(e,t){e=X(e);var n=this.values,i=this.prefixSum,r=t.length;return 0!==r&&(this.values=new Uint32Array(n.length+r),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e),e+r),this.values.set(t,e),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},e.prototype.changeValue=function(e,t){return e=X(e),t=X(t),this.values[e]!==t&&(this.values[e]=t,e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),!0)},e.prototype.removeValues=function(e,t){e=X(e),t=X(t);var n=this.values,i=this.prefixSum;if(e>=n.length)return!1;var r=n.length-e;return t>=r&&(t=r),0!==t&&(this.values=new Uint32Array(n.length-t),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e+t),e),this.prefixSum=new Uint32Array(this.values.length),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},e.prototype.getTotalValue=function(){return 0===this.values.length?0:this._getAccumulatedValue(this.values.length-1)},e.prototype.getAccumulatedValue=function(e){return e<0?0:(e=X(e),this._getAccumulatedValue(e))},e.prototype._getAccumulatedValue=function(e){if(e<=this.prefixSumValidIndex[0])return this.prefixSum[e];var t=this.prefixSumValidIndex[0]+1;0===t&&(this.prefixSum[0]=this.values[0],t++),e>=this.values.length&&(e=this.values.length-1);for(var n=t;n<=e;n++)this.prefixSum[n]=this.prefixSum[n-1]+this.values[n];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],e),this.prefixSum[e]},e.prototype.getIndexOf=function(e){e=Math.floor(e),this.getTotalValue();for(var t,n,i,r=0,o=this.values.length-1;r<=o;)if(t=r+(o-r)/2|0,e<(i=(n=this.prefixSum[t])-this.values[t]))o=t-1;else{if(!(e>=n))break;r=t+1}return new Q(t,e-i)},e}(),ee=(function(){function e(e){this._cacheAccumulatedValueStart=0,this._cache=null,this._actual=new Z(e),this._bustCache()}e.prototype._bustCache=function(){this._cacheAccumulatedValueStart=0,this._cache=null},e.prototype.insertValues=function(e,t){this._actual.insertValues(e,t)&&this._bustCache()},e.prototype.changeValue=function(e,t){this._actual.changeValue(e,t)&&this._bustCache()},e.prototype.removeValues=function(e,t){this._actual.removeValues(e,t)&&this._bustCache()},e.prototype.getTotalValue=function(){return this._actual.getTotalValue()},e.prototype.getAccumulatedValue=function(e){return this._actual.getAccumulatedValue(e)},e.prototype.getIndexOf=function(e){if(e=Math.floor(e),null!==this._cache){var t=e-this._cacheAccumulatedValueStart;if(t>=0&&t<this._cache.length)return this._cache[t]}return this._actual.getIndexOf(e)},e.prototype.warmUpCache=function(e,t){for(var n=[],i=e;i<=t;i++)n[i-e]=this.getIndexOf(i);this._cache=n,this._cacheAccumulatedValueStart=e}}(),function(){function e(e,t,n,i){this._uri=e,this._lines=t,this._eol=n,this._versionId=i}return e.prototype.dispose=function(){this._lines.length=0},Object.defineProperty(e.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),e.prototype.getText=function(){return this._lines.join(this._eol)},e.prototype.onEvents=function(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);for(var t=e.changes,n=0,i=t.length;n<i;n++){var r=t[n];this._acceptDeleteRange(r.range),this._acceptInsertText(new S(r.range.startLineNumber,r.range.startColumn),r.text)}this._versionId=e.versionId},e.prototype._ensureLineStarts=function(){if(!this._lineStarts){for(var e=this._eol.length,t=this._lines.length,n=new Uint32Array(t),i=0;i<t;i++)n[i]=this._lines[i].length+e;this._lineStarts=new Z(n)}},e.prototype._setLineText=function(e,t){this._lines[e]=t,this._lineStarts&&this._lineStarts.changeValue(e,this._lines[e].length+this._eol.length)},e.prototype._acceptDeleteRange=function(e){if(e.startLineNumber!==e.endLineNumber)this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.endLineNumber-1].substring(e.endColumn-1)),this._lines.splice(e.startLineNumber,e.endLineNumber-e.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(e.startLineNumber,e.endLineNumber-e.startLineNumber);else{if(e.startColumn===e.endColumn)return;this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.startLineNumber-1].substring(e.endColumn-1))}},e.prototype._acceptInsertText=function(e,t){if(0!==t.length){var n=t.split(/\r\n|\r|\n/);if(1!==n.length){n[n.length-1]+=this._lines[e.lineNumber-1].substring(e.column-1),this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]);for(var i=new Uint32Array(n.length-1),r=1;r<n.length;r++)this._lines.splice(e.lineNumber+r-1,0,n[r]),i[r-1]=n[r].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(e.lineNumber,i)}else this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]+this._lines[e.lineNumber-1].substring(e.column-1))}},e}()),te=function(){function e(t){var n=Y(t);this._defaultValue=n,this._asciiMap=e._createAsciiMap(n),this._map=new Map}return e._createAsciiMap=function(e){for(var t=new Uint8Array(256),n=0;n<256;n++)t[n]=e;return t},e.prototype.set=function(e,t){var n=Y(t);e>=0&&e<256?this._asciiMap[e]=n:this._map.set(e,n)},e.prototype.get=function(e){return e>=0&&e<256?this._asciiMap[e]:this._map.get(e)||this._defaultValue},e}(),ne=(function(){function e(){this._actual=new te(0)}e.prototype.add=function(e){this._actual.set(e,1)},e.prototype.has=function(e){return 1===this._actual.get(e)}}(),function(){function e(e){for(var t=0,n=0,i=0,r=e.length;i<r;i++){var o=e[i],s=o[0],a=o[1],l=o[2];a>t&&(t=a),s>n&&(n=s),l>n&&(n=l)}var c=new J(++n,++t,0);for(i=0,r=e.length;i<r;i++){var h=e[i];s=h[0],a=h[1],l=h[2];c.set(s,a,l)}this._states=c,this._maxCharCode=t}return e.prototype.nextState=function(e,t){return t<0||t>=this._maxCharCode?0:this._states.get(e,t)},e}()),ie=null;var re=null;var oe=function(){function e(){}return e._createLink=function(e,t,n,i,r){var o=r-1;do{var s=t.charCodeAt(o);if(2!==e.get(s))break;o--}while(o>i);if(i>0){var a=t.charCodeAt(i-1),l=t.charCodeAt(o);(40===a&&41===l||91===a&&93===l||123===a&&125===l)&&o--}return{range:{startLineNumber:n,startColumn:i+1,endLineNumber:n,endColumn:o+2},url:t.substring(i,o+1)}},e.computeLinks=function(t){for(var n=(null===ie&&(ie=new ne([[1,104,2],[1,72,2],[1,102,6],[1,70,6],[2,116,3],[2,84,3],[3,116,4],[3,84,4],[4,112,5],[4,80,5],[5,115,9],[5,83,9],[5,58,10],[6,105,7],[6,73,7],[7,108,8],[7,76,8],[8,101,9],[8,69,9],[9,58,10],[10,47,11],[11,47,12]])),ie),i=function(){if(null===re){re=new te(0);for(var e=0;e<" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".length;e++)re.set(" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".charCodeAt(e),1);for(e=0;e<".,;".length;e++)re.set(".,;".charCodeAt(e),2)}return re}(),r=[],o=1,s=t.getLineCount();o<=s;o++){for(var a=t.getLineContent(o),l=a.length,c=0,h=0,d=0,u=1,m=!1,p=!1,f=!1;c<l;){var g=!1,b=a.charCodeAt(c);if(13===u){var y=void 0;switch(b){case 40:m=!0,y=0;break;case 41:y=m?0:1;break;case 91:p=!0,y=0;break;case 93:y=p?0:1;break;case 123:f=!0,y=0;break;case 125:y=f?0:1;break;case 39:y=34===d||96===d?0:1;break;case 34:y=39===d||96===d?0:1;break;case 96:y=39===d||34===d?0:1;break;default:y=i.get(b)}1===y&&(r.push(e._createLink(i,a,o,h,c)),g=!0)}else if(12===u){1===(y=i.get(b))?g=!0:u=13}else 0===(u=n.nextState(u,b))&&(g=!0);g&&(u=1,m=!1,p=!1,f=!1,h=c+1,d=b),c++}13===u&&r.push(e._createLink(i,a,o,h,l))}return r},e}();var se=function(){function e(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}return e.prototype.navigateValueSet=function(e,t,n,i,r){var o;if(e&&t&&(o=this.doNavigateValueSet(t,r)))return{range:e,value:o};if(n&&i&&(o=this.doNavigateValueSet(i,r)))return{range:n,value:o};return null},e.prototype.doNavigateValueSet=function(e,t){var n=this.numberReplace(e,t);return null!==n?n:this.textReplace(e,t)},e.prototype.numberReplace=function(e,t){var n=Math.pow(10,e.length-(e.lastIndexOf(".")+1)),i=Number(e),r=parseFloat(e);return isNaN(i)||isNaN(r)||i!==r?null:0!==i||t?(i=Math.floor(i*n),i+=t?n:-n,String(i/n)):null},e.prototype.textReplace=function(e,t){return this.valueSetsReplace(this._defaultValueSet,e,t)},e.prototype.valueSetsReplace=function(e,t,n){for(var i=null,r=0,o=e.length;null===i&&r<o;r++)i=this.valueSetReplace(e[r],t,n);return i},e.prototype.valueSetReplace=function(e,t,n){var i=e.indexOf(t);return i>=0?((i+=n?1:-1)<0?i=e.length-1:i%=e.length,e[i]):null},e.INSTANCE=new e,e}(),ae="`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";var le=function(e){void 0===e&&(e="");for(var t="(-?\\d*\\.\\d\\w*)|([^",n=0;n<ae.length;n++)e.indexOf(ae[n])>=0||(t+="\\"+ae[n]);return t+="\\s]+)",new RegExp(t,"g")}();function ce(e){var t,n=this,i=!1;return function(){return i?t:(i=!0,t=e.apply(n,arguments))}}var he=Object.freeze({dispose:function(){}});function de(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return Array.isArray(e)?(e.forEach(function(e){return e&&e.dispose()}),[]):0===t.length?e?(e.dispose(),e):void 0:(de(e),de(t),[])}var ue=function(){function e(){this._toDispose=[]}return e.prototype.dispose=function(){this._toDispose=de(this._toDispose)},e.prototype._register=function(e){return this._toDispose.push(e),e},e}(),me=(function(){function e(){this.references=Object.create(null)}e.prototype.acquire=function(e){var t=this,n=this.references[e];n||(n=this.references[e]={counter:0,object:this.createReferencedObject(e)});var i=n.object,r=ce(function(){0==--n.counter&&(t.destroyReferencedObject(n.object),delete t.references[e])});return n.counter++,{object:i,dispose:r}}}(),function(){function e(e){this.object=e}e.prototype.dispose=function(){}}(),{});C.b.addEventListener("error",function(e){var t=e.detail,n=t.id;t.parent?t.handler&&me&&delete me[n]:(me[n]=t,1===Object.keys(me).length&&setTimeout(function(){var e=me;me={},Object.keys(e).forEach(function(t){var n=e[t];n.exception?fe(n.exception):n.error&&fe(n.error),console.log("WARNING: Promise with no error callback:"+n.id),console.log(n),n.exception&&console.log(n.exception.stack)})},0))});var pe=new(function(){function e(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout(function(){if(e.stack)throw new Error(e.message+"\n\n"+e.stack);throw e},0)}}return e.prototype.addListener=function(e){var t=this;return this.listeners.push(e),function(){t._removeListener(e)}},e.prototype.emit=function(e){this.listeners.forEach(function(t){t(e)})},e.prototype._removeListener=function(e){this.listeners.splice(this.listeners.indexOf(e),1)},e.prototype.setUnexpectedErrorHandler=function(e){this.unexpectedErrorHandler=e},e.prototype.getUnexpectedErrorHandler=function(){return this.unexpectedErrorHandler},e.prototype.onUnexpectedError=function(e){this.unexpectedErrorHandler(e),this.emit(e)},e.prototype.onUnexpectedExternalError=function(e){this.unexpectedErrorHandler(e)},e}());function fe(e){ye(e)||pe.onUnexpectedError(e)}function ge(e){return e instanceof Error?{$isError:!0,name:e.name,message:e.message,stack:e.stacktrace||e.stack}:e}var be="Canceled";function ye(e){return e instanceof Error&&e.name===be&&e.message===be}var ve,we=function(){return function(e){this.element=e}}(),xe=function(){function e(){}return e.prototype.isEmpty=function(){return!this._first},e.prototype.clear=function(){this._first=void 0,this._last=void 0},e.prototype.unshift=function(e){return this.insert(e,!1)},e.prototype.push=function(e){return this.insert(e,!0)},e.prototype.insert=function(e,t){var n=this,i=new we(e);if(this._first)if(t){var r=this._last;this._last=i,i.prev=r,r.next=i}else{var o=this._first;this._first=i,i.next=o,o.prev=i}else this._first=i,this._last=i;return function(){for(var e=n._first;e instanceof we;e=e.next)if(e===i){if(e.prev&&e.next){var t=e.prev;t.next=e.next,e.next.prev=t}else e.prev||e.next?e.next?e.prev||(n._first=n._first.next,n._first.prev=void 0):(n._last=n._last.prev,n._last.next=void 0):(n._first=void 0,n._last=void 0);break}}},e.prototype.iterator=function(){var e={done:void 0,value:void 0},t=this._first;return{next:function(){return t?(e.done=!1,e.value=t.element,t=t.next):(e.done=!0,e.value=void 0),e}}},e.prototype.toArray=function(){for(var e=[],t=this._first;t instanceof we;t=t.next)e.push(t.element);return e},e}();!function(e){var t={dispose:function(){}};e.None=function(){return t}}(ve||(ve={}));var ke=function(){function e(e){this._options=e}return Object.defineProperty(e.prototype,"event",{get:function(){var t=this;return this._event||(this._event=function(n,i,r){t._listeners||(t._listeners=new xe);var o=t._listeners.isEmpty();o&&t._options&&t._options.onFirstListenerAdd&&t._options.onFirstListenerAdd(t);var s,a=t._listeners.push(i?[n,i]:n);return o&&t._options&&t._options.onFirstListenerDidAdd&&t._options.onFirstListenerDidAdd(t),t._options&&t._options.onListenerDidAdd&&t._options.onListenerDidAdd(t,n,i),s={dispose:function(){s.dispose=e._noop,t._disposed||(a(),t._options&&t._options.onLastListenerRemove&&t._listeners.isEmpty()&&t._options.onLastListenerRemove(t))}},Array.isArray(r)&&r.push(s),s}),this._event},enumerable:!0,configurable:!0}),e.prototype.fire=function(e){if(this._listeners){this._deliveryQueue||(this._deliveryQueue=[]);for(var t=this._listeners.iterator(),n=t.next();!n.done;n=t.next())this._deliveryQueue.push([n.value,e]);for(;this._deliveryQueue.length>0;){var i=this._deliveryQueue.shift(),r=i[0],o=i[1];try{"function"==typeof r?r.call(void 0,o):r[0].call(r[1],o)}catch(n){fe(n)}}}},e.prototype.dispose=function(){this._listeners&&(this._listeners=void 0),this._deliveryQueue&&(this._deliveryQueue.length=0),this._disposed=!0},e._noop=function(){},e}();!function(){function e(){var e=this;this.hasListeners=!1,this.events=[],this.emitter=new ke({onFirstListenerAdd:function(){return e.onFirstListenerAdd()},onLastListenerRemove:function(){return e.onLastListenerRemove()}})}Object.defineProperty(e.prototype,"event",{get:function(){return this.emitter.event},enumerable:!0,configurable:!0}),e.prototype.add=function(e){var t=this,n={event:e,listener:null};this.events.push(n),this.hasListeners&&this.hook(n);return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return{dispose:function(){for(var t=0,n=e;t<n.length;t++)(0,n[t])()}}}(ce(function(){t.hasListeners&&t.unhook(n);var e=t.events.indexOf(n);t.events.splice(e,1)}))},e.prototype.onFirstListenerAdd=function(){var e=this;this.hasListeners=!0,this.events.forEach(function(t){return e.hook(t)})},e.prototype.onLastListenerRemove=function(){var e=this;this.hasListeners=!1,this.events.forEach(function(t){return e.unhook(t)})},e.prototype.hook=function(e){var t=this;e.listener=e.event(function(e){return t.emitter.fire(e)})},e.prototype.unhook=function(e){e.listener.dispose(),e.listener=null},e.prototype.dispose=function(){this.emitter.dispose()}}();!function(){function e(){this.buffers=[]}e.prototype.wrapEvent=function(e){var t=this;return function(n,i,r){return e(function(e){var r=t.buffers[t.buffers.length-1];r?r.push(function(){return n.call(i,e)}):n.call(i,e)},void 0,r)}},e.prototype.bufferEvents=function(e){var t=[];this.buffers.push(t),e(),this.buffers.pop(),t.forEach(function(e){return e()})}}();function Ce(e,t){return function(n,i,r){return void 0===i&&(i=null),e(function(e){return n.call(i,t(e))},null,r)}}function Se(e,t){return function(n,i,r){return void 0===i&&(i=null),e(function(e){return t(e)&&n.call(i,e)},null,r)}}!function(){function e(e){this._event=e}Object.defineProperty(e.prototype,"event",{get:function(){return this._event},enumerable:!0,configurable:!0}),e.prototype.map=function(t){return new e(Ce(this._event,t))},e.prototype.forEach=function(t){return new e((n=this._event,i=t,function(e,t,r){return void 0===t&&(t=null),n(function(n){i(n),e.call(t,n)},null,r)}));var n,i},e.prototype.filter=function(t){return new e(Se(this._event,t))},e.prototype.latch=function(){return new e((t=this._event,i=!0,Se(t,function(e){var t=i||e!==n;return i=!1,n=e,t})));var t,n,i},e.prototype.on=function(e,t,n){return this._event(e,t,n)}}();!function(){function e(){this.emitter=new ke,this.event=this.emitter.event,this.disposable=he}Object.defineProperty(e.prototype,"input",{set:function(e){this.disposable.dispose(),this.disposable=e(this.emitter.fire,this.emitter)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this.disposable.dispose(),this.emitter.dispose()}}();var _e,Fe=function(){function e(){this._keyCodeToStr=[],this._strToKeyCode=Object.create(null)}return e.prototype.define=function(e,t){this._keyCodeToStr[e]=t,this._strToKeyCode[t.toLowerCase()]=e},e.prototype.keyCodeToStr=function(e){return this._keyCodeToStr[e]},e.prototype.strToKeyCode=function(e){return this._strToKeyCode[e.toLowerCase()]||0},e}(),Ee=new Fe,Ie=new Fe,Ae=new Fe;!function(){function e(e,t,n,i){void 0===n&&(n=t),void 0===i&&(i=n),Ee.define(e,t),Ie.define(e,n),Ae.define(e,i)}e(0,"unknown"),e(1,"Backspace"),e(2,"Tab"),e(3,"Enter"),e(4,"Shift"),e(5,"Ctrl"),e(6,"Alt"),e(7,"PauseBreak"),e(8,"CapsLock"),e(9,"Escape"),e(10,"Space"),e(11,"PageUp"),e(12,"PageDown"),e(13,"End"),e(14,"Home"),e(15,"LeftArrow","Left"),e(16,"UpArrow","Up"),e(17,"RightArrow","Right"),e(18,"DownArrow","Down"),e(19,"Insert"),e(20,"Delete"),e(21,"0"),e(22,"1"),e(23,"2"),e(24,"3"),e(25,"4"),e(26,"5"),e(27,"6"),e(28,"7"),e(29,"8"),e(30,"9"),e(31,"A"),e(32,"B"),e(33,"C"),e(34,"D"),e(35,"E"),e(36,"F"),e(37,"G"),e(38,"H"),e(39,"I"),e(40,"J"),e(41,"K"),e(42,"L"),e(43,"M"),e(44,"N"),e(45,"O"),e(46,"P"),e(47,"Q"),e(48,"R"),e(49,"S"),e(50,"T"),e(51,"U"),e(52,"V"),e(53,"W"),e(54,"X"),e(55,"Y"),e(56,"Z"),e(57,"Meta"),e(58,"ContextMenu"),e(59,"F1"),e(60,"F2"),e(61,"F3"),e(62,"F4"),e(63,"F5"),e(64,"F6"),e(65,"F7"),e(66,"F8"),e(67,"F9"),e(68,"F10"),e(69,"F11"),e(70,"F12"),e(71,"F13"),e(72,"F14"),e(73,"F15"),e(74,"F16"),e(75,"F17"),e(76,"F18"),e(77,"F19"),e(78,"NumLock"),e(79,"ScrollLock"),e(80,";",";","OEM_1"),e(81,"=","=","OEM_PLUS"),e(82,",",",","OEM_COMMA"),e(83,"-","-","OEM_MINUS"),e(84,".",".","OEM_PERIOD"),e(85,"/","/","OEM_2"),e(86,"`","`","OEM_3"),e(110,"ABNT_C1"),e(111,"ABNT_C2"),e(87,"[","[","OEM_4"),e(88,"\\","\\","OEM_5"),e(89,"]","]","OEM_6"),e(90,"'","'","OEM_7"),e(91,"OEM_8"),e(92,"OEM_102"),e(93,"NumPad0"),e(94,"NumPad1"),e(95,"NumPad2"),e(96,"NumPad3"),e(97,"NumPad4"),e(98,"NumPad5"),e(99,"NumPad6"),e(100,"NumPad7"),e(101,"NumPad8"),e(102,"NumPad9"),e(103,"NumPad_Multiply"),e(104,"NumPad_Add"),e(105,"NumPad_Separator"),e(106,"NumPad_Subtract"),e(107,"NumPad_Decimal"),e(108,"NumPad_Divide")}(),function(e){e.toString=function(e){return Ee.keyCodeToStr(e)},e.fromString=function(e){return Ee.strToKeyCode(e)},e.toUserSettingsUS=function(e){return Ie.keyCodeToStr(e)},e.toUserSettingsGeneral=function(e){return Ae.keyCodeToStr(e)},e.fromUserSettings=function(e){return Ie.strToKeyCode(e)||Ae.strToKeyCode(e)}}(_e||(_e={}));(function(){function e(e,t,n,i,r){this.type=1,this.ctrlKey=e,this.shiftKey=t,this.altKey=n,this.metaKey=i,this.keyCode=r}e.prototype.equals=function(e){return 1===e.type&&(this.ctrlKey===e.ctrlKey&&this.shiftKey===e.shiftKey&&this.altKey===e.altKey&&this.metaKey===e.metaKey&&this.keyCode===e.keyCode)},e.prototype.getHashCode=function(){return""+(this.ctrlKey?"1":"0")+(this.shiftKey?"1":"0")+(this.altKey?"1":"0")+(this.metaKey?"1":"0")+this.keyCode},e.prototype.isModifierKey=function(){return 0===this.keyCode||5===this.keyCode||57===this.keyCode||6===this.keyCode||4===this.keyCode},e.prototype.isDuplicateModifierCase=function(){return this.ctrlKey&&5===this.keyCode||this.shiftKey&&4===this.keyCode||this.altKey&&6===this.keyCode||this.metaKey&&57===this.keyCode}})(),function(){function e(e,t){this.type=2,this.firstPart=e,this.chordPart=t}e.prototype.getHashCode=function(){return this.firstPart.getHashCode()+";"+this.chordPart.getHashCode()}}();var Pe,Te=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();!function(e){e[e.LTR=0]="LTR",e[e.RTL=1]="RTL"}(Pe||(Pe={}));var Oe,Ne,De=function(e){function t(t,n,i,r){var o=e.call(this,t,n,i,r)||this;return o.selectionStartLineNumber=t,o.selectionStartColumn=n,o.positionLineNumber=i,o.positionColumn=r,o}return Te(t,e),t.prototype.clone=function(){return new t(this.selectionStartLineNumber,this.selectionStartColumn,this.positionLineNumber,this.positionColumn)},t.prototype.toString=function(){return"["+this.selectionStartLineNumber+","+this.selectionStartColumn+" -> "+this.positionLineNumber+","+this.positionColumn+"]"},t.prototype.equalsSelection=function(e){return t.selectionsEqual(this,e)},t.selectionsEqual=function(e,t){return e.selectionStartLineNumber===t.selectionStartLineNumber&&e.selectionStartColumn===t.selectionStartColumn&&e.positionLineNumber===t.positionLineNumber&&e.positionColumn===t.positionColumn},t.prototype.getDirection=function(){return this.selectionStartLineNumber===this.startLineNumber&&this.selectionStartColumn===this.startColumn?Pe.LTR:Pe.RTL},t.prototype.setEndPosition=function(e,n){return this.getDirection()===Pe.LTR?new t(this.startLineNumber,this.startColumn,e,n):new t(e,n,this.startLineNumber,this.startColumn)},t.prototype.getPosition=function(){return new S(this.positionLineNumber,this.positionColumn)},t.prototype.setStartPosition=function(e,n){return this.getDirection()===Pe.LTR?new t(e,n,this.endLineNumber,this.endColumn):new t(this.endLineNumber,this.endColumn,e,n)},t.fromPositions=function(e,n){return void 0===n&&(n=e),new t(e.lineNumber,e.column,n.lineNumber,n.column)},t.liftSelection=function(e){return new t(e.selectionStartLineNumber,e.selectionStartColumn,e.positionLineNumber,e.positionColumn)},t.selectionsArrEqual=function(e,t){if(e&&!t||!e&&t)return!1;if(!e&&!t)return!0;if(e.length!==t.length)return!1;for(var n=0,i=e.length;n<i;n++)if(!this.selectionsEqual(e[n],t[n]))return!1;return!0},t.isISelection=function(e){return e&&"number"==typeof e.selectionStartLineNumber&&"number"==typeof e.selectionStartColumn&&"number"==typeof e.positionLineNumber&&"number"==typeof e.positionColumn},t.createWithDirection=function(e,n,i,r,o){return o===Pe.LTR?new t(e,n,i,r):new t(i,r,e,n)},t}(_),Le=Object.freeze(function(e,t){var n=setTimeout(e.bind(t),0);return{dispose:function(){clearTimeout(n)}}});(Ne=Oe||(Oe={})).None=Object.freeze({isCancellationRequested:!1,onCancellationRequested:ve.None}),Ne.Cancelled=Object.freeze({isCancellationRequested:!0,onCancellationRequested:Le});var Re,ze,Me=function(){function e(){this._isCancelled=!1}return e.prototype.cancel=function(){this._isCancelled||(this._isCancelled=!0,this._emitter&&(this._emitter.fire(void 0),this.dispose()))},Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return this._isCancelled},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onCancellationRequested",{get:function(){return this._isCancelled?Le:(this._emitter||(this._emitter=new ke),this._emitter.event)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this._emitter&&(this._emitter.dispose(),this._emitter=void 0)},e}(),Ue=function(){function e(){}return Object.defineProperty(e.prototype,"token",{get:function(){return this._token||(this._token=new Me),this._token},enumerable:!0,configurable:!0}),e.prototype.cancel=function(){this._token?this._token instanceof Me&&this._token.cancel():this._token=Oe.Cancelled},e.prototype.dispose=function(){this._token?this._token instanceof Me&&this._token.dispose():this._token=Oe.None},e}(),je=function(){function e(e,t,n){this.offset=0|e,this.type=t,this.language=n}return e.prototype.toString=function(){return"("+this.offset+", "+this.type+")"},e}();!function(e){e[e.Ignore=0]="Ignore",e[e.Info=1]="Info",e[e.Warning=2]="Warning",e[e.Error=3]="Error"}(Re||(Re={})),function(e){e[e.Hint=1]="Hint",e[e.Info=2]="Info",e[e.Warning=4]="Warning",e[e.Error=8]="Error"}(ze||(ze={}));var Ve,Be=function(){function e(){}return e.chord=function(e,t){return function(e,t){return(e|(65535&t)<<16>>>0)>>>0}(e,t)},e.CtrlCmd=2048,e.Shift=1024,e.Alt=512,e.WinCtrl=256,e}();!function(e){e[e.Unknown=0]="Unknown",e[e.Backspace=1]="Backspace",e[e.Tab=2]="Tab",e[e.Enter=3]="Enter",e[e.Shift=4]="Shift",e[e.Ctrl=5]="Ctrl",e[e.Alt=6]="Alt",e[e.PauseBreak=7]="PauseBreak",e[e.CapsLock=8]="CapsLock",e[e.Escape=9]="Escape",e[e.Space=10]="Space",e[e.PageUp=11]="PageUp",e[e.PageDown=12]="PageDown",e[e.End=13]="End",e[e.Home=14]="Home",e[e.LeftArrow=15]="LeftArrow",e[e.UpArrow=16]="UpArrow",e[e.RightArrow=17]="RightArrow",e[e.DownArrow=18]="DownArrow",e[e.Insert=19]="Insert",e[e.Delete=20]="Delete",e[e.KEY_0=21]="KEY_0",e[e.KEY_1=22]="KEY_1",e[e.KEY_2=23]="KEY_2",e[e.KEY_3=24]="KEY_3",e[e.KEY_4=25]="KEY_4",e[e.KEY_5=26]="KEY_5",e[e.KEY_6=27]="KEY_6",e[e.KEY_7=28]="KEY_7",e[e.KEY_8=29]="KEY_8",e[e.KEY_9=30]="KEY_9",e[e.KEY_A=31]="KEY_A",e[e.KEY_B=32]="KEY_B",e[e.KEY_C=33]="KEY_C",e[e.KEY_D=34]="KEY_D",e[e.KEY_E=35]="KEY_E",e[e.KEY_F=36]="KEY_F",e[e.KEY_G=37]="KEY_G",e[e.KEY_H=38]="KEY_H",e[e.KEY_I=39]="KEY_I",e[e.KEY_J=40]="KEY_J",e[e.KEY_K=41]="KEY_K",e[e.KEY_L=42]="KEY_L",e[e.KEY_M=43]="KEY_M",e[e.KEY_N=44]="KEY_N",e[e.KEY_O=45]="KEY_O",e[e.KEY_P=46]="KEY_P",e[e.KEY_Q=47]="KEY_Q",e[e.KEY_R=48]="KEY_R",e[e.KEY_S=49]="KEY_S",e[e.KEY_T=50]="KEY_T",e[e.KEY_U=51]="KEY_U",e[e.KEY_V=52]="KEY_V",e[e.KEY_W=53]="KEY_W",e[e.KEY_X=54]="KEY_X",e[e.KEY_Y=55]="KEY_Y",e[e.KEY_Z=56]="KEY_Z",e[e.Meta=57]="Meta",e[e.ContextMenu=58]="ContextMenu",e[e.F1=59]="F1",e[e.F2=60]="F2",e[e.F3=61]="F3",e[e.F4=62]="F4",e[e.F5=63]="F5",e[e.F6=64]="F6",e[e.F7=65]="F7",e[e.F8=66]="F8",e[e.F9=67]="F9",e[e.F10=68]="F10",e[e.F11=69]="F11",e[e.F12=70]="F12",e[e.F13=71]="F13",e[e.F14=72]="F14",e[e.F15=73]="F15",e[e.F16=74]="F16",e[e.F17=75]="F17",e[e.F18=76]="F18",e[e.F19=77]="F19",e[e.NumLock=78]="NumLock",e[e.ScrollLock=79]="ScrollLock",e[e.US_SEMICOLON=80]="US_SEMICOLON",e[e.US_EQUAL=81]="US_EQUAL",e[e.US_COMMA=82]="US_COMMA",e[e.US_MINUS=83]="US_MINUS",e[e.US_DOT=84]="US_DOT",e[e.US_SLASH=85]="US_SLASH",e[e.US_BACKTICK=86]="US_BACKTICK",e[e.US_OPEN_SQUARE_BRACKET=87]="US_OPEN_SQUARE_BRACKET",e[e.US_BACKSLASH=88]="US_BACKSLASH",e[e.US_CLOSE_SQUARE_BRACKET=89]="US_CLOSE_SQUARE_BRACKET",e[e.US_QUOTE=90]="US_QUOTE",e[e.OEM_8=91]="OEM_8",e[e.OEM_102=92]="OEM_102",e[e.NUMPAD_0=93]="NUMPAD_0",e[e.NUMPAD_1=94]="NUMPAD_1",e[e.NUMPAD_2=95]="NUMPAD_2",e[e.NUMPAD_3=96]="NUMPAD_3",e[e.NUMPAD_4=97]="NUMPAD_4",e[e.NUMPAD_5=98]="NUMPAD_5",e[e.NUMPAD_6=99]="NUMPAD_6",e[e.NUMPAD_7=100]="NUMPAD_7",e[e.NUMPAD_8=101]="NUMPAD_8",e[e.NUMPAD_9=102]="NUMPAD_9",e[e.NUMPAD_MULTIPLY=103]="NUMPAD_MULTIPLY",e[e.NUMPAD_ADD=104]="NUMPAD_ADD",e[e.NUMPAD_SEPARATOR=105]="NUMPAD_SEPARATOR",e[e.NUMPAD_SUBTRACT=106]="NUMPAD_SUBTRACT",e[e.NUMPAD_DECIMAL=107]="NUMPAD_DECIMAL",e[e.NUMPAD_DIVIDE=108]="NUMPAD_DIVIDE",e[e.KEY_IN_COMPOSITION=109]="KEY_IN_COMPOSITION",e[e.ABNT_C1=110]="ABNT_C1",e[e.ABNT_C2=111]="ABNT_C2",e[e.MAX_VALUE=112]="MAX_VALUE"}(Ve||(Ve={}));var Ke=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),qe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ke(t,e),Object.defineProperty(t.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"eol",{get:function(){return this._eol},enumerable:!0,configurable:!0}),t.prototype.getValue=function(){return this.getText()},t.prototype.getLinesContent=function(){return this._lines.slice(0)},t.prototype.getLineCount=function(){return this._lines.length},t.prototype.getLineContent=function(e){return this._lines[e-1]},t.prototype.getWordAtPosition=function(e,t){var n=function(e,t,n,i){t.lastIndex=0;var r=t.exec(n);if(!r)return null;var o=r[0].indexOf(" ")>=0?function(e,t,n,i){var r,o=e-1-i;for(t.lastIndex=0;r=t.exec(n);){if(r.index>o)return null;if(t.lastIndex>=o)return{word:r[0],startColumn:i+1+r.index,endColumn:i+1+t.lastIndex}}return null}(e,t,n,i):function(e,t,n,i){var r,o=e-1-i,s=n.lastIndexOf(" ",o-1)+1,a=n.indexOf(" ",o);for(-1===a&&(a=n.length),t.lastIndex=s;r=t.exec(n);)if(r.index<=o&&t.lastIndex>=o)return{word:r[0],startColumn:i+1+r.index,endColumn:i+1+t.lastIndex};return null}(e,t,n,i);return t.lastIndex=0,o}(e.column,function(e){var t=le;if(e&&e instanceof RegExp)if(e.global)t=e;else{var n="g";e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),t=new RegExp(e.source,n)}return t.lastIndex=0,t}(t),this._lines[e.lineNumber-1],0);return n?new _(e.lineNumber,n.startColumn,e.lineNumber,n.endColumn):null},t.prototype.getWordUntilPosition=function(e,t){var n=this.getWordAtPosition(e,t);return n?{word:this._lines[e.lineNumber-1].substring(n.startColumn-1,e.column-1),startColumn:n.startColumn,endColumn:e.column}:{word:"",startColumn:e.column,endColumn:e.column}},t.prototype.createWordIterator=function(e){var t,n=this,i={done:!1,value:""},r=0,o=0,s=[],a=function(){if(o<s.length)i.done=!1,i.value=t.substring(s[o].start,s[o].end),o+=1;else{if(!(r>=n._lines.length))return t=n._lines[r],s=n._wordenize(t,e),o=0,r+=1,a();i.done=!0,i.value=void 0}return i};return{next:a}},t.prototype._wordenize=function(e,t){var n,i=[];for(t.lastIndex=0;(n=t.exec(e))&&0!==n[0].length;)i.push({start:n.index,end:n.index+n[0].length});return i},t.prototype.getValueInRange=function(e){if((e=this._validateRange(e)).startLineNumber===e.endLineNumber)return this._lines[e.startLineNumber-1].substring(e.startColumn-1,e.endColumn-1);var t=this._eol,n=e.startLineNumber-1,i=e.endLineNumber-1,r=[];r.push(this._lines[n].substring(e.startColumn-1));for(var o=n+1;o<i;o++)r.push(this._lines[o]);return r.push(this._lines[i].substring(0,e.endColumn-1)),r.join(t)},t.prototype.offsetAt=function(e){return e=this._validatePosition(e),this._ensureLineStarts(),this._lineStarts.getAccumulatedValue(e.lineNumber-2)+(e.column-1)},t.prototype.positionAt=function(e){e=Math.floor(e),e=Math.max(0,e),this._ensureLineStarts();var t=this._lineStarts.getIndexOf(e),n=this._lines[t.index].length;return{lineNumber:1+t.index,column:1+Math.min(t.remainder,n)}},t.prototype._validateRange=function(e){var t=this._validatePosition({lineNumber:e.startLineNumber,column:e.startColumn}),n=this._validatePosition({lineNumber:e.endLineNumber,column:e.endColumn});return t.lineNumber!==e.startLineNumber||t.column!==e.startColumn||n.lineNumber!==e.endLineNumber||n.column!==e.endColumn?{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:n.lineNumber,endColumn:n.column}:e},t.prototype._validatePosition=function(e){if(!S.isIPosition(e))throw new Error("bad position");var t=e.lineNumber,n=e.column,i=!1;if(t<1)t=1,n=1,i=!0;else if(t>this._lines.length)t=this._lines.length,n=this._lines[t-1].length+1,i=!0;else{var r=this._lines[t-1].length+1;n<1?(n=1,i=!0):n>r&&(n=r,i=!0)}return i?{lineNumber:t,column:n}:e},t}(ee),We=function(e){function t(t){var n=e.call(this,t)||this;return n._models=Object.create(null),n}return Ke(t,e),t.prototype.dispose=function(){this._models=Object.create(null)},t.prototype._getModel=function(e){return this._models[e]},t.prototype._getModels=function(){var e=this,t=[];return Object.keys(this._models).forEach(function(n){return t.push(e._models[n])}),t},t.prototype.acceptNewModel=function(e){this._models[e.url]=new qe(v.parse(e.url),e.lines,e.EOL,e.versionId)},t.prototype.acceptModelChanged=function(e,t){this._models[e]&&this._models[e].onEvents(t)},t.prototype.acceptRemovedModel=function(e){this._models[e]&&delete this._models[e]},t}(function(){function e(e){this._foreignModuleFactory=e,this._foreignModule=null}return e.prototype.computeDiff=function(e,t,n){var i=this._getModel(e),r=this._getModel(t);if(!i||!r)return null;var o=i.getLinesContent(),s=r.getLinesContent(),a=new H(o,s,{shouldPostProcessCharChanges:!0,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return C.b.as(a.computeDiff())},e.prototype.computeDirtyDiff=function(e,t,n){var i=this._getModel(e),r=this._getModel(t);if(!i||!r)return null;var o=i.getLinesContent(),s=r.getLinesContent(),a=new H(o,s,{shouldPostProcessCharChanges:!1,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return C.b.as(a.computeDiff())},e.prototype.computeMoreMinimalEdits=function(t,n){var i=this._getModel(t);if(!i)return C.b.as(n);for(var r,o=[],s=0,a=n;s<a.length;s++){var l=a[s],c=l.range,h=l.text,d=l.eol;if("number"==typeof d&&(r=d),c){var u=i.getValueInRange(c);if(u!==(h=h.replace(/\r\n|\n|\r/g,i.eol)))if(Math.max(h.length,u.length)>e._diffLimit)o.push({range:c,text:h});else for(var m=I(u,h,!1),p=i.offsetAt(_.lift(c).getStartPosition()),f=0,g=m;f<g.length;f++){var b=g[f],y=i.positionAt(p+b.originalStart),v=i.positionAt(p+b.originalStart+b.originalLength),w={text:h.substr(b.modifiedStart,b.modifiedLength),range:{startLineNumber:y.lineNumber,startColumn:y.column,endLineNumber:v.lineNumber,endColumn:v.column}};i.getValueInRange(w.range)!==w.text&&o.push(w)}}}return"number"==typeof r&&o.push({eol:r,text:void 0,range:void 0}),C.b.as(o)},e.prototype.computeLinks=function(e){var t=this._getModel(e);return t?C.b.as(function(e){return e&&"function"==typeof e.getLineCount&&"function"==typeof e.getLineContent?oe.computeLinks(e):[]}(t)):null},e.prototype.textualSuggest=function(t,n,i,r){var o=this._getModel(t);if(o){var s=[],a=new RegExp(i,r),l=o.getWordUntilPosition(n,a).word,c=Object.create(null);c[l]=!0;for(var h=o.createWordIterator(a),d=h.next();!d.done&&s.length<=e._suggestionsLimit;d=h.next()){var u=d.value;c[u]||(c[u]=!0,isNaN(Number(u))&&s.push({type:"text",label:u,insertText:u,noAutoAccept:!0,overwriteBefore:l.length}))}return C.b.as({suggestions:s})}},e.prototype.navigateValueSet=function(e,t,n,i,r){var o=this._getModel(e);if(!o)return null;var s=new RegExp(i,r);t.startColumn===t.endColumn&&(t={startLineNumber:t.startLineNumber,startColumn:t.startColumn,endLineNumber:t.endLineNumber,endColumn:t.endColumn+1});var a=o.getValueInRange(t),l=o.getWordAtPosition({lineNumber:t.startLineNumber,column:t.startColumn},s),c=null;null!==l&&(c=o.getValueInRange(l));var h=se.INSTANCE.navigateValueSet(t,a,l,c,n);return C.b.as(h)},e.prototype.loadForeignModule=function(e,t){var i=this,r={getMirrorModels:function(){return i._getModels()}};if(this._foreignModuleFactory){this._foreignModule=this._foreignModuleFactory(r,t);var o=[];for(var s in this._foreignModule)"function"==typeof this._foreignModule[s]&&o.push(s);return C.b.as(o)}return new C.b(function(o,s){Promise.resolve().then(function(){var s=[n(5)(e)];(function(e){i._foreignModule=e.create(r,t);var n=[];for(var s in i._foreignModule)"function"==typeof i._foreignModule[s]&&n.push(s);o(n)}).apply(null,s)}).catch(s.bind(this))})},e.prototype.fmr=function(e,t){if(!this._foreignModule||"function"!=typeof this._foreignModule[e])return C.b.wrapError(new Error("Missing requestHandler or method: "+e));try{return C.b.as(this._foreignModule[e].apply(this._foreignModule,t))}catch(e){return C.b.wrapError(e)}},e._diffLimit=1e4,e._suggestionsLimit=1e4,e}());"function"==typeof importScripts&&(r.a.monaco={editor:void 0,languages:void 0,CancellationTokenSource:Ue,Emitter:ke,KeyCode:Ve,KeyMod:Be,Position:S,Range:_,Selection:De,SelectionDirection:Pe,Severity:Re,MarkerSeverity:ze,Promise:C.b,Uri:v,Token:je});var $e=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();var Ge=function(){function e(){this.activePromise=null,this.queuedPromise=null,this.queuedPromiseFactory=null}return e.prototype.queue=function(e){var t=this;if(this.activePromise){if(this.queuedPromiseFactory=e,!this.queuedPromise){var n=function(){t.queuedPromise=null;var e=t.queue(t.queuedPromiseFactory);return t.queuedPromiseFactory=null,e};this.queuedPromise=new C.b(function(e,i,r){t.activePromise.then(n,n,r).done(e)},function(){t.activePromise.cancel()})}return new C.b(function(e,n,i){t.queuedPromise.then(e,n,i)},function(){})}return this.activePromise=e(),new C.b(function(e,n,i){t.activePromise.done(function(n){t.activePromise=null,e(n)},function(e){t.activePromise=null,n(e)},i)},function(){t.activePromise.cancel()})},e}(),He=(function(){function e(){this.current=C.b.wrap(null)}e.prototype.queue=function(e){return this.current=this.current.then(function(){return e()})}}(),function(e){function t(t){var n=e.call(this,t)||this;return n.throttler=new Ge,n}$e(t,e),t.prototype.trigger=function(t,n){var i=this;return e.prototype.trigger.call(this,function(){return i.throttler.queue(t)},n)}}(function(){function e(e){this.defaultDelay=e,this.timeout=null,this.completionPromise=null,this.onSuccess=null,this.task=null}return e.prototype.trigger=function(e,t){var n=this;return void 0===t&&(t=this.defaultDelay),this.task=e,this.cancelTimeout(),this.completionPromise||(this.completionPromise=new C.b(function(e){n.onSuccess=e},function(){}).then(function(){n.completionPromise=null,n.onSuccess=null;var e=n.task;return n.task=null,e()})),this.timeout=setTimeout(function(){n.timeout=null,n.onSuccess(null)},t),this.completionPromise},e.prototype.isTriggered=function(){return null!==this.timeout},e.prototype.cancel=function(){this.cancelTimeout(),this.completionPromise&&(this.completionPromise.cancel(),this.completionPromise=null)},e.prototype.cancelTimeout=function(){null!==this.timeout&&(clearTimeout(this.timeout),this.timeout=null)},e}()),function(){function e(){var e=this;this._isOpen=!1,this._promise=new C.b(function(t,n,i){e._completePromise=t},function(){console.warn("You should really not try to cancel this ready promise!")})}e.prototype.isOpen=function(){return this._isOpen},e.prototype.open=function(){this._isOpen=!0,this._completePromise(!0)},e.prototype.wait=function(){return this._promise}}(),function(e){function t(t){var n,i,r,o;return n=e.call(this,function(e,t,n){i=e,r=t,o=n},function(){var e;r(((e=new Error(be)).name=e.message,e))})||this,t.then(i,r,o),n}return $e(t,e),t}(C.b));function Je(e,t){return n=e,C.b.is(n)&&"function"==typeof n.done?new C.b(function(n,i,r){e.done(function(e){try{t(e)}catch(e){fe(e)}n(e)},function(e){try{t(e)}catch(e){fe(e)}i(e)},function(e){r(e)})},function(){e.cancel()}):(e.then(function(e){return t()},function(e){return t()}),e);var n}var Ye=function(e){function t(){return e.call(this,1)||this}return $e(t,e),t}(function(){function e(e){this.maxDegreeOfParalellism=e,this.outstandingPromises=[],this.runningPromises=0,this._onFinished=new ke}return Object.defineProperty(e.prototype,"onFinished",{get:function(){return this._onFinished.event},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this.runningPromises+this.outstandingPromises.length},enumerable:!0,configurable:!0}),e.prototype.queue=function(e){var t=this;return new C.b(function(n,i,r){t.outstandingPromises.push({factory:e,c:n,e:i,p:r}),t.consume()})},e.prototype.consume=function(){for(var e=this;this.outstandingPromises.length&&this.runningPromises<this.maxDegreeOfParalellism;){var t=this.outstandingPromises.shift();this.runningPromises++;var n=t.factory();n.done(t.c,t.e,t.p),n.done(function(){return e.consumed()},function(){return e.consumed()})}},e.prototype.consumed=function(){this.runningPromises--,this.outstandingPromises.length>0?this.consume():this._onFinished.fire()},e.prototype.dispose=function(){this._onFinished.dispose()},e}());!function(){function e(){this.queues=Object.create(null)}e.prototype.queueFor=function(e){var t=this,n=e.toString();if(!this.queues[n]){var i=new Ye;i.onFinished(function(){i.dispose(),delete t.queues[n]}),this.queues[n]=i}return this.queues[n]}}();(function(e){function t(){var t=e.call(this)||this;return t._token=-1,t}$e(t,e),t.prototype.dispose=function(){this.cancel(),e.prototype.dispose.call(this)},t.prototype.cancel=function(){-1!==this._token&&(clearTimeout(this._token),this._token=-1)},t.prototype.cancelAndSet=function(e,t){var n=this;this.cancel(),this._token=setTimeout(function(){n._token=-1,e()},t)},t.prototype.setIfNotSet=function(e,t){var n=this;-1===this._token&&(this._token=setTimeout(function(){n._token=-1,e()},t))}})(ue),function(e){function t(){var t=e.call(this)||this;return t._token=-1,t}$e(t,e),t.prototype.dispose=function(){this.cancel(),e.prototype.dispose.call(this)},t.prototype.cancel=function(){-1!==this._token&&(clearInterval(this._token),this._token=-1)},t.prototype.cancelAndSet=function(e,t){this.cancel(),this._token=setInterval(function(){e()},t)}}(ue),function(){function e(e,t){this.timeoutToken=-1,this.runner=e,this.timeout=t,this.timeoutHandler=this.onTimeout.bind(this)}e.prototype.dispose=function(){this.cancel(),this.runner=null},e.prototype.cancel=function(){this.isScheduled()&&(clearTimeout(this.timeoutToken),this.timeoutToken=-1)},e.prototype.schedule=function(e){void 0===e&&(e=this.timeout),this.cancel(),this.timeoutToken=setTimeout(this.timeoutHandler,e)},e.prototype.isScheduled=function(){return-1!==this.timeoutToken},e.prototype.onTimeout=function(){this.timeoutToken=-1,this.runner&&this.runner()}}();!function(e){function t(){return null!==e&&e.apply(this,arguments)||this}$e(t,e),t.prototype.throttle=function(e){var t=this;return this.suspended=!0,Je(e,function(){return t.resume()})},t.prototype.fire=function(t){return this.suspended?(this.lastEvent=t,void(this.hasLastEvent=!0)):e.prototype.fire.call(this,t)},t.prototype.resume=function(){this.suspended=!1,this.hasLastEvent&&this.fire(this.lastEvent),this.hasLastEvent=!1,this.lastEvent=void 0}}(ke);var Xe=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Qe="$initialize";var Ze=function(){function e(e){this._workerId=-1,this._handler=e,this._lastSentReq=0,this._pendingReplies=Object.create(null)}return e.prototype.setWorkerId=function(e){this._workerId=e},e.prototype.sendMessage=function(e,t){var n=String(++this._lastSentReq),i={c:null,e:null},r=new C.b(function(e,t,n){i.c=e,i.e=t},function(){});return this._pendingReplies[n]=i,this._send({vsWorker:this._workerId,req:n,method:e,args:t}),r},e.prototype.handleMessage=function(e){var t;try{t=JSON.parse(e)}catch(e){}t&&t.vsWorker&&(-1!==this._workerId&&t.vsWorker!==this._workerId||this._handleMessage(t))},e.prototype._handleMessage=function(e){var t=this;if(e.seq){var n=e;if(!this._pendingReplies[n.seq])return void console.warn("Got reply to unknown seq");var i=this._pendingReplies[n.seq];if(delete this._pendingReplies[n.seq],n.err){var r=n.err;return n.err.$isError&&((r=new Error).name=n.err.name,r.message=n.err.message,r.stack=n.err.stack),void i.e(r)}i.c(n.res)}else{var o=e,s=o.req;this._handler.handleMessage(o.method,o.args).then(function(e){t._send({vsWorker:t._workerId,seq:s,res:e,err:void 0})},function(e){e.detail instanceof Error&&(e.detail=ge(e.detail)),t._send({vsWorker:t._workerId,seq:s,res:void 0,err:ge(e)})})}},e.prototype._send=function(e){var t=JSON.stringify(e);this._handler.sendMessage(t)},e}(),et=(function(e){function t(t,n){var i=e.call(this)||this,r=null,o=null;i._worker=i._register(t.create("vs/base/common/worker/simpleWorker",function(e){i._protocol.handleMessage(e)},function(e){o(e)})),i._protocol=new Ze({sendMessage:function(e){i._worker.postMessage(e)},handleMessage:function(e,t){return C.b.as(null)}}),i._protocol.setWorkerId(i._worker.getId());var s=null;void 0!==self.require&&"function"==typeof self.require.getConfig?s=self.require.getConfig():void 0!==self.requirejs&&(s=self.requirejs.s.contexts._.config),i._lazyProxy=new C.b(function(e,t,n){r=e,o=t},function(){}),i._onModuleLoaded=i._protocol.sendMessage(Qe,[i._worker.getId(),n,s]),i._onModuleLoaded.then(function(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=l(e[n],a);r(t)},function(e){o(e),i._onError("Worker failed to load "+n,e)});var a=function(e,t){return i._request(e,t)},l=function(e,t){return function(){var n=Array.prototype.slice.call(arguments,0);return t(e,n)}};return i}Xe(t,e),t.prototype.getProxyObject=function(){return new He(this._lazyProxy)},t.prototype._request=function(e,t){var n=this;return new C.b(function(i,r,o){n._onModuleLoaded.then(function(){n._protocol.sendMessage(e,t).then(i,r)},r)},function(){})},t.prototype._onError=function(e,t){console.error(e),console.info(t)}}(ue),function(){function e(e,t){var n=this;this._requestHandler=t,this._protocol=new Ze({sendMessage:function(t){e(t)},handleMessage:function(e,t){return n._handleMessage(e,t)}})}return e.prototype.onmessage=function(e){this._protocol.handleMessage(e)},e.prototype._handleMessage=function(e,t){if(e===Qe)return this.initialize(t[0],t[1],t[2]);if(!this._requestHandler||"function"!=typeof this._requestHandler[e])return C.b.wrapError(new Error("Missing requestHandler or method: "+e));try{return C.b.as(this._requestHandler[e].apply(this._requestHandler,t))}catch(e){return C.b.wrapError(e)}},e.prototype.initialize=function(e,t,n){var i,r,o=this;if(this._protocol.setWorkerId(e),this._requestHandler){var s=[];for(var a in this._requestHandler)"function"==typeof this._requestHandler[a]&&s.push(a);return C.b.as(s)}n&&(void 0!==n.baseUrl&&delete n.baseUrl,void 0!==n.paths&&void 0!==n.paths.vs&&delete n.paths.vs,n.catchError=!0,self.require.config(n));var l=new C.b(function(e,t,n){i=e,r=t});return self.require([t],function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[0];o._requestHandler=n.create();var r=[];for(var s in o._requestHandler)"function"==typeof o._requestHandler[s]&&r.push(s);i(r)},r),l},e}());var tt,nt,it,rt,ot,st,at,lt,ct=!1;function ht(e){if(!ct){ct=!0;var t=new We(e),n=new et(function(e){self.postMessage(e)},t);self.onmessage=function(e){n.onmessage(e.data)}}}self.onmessage=function(e){ct||ht(null)},function(e){e.create=function(e,t){return{line:e,character:t}},e.is=function(e){var t=e;return Nt.defined(t)&&Nt.number(t.line)&&Nt.number(t.character)}}(tt||(tt={})),function(e){e.create=function(e,t,n,i){if(Nt.number(e)&&Nt.number(t)&&Nt.number(n)&&Nt.number(i))return{start:tt.create(e,t),end:tt.create(n,i)};if(tt.is(e)&&tt.is(t))return{start:e,end:t};throw new Error("Range#create called with invalid arguments["+e+", "+t+", "+n+", "+i+"]")},e.is=function(e){var t=e;return Nt.defined(t)&&tt.is(t.start)&&tt.is(t.end)}}(nt||(nt={})),function(e){e.create=function(e,t){return{uri:e,range:t}},e.is=function(e){var t=e;return Nt.defined(t)&&nt.is(t.range)&&(Nt.string(t.uri)||Nt.undefined(t.uri))}}(it||(it={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(rt||(rt={})),function(e){e.create=function(e,t,n,i,r){var o={range:e,message:t};return Nt.defined(n)&&(o.severity=n),Nt.defined(i)&&(o.code=i),Nt.defined(r)&&(o.source=r),o},e.is=function(e){var t=e;return Nt.defined(t)&&nt.is(t.range)&&Nt.string(t.message)&&(Nt.number(t.severity)||Nt.undefined(t.severity))&&(Nt.number(t.code)||Nt.string(t.code)||Nt.undefined(t.code))&&(Nt.string(t.source)||Nt.undefined(t.source))}}(ot||(ot={})),function(e){e.create=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var r={title:e,command:t};return Nt.defined(n)&&n.length>0&&(r.arguments=n),r},e.is=function(e){var t=e;return Nt.defined(t)&&Nt.string(t.title)&&Nt.string(t.title)}}(st||(st={})),function(e){e.replace=function(e,t){return{range:e,newText:t}},e.insert=function(e,t){return{range:{start:e,end:e},newText:t}},e.del=function(e){return{range:e,newText:""}}}(at||(at={})),function(e){e.create=function(e,t){return{textDocument:e,edits:t}},e.is=function(e){var t=e;return Nt.defined(t)&&ut.is(t.textDocument)&&Array.isArray(t.edits)}}(lt||(lt={}));var dt,ut,mt,pt,ft,gt,bt,yt,vt,wt,xt,kt,Ct,St,_t,Ft,Et,It,At=function(){function e(e){this.edits=e}return e.prototype.insert=function(e,t){this.edits.push(at.insert(e,t))},e.prototype.replace=function(e,t){this.edits.push(at.replace(e,t))},e.prototype.delete=function(e){this.edits.push(at.del(e))},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e}();!function(){function e(e){var t=this;this._textEditChanges=Object.create(null),e&&(this._workspaceEdit=e,e.documentChanges?e.documentChanges.forEach(function(e){var n=new At(e.edits);t._textEditChanges[e.textDocument.uri]=n}):e.changes&&Object.keys(e.changes).forEach(function(n){var i=new At(e.changes[n]);t._textEditChanges[n]=i}))}Object.defineProperty(e.prototype,"edit",{get:function(){return this._workspaceEdit},enumerable:!0,configurable:!0}),e.prototype.getTextEditChange=function(e){if(ut.is(e)){if(this._workspaceEdit||(this._workspaceEdit={documentChanges:[]}),!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for versioned document changes.");var t=e;if(!(i=this._textEditChanges[t.uri])){var n={textDocument:t,edits:r=[]};this._workspaceEdit.documentChanges.push(n),i=new At(r),this._textEditChanges[t.uri]=i}return i}if(this._workspaceEdit||(this._workspaceEdit={changes:Object.create(null)}),!this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var i;if(!(i=this._textEditChanges[e])){var r=[];this._workspaceEdit.changes[e]=r,i=new At(r),this._textEditChanges[e]=i}return i}}();!function(e){e.create=function(e){return{uri:e}},e.is=function(e){var t=e;return Nt.defined(t)&&Nt.string(t.uri)}}(dt||(dt={})),function(e){e.create=function(e,t){return{uri:e,version:t}},e.is=function(e){var t=e;return Nt.defined(t)&&Nt.string(t.uri)&&Nt.number(t.version)}}(ut||(ut={})),function(e){e.create=function(e,t,n,i){return{uri:e,languageId:t,version:n,text:i}},e.is=function(e){var t=e;return Nt.defined(t)&&Nt.string(t.uri)&&Nt.string(t.languageId)&&Nt.number(t.version)&&Nt.string(t.text)}}(mt||(mt={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}(pt||(pt={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(ft||(ft={})),function(e){e.PlainText=1,e.Snippet=2}(gt||(gt={})),function(e){e.create=function(e){return{label:e}}}(bt||(bt={})),function(e){e.create=function(e,t){return{items:e||[],isIncomplete:!!t}}}(yt||(yt={})),function(e){e.fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}}(vt||(vt={})),function(e){e.create=function(e,t){return t?{label:e,documentation:t}:{label:e}}}(wt||(wt={})),function(e){e.create=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var r={label:e};return Nt.defined(t)&&(r.documentation=t),Nt.defined(n)?r.parameters=n:r.parameters=[],r}}(xt||(xt={})),function(e){e.Text=1,e.Read=2,e.Write=3}(kt||(kt={})),function(e){e.create=function(e,t){var n={range:e};return Nt.number(t)&&(n.kind=t),n}}(Ct||(Ct={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(St||(St={})),function(e){e.create=function(e,t,n,i,r){var o={name:e,kind:t,location:{uri:i,range:n}};return r&&(o.containerName=r),o}}(_t||(_t={})),function(e){e.create=function(e){return{diagnostics:e}},e.is=function(e){var t=e;return Nt.defined(t)&&Nt.typedArray(t.diagnostics,ot.is)}}(Ft||(Ft={})),function(e){e.create=function(e,t){var n={range:e};return Nt.defined(t)&&(n.data=t),n},e.is=function(e){var t=e;return Nt.defined(t)&&nt.is(t.range)&&(Nt.undefined(t.command)||st.is(t.command))}}(Et||(Et={})),function(e){e.create=function(e,t){return{tabSize:e,insertSpaces:t}},e.is=function(e){var t=e;return Nt.defined(t)&&Nt.number(t.tabSize)&&Nt.boolean(t.insertSpaces)}}(It||(It={}));var Pt=function(){return function(){}}();!function(e){e.create=function(e,t){return{range:e,target:t}},e.is=function(e){var t=e;return Nt.defined(t)&&nt.is(t.range)&&(Nt.undefined(t.target)||Nt.string(t.target))}}(Pt||(Pt={}));var Tt,Ot;!function(e){e.create=function(e,t,n,i){return new Lt(e,t,n,i)},e.is=function(e){var t=e;return!!(Nt.defined(t)&&Nt.string(t.uri)&&(Nt.undefined(t.languageId)||Nt.string(t.languageId))&&Nt.number(t.lineCount)&&Nt.func(t.getText)&&Nt.func(t.positionAt)&&Nt.func(t.offsetAt))},e.applyEdits=function(e,t){for(var n=e.getText(),i=function e(t,n){if(t.length<=1)return t;var i=t.length/2|0,r=t.slice(0,i),o=t.slice(i);e(r,n),e(o,n);for(var s=0,a=0,l=0;s<r.length&&a<o.length;){var c=n(r[s],o[a]);t[l++]=c<=0?r[s++]:o[a++]}for(;s<r.length;)t[l++]=r[s++];for(;a<o.length;)t[l++]=o[a++];return t}(t,function(e,t){return 0==e.range.start.line-t.range.start.line?e.range.start.character-t.range.start.character:0}),r=n.length,o=i.length-1;o>=0;o--){var s=i[o],a=e.offsetAt(s.range.start),l=e.offsetAt(s.range.end);if(!(l<=r))throw new Error("Ovelapping edit");n=n.substring(0,a)+s.newText+n.substring(l,n.length),r=a}return n}}(Tt||(Tt={})),function(e){e.Manual=1,e.AfterDelay=2,e.FocusOut=3}(Ot||(Ot={}));var Nt,Dt,Lt=function(){function e(e,t,n,i){this._uri=e,this._languageId=t,this._version=n,this._content=i,this._lineOffsets=null}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),e.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content},e.prototype.update=function(e,t){this._content=e.text,this._version=t,this._lineOffsets=null},e.prototype.getLineOffsets=function(){if(null===this._lineOffsets){for(var e=[],t=this._content,n=!0,i=0;i<t.length;i++){n&&(e.push(i),n=!1);var r=t.charAt(i);n="\r"===r||"\n"===r,"\r"===r&&i+1<t.length&&"\n"===t.charAt(i+1)&&i++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),n=0,i=t.length;if(0===i)return tt.create(0,e);for(;n<i;){var r=Math.floor((n+i)/2);t[r]>e?i=r:n=r+1}var o=n-1;return tt.create(o,e-t[o])},e.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var n=t[e.line],i=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,i),n)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),e}();!function(e){var t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.func=function(e){return"[object Function]"===t.call(e)},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(Nt||(Nt={})),function(e){e[e.Ident=0]="Ident",e[e.AtKeyword=1]="AtKeyword",e[e.String=2]="String",e[e.BadString=3]="BadString",e[e.UnquotedString=4]="UnquotedString",e[e.Hash=5]="Hash",e[e.Num=6]="Num",e[e.Percentage=7]="Percentage",e[e.Dimension=8]="Dimension",e[e.UnicodeRange=9]="UnicodeRange",e[e.CDO=10]="CDO",e[e.CDC=11]="CDC",e[e.Colon=12]="Colon",e[e.SemiColon=13]="SemiColon",e[e.CurlyL=14]="CurlyL",e[e.CurlyR=15]="CurlyR",e[e.ParenthesisL=16]="ParenthesisL",e[e.ParenthesisR=17]="ParenthesisR",e[e.BracketL=18]="BracketL",e[e.BracketR=19]="BracketR",e[e.Whitespace=20]="Whitespace",e[e.Includes=21]="Includes",e[e.Dashmatch=22]="Dashmatch",e[e.SubstringOperator=23]="SubstringOperator",e[e.PrefixOperator=24]="PrefixOperator",e[e.SuffixOperator=25]="SuffixOperator",e[e.Delim=26]="Delim",e[e.EMS=27]="EMS",e[e.EXS=28]="EXS",e[e.Length=29]="Length",e[e.Angle=30]="Angle",e[e.Time=31]="Time",e[e.Freq=32]="Freq",e[e.Exclamation=33]="Exclamation",e[e.Resolution=34]="Resolution",e[e.Comma=35]="Comma",e[e.Charset=36]="Charset",e[e.EscapedJavaScript=37]="EscapedJavaScript",e[e.BadEscapedJavaScript=38]="BadEscapedJavaScript",e[e.Comment=39]="Comment",e[e.SingleLineComment=40]="SingleLineComment",e[e.EOF=41]="EOF",e[e.CustomToken=42]="CustomToken"}(Dt||(Dt={}));var Rt=function(){function e(e){this.source=e,this.len=e.length,this.position=0}return e.prototype.substring=function(e,t){return void 0===t&&(t=this.position),this.source.substring(e,t)},e.prototype.eos=function(){return this.len<=this.position},e.prototype.pos=function(){return this.position},e.prototype.goBackTo=function(e){this.position=e},e.prototype.goBack=function(e){this.position-=e},e.prototype.advance=function(e){this.position+=e},e.prototype.nextChar=function(){return this.source.charCodeAt(this.position++)||0},e.prototype.peekChar=function(e){return void 0===e&&(e=0),this.source.charCodeAt(this.position+e)||0},e.prototype.lookbackChar=function(e){return void 0===e&&(e=0),this.source.charCodeAt(this.position-e)||0},e.prototype.advanceIfChar=function(e){return e===this.source.charCodeAt(this.position)&&(this.position++,!0)},e.prototype.advanceIfChars=function(e){var t;if(this.position+e.length>this.source.length)return!1;for(t=0;t<e.length;t++)if(this.source.charCodeAt(this.position+t)!==e[t])return!1;return this.advance(t),!0},e.prototype.advanceWhileChar=function(e){for(var t=this.position;this.position<this.len&&e(this.source.charCodeAt(this.position));)this.position++;return this.position-t},e}(),zt="a".charCodeAt(0),Mt="f".charCodeAt(0),Ut="z".charCodeAt(0),jt="A".charCodeAt(0),Vt="F".charCodeAt(0),Bt="Z".charCodeAt(0),Kt="0".charCodeAt(0),qt="9".charCodeAt(0),Wt="~".charCodeAt(0),$t="^".charCodeAt(0),Gt="=".charCodeAt(0),Ht="|".charCodeAt(0),Jt="-".charCodeAt(0),Yt="_".charCodeAt(0),Xt="%".charCodeAt(0),Qt="*".charCodeAt(0),Zt="(".charCodeAt(0),en=")".charCodeAt(0),tn="<".charCodeAt(0),nn=">".charCodeAt(0),rn="@".charCodeAt(0),on="#".charCodeAt(0),sn="$".charCodeAt(0),an="\\".charCodeAt(0),ln="/".charCodeAt(0),cn="\n".charCodeAt(0),hn="\r".charCodeAt(0),dn="\f".charCodeAt(0),un='"'.charCodeAt(0),mn="'".charCodeAt(0),pn=" ".charCodeAt(0),fn="\t".charCodeAt(0),gn=";".charCodeAt(0),bn=":".charCodeAt(0),yn="{".charCodeAt(0),vn="}".charCodeAt(0),wn="[".charCodeAt(0),xn="]".charCodeAt(0),kn=",".charCodeAt(0),Cn=".".charCodeAt(0),Sn="!".charCodeAt(0),_n={};_n[gn]=Dt.SemiColon,_n[bn]=Dt.Colon,_n[yn]=Dt.CurlyL,_n[vn]=Dt.CurlyR,_n[xn]=Dt.BracketR,_n[wn]=Dt.BracketL,_n[Zt]=Dt.ParenthesisL,_n[en]=Dt.ParenthesisR,_n[kn]=Dt.Comma;var Fn={};Fn.em=Dt.EMS,Fn.ex=Dt.EXS,Fn.px=Dt.Length,Fn.cm=Dt.Length,Fn.mm=Dt.Length,Fn.in=Dt.Length,Fn.pt=Dt.Length,Fn.pc=Dt.Length,Fn.deg=Dt.Angle,Fn.rad=Dt.Angle,Fn.grad=Dt.Angle,Fn.ms=Dt.Time,Fn.s=Dt.Time,Fn.hz=Dt.Freq,Fn.khz=Dt.Freq,Fn["%"]=Dt.Percentage,Fn.dpi=Dt.Resolution,Fn.dpcm=Dt.Resolution;var En,In,An=function(){function e(){this.ignoreComment=!0,this.ignoreWhitespace=!0,this.inURL=!1}return e.prototype.setSource=function(e){this.stream=new Rt(e)},e.prototype.finishToken=function(e,t,n){return{offset:e,len:this.stream.pos()-e,type:t,text:n||this.stream.substring(e)}},e.prototype.substring=function(e,t){return this.stream.substring(e,e+t)},e.prototype.pos=function(){return this.stream.pos()},e.prototype.goBackTo=function(e){this.stream.goBackTo(e)},e.prototype.scanUnquotedString=function(){var e=this.stream.pos(),t=[];return this._unquotedString(t)?this.finishToken(e,Dt.UnquotedString,t.join("")):null},e.prototype.scan=function(){var e=this.trivia();if(null!==e)return e;var t=this.stream.pos();return this.stream.eos()?this.finishToken(t,Dt.EOF):this.scanNext(t)},e.prototype.scanNext=function(e){if(this.stream.advanceIfChars([tn,Sn,Jt,Jt]))return this.finishToken(e,Dt.CDO);if(this.stream.advanceIfChars([Jt,Jt,nn]))return this.finishToken(e,Dt.CDC);var t=[];if(this.ident(t))return this.finishToken(e,Dt.Ident,t.join(""));if(this.stream.advanceIfChar(rn)){if(t=["@"],this._name(t)){var n=t.join("");return"@charset"===n?this.finishToken(e,Dt.Charset,n):this.finishToken(e,Dt.AtKeyword,n)}return this.finishToken(e,Dt.Delim)}if(this.stream.advanceIfChar(on))return t=["#"],this._name(t)?this.finishToken(e,Dt.Hash,t.join("")):this.finishToken(e,Dt.Delim);if(this.stream.advanceIfChar(Sn))return this.finishToken(e,Dt.Exclamation);if(this._number()){var i=this.stream.pos();if(t=[this.stream.substring(e,i)],this.stream.advanceIfChar(Xt))return this.finishToken(e,Dt.Percentage);if(this.ident(t)){var r=this.stream.substring(i).toLowerCase(),o=Fn[r];return void 0!==o?this.finishToken(e,o,t.join("")):this.finishToken(e,Dt.Dimension,t.join(""))}return this.finishToken(e,Dt.Num)}t=[];var s=this._string(t);return null!==s?this.finishToken(e,s,t.join("")):void 0!==(s=_n[this.stream.peekChar()])?(this.stream.advance(1),this.finishToken(e,s)):this.stream.peekChar(0)===Wt&&this.stream.peekChar(1)===Gt?(this.stream.advance(2),this.finishToken(e,Dt.Includes)):this.stream.peekChar(0)===Ht&&this.stream.peekChar(1)===Gt?(this.stream.advance(2),this.finishToken(e,Dt.Dashmatch)):this.stream.peekChar(0)===Qt&&this.stream.peekChar(1)===Gt?(this.stream.advance(2),this.finishToken(e,Dt.SubstringOperator)):this.stream.peekChar(0)===$t&&this.stream.peekChar(1)===Gt?(this.stream.advance(2),this.finishToken(e,Dt.PrefixOperator)):this.stream.peekChar(0)===sn&&this.stream.peekChar(1)===Gt?(this.stream.advance(2),this.finishToken(e,Dt.SuffixOperator)):(this.stream.nextChar(),this.finishToken(e,Dt.Delim))},e.prototype._matchWordAnyCase=function(e){var t=0;return this.stream.advanceWhileChar(function(n){var i=e[t]===n||e[t+1]===n;return i&&(t+=2),i}),t===e.length||(this.stream.goBack(t/2),!1)},e.prototype.trivia=function(){for(;;){var e=this.stream.pos();if(this._whitespace()){if(!this.ignoreWhitespace)return this.finishToken(e,Dt.Whitespace)}else{if(!this.comment())return null;if(!this.ignoreComment)return this.finishToken(e,Dt.Comment)}}},e.prototype.comment=function(){if(this.stream.advanceIfChars([ln,Qt])){var e=!1,t=!1;return this.stream.advanceWhileChar(function(n){return t&&n===ln?(e=!0,!1):(t=n===Qt,!0)}),e&&this.stream.advance(1),!0}return!1},e.prototype._number=function(){var e,t=0;return this.stream.peekChar()===Cn&&(t=1),(e=this.stream.peekChar(t))>=Kt&&e<=qt&&(this.stream.advance(t+1),this.stream.advanceWhileChar(function(e){return e>=Kt&&e<=qt||0===t&&e===Cn}),!0)},e.prototype._newline=function(e){var t=this.stream.peekChar();switch(t){case hn:case dn:case cn:return this.stream.advance(1),e.push(String.fromCharCode(t)),t===hn&&this.stream.advanceIfChar(cn)&&e.push("\n"),!0}return!1},e.prototype._escape=function(e,t){var n=this.stream.peekChar();if(n===an){this.stream.advance(1),n=this.stream.peekChar();for(var i=0;i<6&&(n>=Kt&&n<=qt||n>=zt&&n<=Mt||n>=jt&&n<=Vt);)this.stream.advance(1),n=this.stream.peekChar(),i++;if(i>0){try{var r=parseInt(this.stream.substring(this.stream.pos()-i),16);r&&e.push(String.fromCharCode(r))}catch(e){}return n===pn||n===fn?this.stream.advance(1):this._newline([]),!0}if(n!==hn&&n!==dn&&n!==cn)return this.stream.advance(1),e.push(String.fromCharCode(n)),!0;if(t)return this._newline(e)}return!1},e.prototype._stringChar=function(e,t){var n=this.stream.peekChar();return 0!==n&&n!==e&&n!==an&&n!==hn&&n!==dn&&n!==cn&&(this.stream.advance(1),t.push(String.fromCharCode(n)),!0)},e.prototype._string=function(e){if(this.stream.peekChar()===mn||this.stream.peekChar()===un){var t=this.stream.nextChar();for(e.push(String.fromCharCode(t));this._stringChar(t,e)||this._escape(e,!0););return this.stream.peekChar()===t?(this.stream.nextChar(),e.push(String.fromCharCode(t)),Dt.String):Dt.BadString}return null},e.prototype._unquotedChar=function(e){var t=this.stream.peekChar();return 0!==t&&t!==an&&t!==mn&&t!==un&&t!==Zt&&t!==en&&t!==pn&&t!==fn&&t!==cn&&t!==dn&&t!==hn&&(this.stream.advance(1),e.push(String.fromCharCode(t)),!0)},e.prototype._unquotedString=function(e){for(var t=!1;this._unquotedChar(e)||this._escape(e);)t=!0;return t},e.prototype._whitespace=function(){return this.stream.advanceWhileChar(function(e){return e===pn||e===fn||e===cn||e===dn||e===hn})>0},e.prototype._name=function(e){for(var t=!1;this._identChar(e)||this._escape(e);)t=!0;return t},e.prototype.ident=function(e){var t=this.stream.pos();if(this._minus(e)&&this._minus(e)){if(this._identFirstChar(e)||this._escape(e)){for(;this._identChar(e)||this._escape(e););return!0}}else if(this._identFirstChar(e)||this._escape(e)){for(;this._identChar(e)||this._escape(e););return!0}return this.stream.goBackTo(t),!1},e.prototype._identFirstChar=function(e){var t=this.stream.peekChar();return(t===Yt||t>=zt&&t<=Ut||t>=jt&&t<=Bt||t>=128&&t<=65535)&&(this.stream.advance(1),e.push(String.fromCharCode(t)),!0)},e.prototype._minus=function(e){var t=this.stream.peekChar();return t===Jt&&(this.stream.advance(1),e.push(String.fromCharCode(t)),!0)},e.prototype._identChar=function(e){var t=this.stream.peekChar();return(t===Yt||t===Jt||t>=zt&&t<=Ut||t>=jt&&t<=Bt||t>=Kt&&t<=qt||t>=128&&t<=65535)&&(this.stream.advance(1),e.push(String.fromCharCode(t)),!0)},e}(),Pn=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function Tn(e,t){var n=null;return!e||t<e.offset||t>e.end?null:(e.accept(function(e){return-1===e.offset&&-1===e.length||e.offset<=t&&e.end>=t&&(n?e.length<=n.length&&(n=e):n=e,!0)}),n)}function On(e,t){for(var n=Tn(e,t),i=[];n;)i.unshift(n),n=n.parent;return i}!function(e){e[e.Undefined=0]="Undefined",e[e.Identifier=1]="Identifier",e[e.Stylesheet=2]="Stylesheet",e[e.Ruleset=3]="Ruleset",e[e.Selector=4]="Selector",e[e.SimpleSelector=5]="SimpleSelector",e[e.SelectorInterpolation=6]="SelectorInterpolation",e[e.SelectorCombinator=7]="SelectorCombinator",e[e.SelectorCombinatorParent=8]="SelectorCombinatorParent",e[e.SelectorCombinatorSibling=9]="SelectorCombinatorSibling",e[e.SelectorCombinatorAllSiblings=10]="SelectorCombinatorAllSiblings",e[e.SelectorCombinatorShadowPiercingDescendant=11]="SelectorCombinatorShadowPiercingDescendant",e[e.Page=12]="Page",e[e.PageBoxMarginBox=13]="PageBoxMarginBox",e[e.ClassSelector=14]="ClassSelector",e[e.IdentifierSelector=15]="IdentifierSelector",e[e.ElementNameSelector=16]="ElementNameSelector",e[e.PseudoSelector=17]="PseudoSelector",e[e.AttributeSelector=18]="AttributeSelector",e[e.Declaration=19]="Declaration",e[e.Declarations=20]="Declarations",e[e.Property=21]="Property",e[e.Expression=22]="Expression",e[e.BinaryExpression=23]="BinaryExpression",e[e.Term=24]="Term",e[e.Operator=25]="Operator",e[e.Value=26]="Value",e[e.StringLiteral=27]="StringLiteral",e[e.URILiteral=28]="URILiteral",e[e.EscapedValue=29]="EscapedValue",e[e.Function=30]="Function",e[e.NumericValue=31]="NumericValue",e[e.HexColorValue=32]="HexColorValue",e[e.MixinDeclaration=33]="MixinDeclaration",e[e.MixinReference=34]="MixinReference",e[e.VariableName=35]="VariableName",e[e.VariableDeclaration=36]="VariableDeclaration",e[e.Prio=37]="Prio",e[e.Interpolation=38]="Interpolation",e[e.NestedProperties=39]="NestedProperties",e[e.ExtendsReference=40]="ExtendsReference",e[e.SelectorPlaceholder=41]="SelectorPlaceholder",e[e.Debug=42]="Debug",e[e.If=43]="If",e[e.Else=44]="Else",e[e.For=45]="For",e[e.Each=46]="Each",e[e.While=47]="While",e[e.MixinContent=48]="MixinContent",e[e.Media=49]="Media",e[e.Keyframe=50]="Keyframe",e[e.FontFace=51]="FontFace",e[e.Import=52]="Import",e[e.Namespace=53]="Namespace",e[e.Invocation=54]="Invocation",e[e.FunctionDeclaration=55]="FunctionDeclaration",e[e.ReturnStatement=56]="ReturnStatement",e[e.MediaQuery=57]="MediaQuery",e[e.FunctionParameter=58]="FunctionParameter",e[e.FunctionArgument=59]="FunctionArgument",e[e.KeyframeSelector=60]="KeyframeSelector",e[e.ViewPort=61]="ViewPort",e[e.Document=62]="Document",e[e.AtApplyRule=63]="AtApplyRule",e[e.CustomPropertyDeclaration=64]="CustomPropertyDeclaration",e[e.CustomPropertySet=65]="CustomPropertySet",e[e.ListEntry=66]="ListEntry",e[e.Supports=67]="Supports",e[e.SupportsCondition=68]="SupportsCondition",e[e.NamespacePrefix=69]="NamespacePrefix",e[e.GridLine=70]="GridLine",e[e.Plugin=71]="Plugin"}(En||(En={})),function(e){e[e.Mixin=0]="Mixin",e[e.Rule=1]="Rule",e[e.Variable=2]="Variable",e[e.Function=3]="Function",e[e.Keyframe=4]="Keyframe",e[e.Unknown=5]="Unknown"}(In||(In={}));var Nn,Dn=function(){function e(e,t,n){void 0===e&&(e=-1),void 0===t&&(t=-1),this.parent=null,this.offset=e,this.length=t,n&&(this.nodeType=n)}return Object.defineProperty(e.prototype,"end",{get:function(){return this.offset+this.length},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this.nodeType||En.Undefined},set:function(e){this.nodeType=e},enumerable:!0,configurable:!0}),e.prototype.getTextProvider=function(){for(var e=this;e&&!e.textProvider;)e=e.parent;return e?e.textProvider:function(){return"unknown"}},e.prototype.getText=function(){return this.getTextProvider()(this.offset,this.length)},e.prototype.matches=function(e){return this.length===e.length&&this.getTextProvider()(this.offset,this.length)===e},e.prototype.startsWith=function(e){return this.length>=e.length&&this.getTextProvider()(this.offset,e.length)===e},e.prototype.endsWith=function(e){return this.length>=e.length&&this.getTextProvider()(this.end-e.length,e.length)===e},e.prototype.accept=function(e){if(e(this)&&this.children)for(var t=0,n=this.children;t<n.length;t++){n[t].accept(e)}},e.prototype.acceptVisitor=function(e){this.accept(e.visitNode.bind(e))},e.prototype.adoptChild=function(e,t){if(void 0===t&&(t=-1),e.parent&&e.parent.children){var n=e.parent.children.indexOf(e);n>=0&&e.parent.children.splice(n,1)}e.parent=this;var i=this.children;return i||(i=this.children=[]),-1!==t?i.splice(t,0,e):i.push(e),e},e.prototype.attachTo=function(e,t){return void 0===t&&(t=-1),e&&e.adoptChild(this,t),this},e.prototype.collectIssues=function(e){this.issues&&e.push.apply(e,this.issues)},e.prototype.addIssue=function(e){this.issues||(this.issues=[]),this.issues.push(e)},e.prototype.hasIssue=function(e){return this.issues&&this.issues.some(function(t){return t.getRule()===e})},e.prototype.isErroneous=function(e){return void 0===e&&(e=!1),!!(this.issues&&this.issues.length>0)||e&&this.children&&this.children.some(function(e){return e.isErroneous(!0)})},e.prototype.setNode=function(e,t,n){return void 0===n&&(n=-1),!!t&&(t.attachTo(this,n),this[e]=t,!0)},e.prototype.addChild=function(e){return!!e&&(this.children||(this.children=[]),e.attachTo(this),this.updateOffsetAndLength(e),!0)},e.prototype.updateOffsetAndLength=function(e){(e.offset<this.offset||-1===this.offset)&&(this.offset=e.offset);var t=e.end;(t>this.end||-1===this.length)&&(this.length=t-this.offset)},e.prototype.hasChildren=function(){return this.children&&this.children.length>0},e.prototype.getChildren=function(){return this.children?this.children.slice(0):[]},e.prototype.getChild=function(e){return this.children&&e<this.children.length?this.children[e]:null},e.prototype.addChildren=function(e){for(var t=0,n=e;t<n.length;t++){var i=n[t];this.addChild(i)}},e.prototype.findFirstChildBeforeOffset=function(e){if(this.children)for(var t=null,n=this.children.length-1;n>=0;n--)if((t=this.children[n]).offset<=e)return t;return null},e.prototype.findChildAtOffset=function(e,t){var n=this.findFirstChildBeforeOffset(e);return n&&n.end>=e?t&&n.findChildAtOffset(e,!0)||n:null},e.prototype.encloses=function(e){return this.offset<=e.offset&&this.offset+this.length>=e.offset+e.length},e.prototype.getParent=function(){for(var e=this.parent;e instanceof Ln;)e=e.parent;return e},e.prototype.findParent=function(e){for(var t=this;t&&t.type!==e;)t=t.parent;return t},e.prototype.setData=function(e,t){this.options||(this.options={}),this.options[e]=t},e.prototype.getData=function(e){return this.options&&this.options.hasOwnProperty(e)?this.options[e]:null},e}(),Ln=function(e){function t(t,n){void 0===n&&(n=-1);var i=e.call(this,-1,-1)||this;return i.attachTo(t,n),i.offset=-1,i.length=-1,i}return Pn(t,e),t}(Dn),Rn=function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.isCustomProperty=!1,i}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Identifier},enumerable:!0,configurable:!0}),t.prototype.containsInterpolation=function(){return this.hasChildren()},t}(Dn),zn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Stylesheet},enumerable:!0,configurable:!0}),t.prototype.setName=function(e){this.name=e},t}(Dn),Mn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Declarations},enumerable:!0,configurable:!0}),t}(Dn),Un=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),t.prototype.getDeclarations=function(){return this.declarations},t.prototype.setDeclarations=function(e){return this.setNode("declarations",e)},t}(Dn),jn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Ruleset},enumerable:!0,configurable:!0}),t.prototype.getSelectors=function(){return this.selectors||(this.selectors=new Ln(this)),this.selectors},t.prototype.isNested=function(){return this.parent&&null!==this.parent.findParent(En.Declarations)},t}(Un),Vn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Selector},enumerable:!0,configurable:!0}),t}(Dn),Bn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.SimpleSelector},enumerable:!0,configurable:!0}),t}(Dn),Kn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.AtApplyRule},enumerable:!0,configurable:!0}),t.prototype.setIdentifier=function(e){return this.setNode("identifier",e,0)},t.prototype.getIdentifier=function(){return this.identifier},t.prototype.getName=function(){return this.identifier?this.identifier.getText():""},t}(Dn),qn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),t}(Dn),Wn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.CustomPropertyDeclaration},enumerable:!0,configurable:!0}),t.prototype.setProperty=function(e){return this.setNode("property",e)},t.prototype.getProperty=function(){return this.property},t.prototype.setValue=function(e){return this.setNode("value",e)},t.prototype.getValue=function(){return this.value},t.prototype.setPropertySet=function(e){return this.setNode("propertySet",e)},t.prototype.getPropertySet=function(){return this.propertySet},t}(qn),$n=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.CustomPropertySet},enumerable:!0,configurable:!0}),t}(Un),Gn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Declaration},enumerable:!0,configurable:!0}),t.prototype.setProperty=function(e){return this.setNode("property",e)},t.prototype.getProperty=function(){return this.property},t.prototype.getFullPropertyName=function(){var e=this.property?this.property.getName():"unknown";if(this.parent instanceof Mn&&this.parent.getParent()instanceof si){var n=this.parent.getParent().getParent();if(n instanceof t)return n.getFullPropertyName()+e}return e},t.prototype.getNonPrefixedPropertyName=function(){var e=this.getFullPropertyName();if(e&&"-"===e.charAt(0)){var t=e.indexOf("-",1);if(-1!==t)return e.substring(t+1)}return e},t.prototype.setValue=function(e){return this.setNode("value",e)},t.prototype.getValue=function(){return this.value},t.prototype.setNestedProperties=function(e){return this.setNode("nestedProprties",e)},t.prototype.getNestedProperties=function(){return this.nestedProprties},t}(qn),Hn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Property},enumerable:!0,configurable:!0}),t.prototype.setIdentifier=function(e){return this.setNode("identifier",e)},t.prototype.getIdentifier=function(){return this.identifier},t.prototype.getName=function(){return this.getText()},t.prototype.isCustomProperty=function(){return this.identifier.isCustomProperty},t}(Dn),Jn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Function},enumerable:!0,configurable:!0}),t.prototype.setIdentifier=function(e){return this.setNode("identifier",e,0)},t.prototype.getIdentifier=function(){return this.identifier},t.prototype.getName=function(){return this.identifier?this.identifier.getText():""},t}(function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Invocation},enumerable:!0,configurable:!0}),t.prototype.getArguments=function(){return this.arguments||(this.arguments=new Ln(this)),this.arguments},t}(Dn)),Yn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.FunctionParameter},enumerable:!0,configurable:!0}),t.prototype.setIdentifier=function(e){return this.setNode("identifier",e,0)},t.prototype.getIdentifier=function(){return this.identifier},t.prototype.getName=function(){return this.identifier?this.identifier.getText():""},t.prototype.setDefaultValue=function(e){return this.setNode("defaultValue",e,0)},t.prototype.getDefaultValue=function(){return this.defaultValue},t}(Dn),Xn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.FunctionArgument},enumerable:!0,configurable:!0}),t.prototype.setIdentifier=function(e){return this.setNode("identifier",e,0)},t.prototype.getIdentifier=function(){return this.identifier},t.prototype.getName=function(){return this.identifier?this.identifier.getText():""},t.prototype.setValue=function(e){return this.setNode("value",e,0)},t.prototype.getValue=function(){return this.value},t}(Dn),Qn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.If},enumerable:!0,configurable:!0}),t.prototype.setExpression=function(e){return this.setNode("expression",e,0)},t.prototype.setElseClause=function(e){return this.setNode("elseClause",e)},t}(Un),Zn=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.For},enumerable:!0,configurable:!0}),t.prototype.setVariable=function(e){return this.setNode("variable",e,0)},t}(Un),ei=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Each},enumerable:!0,configurable:!0}),t.prototype.getVariables=function(){return this.variables||(this.variables=new Ln(this)),this.variables},t}(Un),ti=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.While},enumerable:!0,configurable:!0}),t}(Un),ni=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Else},enumerable:!0,configurable:!0}),t}(Un),ii=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.FunctionDeclaration},enumerable:!0,configurable:!0}),t.prototype.setIdentifier=function(e){return this.setNode("identifier",e,0)},t.prototype.getIdentifier=function(){return this.identifier},t.prototype.getName=function(){return this.identifier?this.identifier.getText():""},t.prototype.getParameters=function(){return this.parameters||(this.parameters=new Ln(this)),this.parameters},t}(Un),ri=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.ViewPort},enumerable:!0,configurable:!0}),t}(Un),oi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.FontFace},enumerable:!0,configurable:!0}),t}(Un),si=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.NestedProperties},enumerable:!0,configurable:!0}),t}(Un),ai=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Keyframe},enumerable:!0,configurable:!0}),t.prototype.setKeyword=function(e){return this.setNode("keyword",e,0)},t.prototype.getKeyword=function(){return this.keyword},t.prototype.setIdentifier=function(e){return this.setNode("identifier",e,0)},t.prototype.getIdentifier=function(){return this.identifier},t.prototype.getName=function(){return this.identifier?this.identifier.getText():""},t}(Un),li=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.KeyframeSelector},enumerable:!0,configurable:!0}),t}(Un),ci=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Import},enumerable:!0,configurable:!0}),t.prototype.setMedialist=function(e){return!!e&&(e.attachTo(this),this.medialist=e,!0)},t}(Dn),hi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Namespace},enumerable:!0,configurable:!0}),t}(Dn),di=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Media},enumerable:!0,configurable:!0}),t}(Un),ui=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Supports},enumerable:!0,configurable:!0}),t}(Un),mi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Document},enumerable:!0,configurable:!0}),t}(Un),pi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),t.prototype.getMediums=function(){return this.mediums||(this.mediums=new Ln(this)),this.mediums},t}(Dn),fi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.MediaQuery},enumerable:!0,configurable:!0}),t}(Dn),gi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.SupportsCondition},enumerable:!0,configurable:!0}),t}(Dn),bi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Page},enumerable:!0,configurable:!0}),t}(Un),yi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.PageBoxMarginBox},enumerable:!0,configurable:!0}),t}(Un),vi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Expression},enumerable:!0,configurable:!0}),t}(Dn),wi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.BinaryExpression},enumerable:!0,configurable:!0}),t.prototype.setLeft=function(e){return this.setNode("left",e)},t.prototype.getLeft=function(){return this.left},t.prototype.setRight=function(e){return this.setNode("right",e)},t.prototype.getRight=function(){return this.right},t.prototype.setOperator=function(e){return this.setNode("operator",e)},t.prototype.getOperator=function(){return this.operator},t}(Dn),xi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Term},enumerable:!0,configurable:!0}),t.prototype.setOperator=function(e){return this.setNode("operator",e)},t.prototype.getOperator=function(){return this.operator},t.prototype.setExpression=function(e){return this.setNode("expression",e)},t.prototype.getExpression=function(){return this.expression},t}(Dn),ki=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.AttributeSelector},enumerable:!0,configurable:!0}),t.prototype.setExpression=function(e){return this.setNode("expression",e)},t.prototype.getExpression=function(){return this.expression},t.prototype.setNamespacePrefix=function(e){return this.setNode("namespacePrefix",e)},t.prototype.getNamespacePrefix=function(){return this.namespacePrefix},t}(Dn),Ci=(function(e){function t(t,n){return e.call(this,t,n)||this}Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Operator},enumerable:!0,configurable:!0})}(Dn),function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.HexColorValue},enumerable:!0,configurable:!0}),t}(Dn)),Si=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.NumericValue},enumerable:!0,configurable:!0}),t.prototype.getValue=function(){for(var e,t=this.getText(),n=0,i=".".charCodeAt(0),r="0".charCodeAt(0),o="9".charCodeAt(0),s=0,a=t.length;s<a&&(r<=(e=t.charCodeAt(s))&&e<=o||e===i);s++)n+=1;return{value:t.substring(0,n),unit:n<t.length?t.substring(n):void 0}},t}(Dn),_i=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.VariableDeclaration},enumerable:!0,configurable:!0}),t.prototype.setVariable=function(e){return!!e&&(e.attachTo(this),this.variable=e,!0)},t.prototype.getVariable=function(){return this.variable},t.prototype.getName=function(){return this.variable?this.variable.getName():""},t.prototype.setValue=function(e){return!!e&&(e.attachTo(this),this.value=e,!0)},t.prototype.getValue=function(){return this.value},t}(qn),Fi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.Interpolation},enumerable:!0,configurable:!0}),t}(Dn),Ei=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.VariableName},enumerable:!0,configurable:!0}),t.prototype.getName=function(){return this.getText()},t}(Dn),Ii=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.ExtendsReference},enumerable:!0,configurable:!0}),t.prototype.getSelectors=function(){return this.selectors||(this.selectors=new Ln(this)),this.selectors},t}(Dn),Ai=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.MixinReference},enumerable:!0,configurable:!0}),t.prototype.getNamespaces=function(){return this.namespaces||(this.namespaces=new Ln(this)),this.namespaces},t.prototype.setIdentifier=function(e){return this.setNode("identifier",e,0)},t.prototype.getIdentifier=function(){return this.identifier},t.prototype.getName=function(){return this.identifier?this.identifier.getText():""},t.prototype.getArguments=function(){return this.arguments||(this.arguments=new Ln(this)),this.arguments},t.prototype.setContent=function(e){return this.setNode("content",e)},t.prototype.getContent=function(){return this.content},t}(Dn),Pi=function(e){function t(t,n){return e.call(this,t,n)||this}return Pn(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return En.MixinDeclaration},enumerable:!0,configurable:!0}),t.prototype.setIdentifier=function(e){return this.setNode("identifier",e,0)},t.prototype.getIdentifier=function(){return this.identifier},t.prototype.getName=function(){return this.identifier?this.identifier.getText():""},t.prototype.getParameters=function(){return this.parameters||(this.parameters=new Ln(this)),this.parameters},t.prototype.setGuard=function(e){return e&&(e.attachTo(this),this.guard=e),!1},t}(Un),Ti=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Pn(t,e),t.prototype.getConditions=function(){return this.conditions||(this.conditions=new Ln(this)),this.conditions},t}(Dn),Oi=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Pn(t,e),t.prototype.setVariable=function(e){return this.setNode("variable",e)},t}(Dn);!function(e){e[e.Ignore=1]="Ignore",e[e.Warning=2]="Warning",e[e.Error=4]="Error"}(Nn||(Nn={}));var Ni=function(){function e(e,t,n,i,r,o){void 0===r&&(r=e.offset),void 0===o&&(o=e.length),this.node=e,this.rule=t,this.level=n,this.message=i||t.message,this.offset=r,this.length=o}return e.prototype.getRule=function(){return this.rule},e.prototype.getLevel=function(){return this.level},e.prototype.getOffset=function(){return this.offset},e.prototype.getLength=function(){return this.length},e.prototype.getNode=function(){return this.node},e.prototype.getMessage=function(){return this.message},e}(),Di=function(){function e(){this.entries=[]}return e.entries=function(t){var n=new e;return t.acceptVisitor(n),n.entries},e.prototype.visitNode=function(e){return e.isErroneous()&&e.collectIssues(this.entries),!0},e}();function Li(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];return function(e,t){return 0===t.length?e:e.replace(/\{(\d+)\}/g,function(e,n){var i=n[0];return void 0!==t[i]?t[i]:e})}(t,n)}function Ri(e){return Li}var zi=Ri(),Mi=function(){return function(e,t){this.id=e,this.message=t}}(),Ui={NumberExpected:new Mi("css-numberexpected",zi("expected.number","number expected")),ConditionExpected:new Mi("css-conditionexpected",zi("expected.condt","condition expected")),RuleOrSelectorExpected:new Mi("css-ruleorselectorexpected",zi("expected.ruleorselector","at-rule or selector expected")),DotExpected:new Mi("css-dotexpected",zi("expected.dot","dot expected")),ColonExpected:new Mi("css-colonexpected",zi("expected.colon","colon expected")),SemiColonExpected:new Mi("css-semicolonexpected",zi("expected.semicolon","semi-colon expected")),TermExpected:new Mi("css-termexpected",zi("expected.term","term expected")),ExpressionExpected:new Mi("css-expressionexpected",zi("expected.expression","expression expected")),OperatorExpected:new Mi("css-operatorexpected",zi("expected.operator","operator expected")),IdentifierExpected:new Mi("css-identifierexpected",zi("expected.ident","identifier expected")),PercentageExpected:new Mi("css-percentageexpected",zi("expected.percentage","percentage expected")),URIOrStringExpected:new Mi("css-uriorstringexpected",zi("expected.uriorstring","uri or string expected")),URIExpected:new Mi("css-uriexpected",zi("expected.uri","URI expected")),VariableNameExpected:new Mi("css-varnameexpected",zi("expected.varname","variable name expected")),VariableValueExpected:new Mi("css-varvalueexpected",zi("expected.varvalue","variable value expected")),PropertyValueExpected:new Mi("css-propertyvalueexpected",zi("expected.propvalue","property value expected")),LeftCurlyExpected:new Mi("css-lcurlyexpected",zi("expected.lcurly","{ expected")),RightCurlyExpected:new Mi("css-rcurlyexpected",zi("expected.rcurly","} expected")),LeftSquareBracketExpected:new Mi("css-rbracketexpected",zi("expected.lsquare","[ expected")),RightSquareBracketExpected:new Mi("css-lbracketexpected",zi("expected.rsquare","] expected")),LeftParenthesisExpected:new Mi("css-lparentexpected",zi("expected.lparen","( expected")),RightParenthesisExpected:new Mi("css-rparentexpected",zi("expected.rparent",") expected")),CommaExpected:new Mi("css-commaexpected",zi("expected.comma","comma expected")),PageDirectiveOrDeclarationExpected:new Mi("css-pagedirordeclexpected",zi("expected.pagedirordecl","page directive or declaraton expected")),UnknownAtRule:new Mi("css-unknownatrule",zi("unknown.atrule","at-rule unknown")),UnknownKeyword:new Mi("css-unknownkeyword",zi("unknown.keyword","unknown keyword")),SelectorExpected:new Mi("css-selectorexpected",zi("expected.selector","selector expected")),StringLiteralExpected:new Mi("css-stringliteralexpected",zi("expected.stringliteral","string literal expected")),WhitespaceExpected:new Mi("css-whitespaceexpected",zi("expected.whitespace","whitespace expected")),MediaQueryExpected:new Mi("css-mediaqueryexpected",zi("expected.mediaquery","media query expected"))},ji={atdirectives:[{name:"@charset",desc:"Defines character set of the document."},{name:"@counter-style",desc:"Defines a custom counter style.",browsers:"FF33"},{name:"@font-face",desc:"Allows for linking to fonts that are automatically activated when needed. This permits authors to work around the limitation of 'web-safe' fonts, allowing for consistent rendering independent of the fonts available in a given user's environment."},{name:"@font-feature-values",desc:"Defines named values for the indices used to select alternate glyphs for a given font family.",browsers:"FF34"},{name:"@import",desc:"Includes content of another file."},{name:"@keyframes",desc:"Defines set of animation key frames.",browsers:"E,C43,FF16,IE10,O30,S9"},{name:"@media",desc:"Defines a stylesheet for a particular media type."},{name:"@-moz-document",desc:"Gecko-specific at-rule that restricts the style rules contained within it based on the URL of the document.",browsers:"FF1.8"},{name:"@-moz-keyframes",desc:"Defines set of animation key frames.",browsers:"FF5"},{name:"@-ms-viewport",desc:"Specifies the size, zoom factor, and orientation of the viewport.",browsers:"E,IE10"},{name:"@namespace",desc:"Declares a prefix and associates it with a namespace name.",browsers:"E,C,FF1,IE9,O8,S1"},{name:"@-o-keyframes",desc:"Defines set of animation key frames.",browsers:"O12"},{name:"@-o-viewport",desc:"Specifies the size, zoom factor, and orientation of the viewport.",browsers:"O11"},{name:"@page",desc:"Directive defines various page parameters."},{name:"@supports",desc:"A conditional group rule whose condition tests whether the user agent supports CSS property:value pairs.",browsers:"E,C28,FF22,O12.1,S9"},{name:"@-webkit-keyframes",desc:"Defines set of animation key frames.",browsers:"C,S4"}],pseudoclasses:[{name:":active",desc:"Applies while an element is being activated by the user. For example, between the times the user presses the mouse button and releases it."},{name:":any-link",desc:"Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links.",browsers:"S9"},{name:":checked",desc:"Radio and checkbox elements can be toggled by the user. Some menu items are 'checked' when the user selects them. When such elements are toggled 'on' the :checked pseudo-class applies.",browsers:"E,C,FF1,IE9,O9,S3.13"},{name:":corner-present",desc:"Non-standard. Indicates whether or not a scrollbar corner is present.",browsers:"C,S5"},{name:":decrement",desc:"Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will decrement the view’s position when used.",browsers:"C,S5"},{name:":default",desc:"Applies to the one or more UI elements that are the default among a set of similar elements. Typically applies to context menu items, buttons, and select lists/menus.",browsers:"C,FF3,O10,S5"},{name:":disabled",desc:"Represents user interface elements that are in a disabled state; such elements have a corresponding enabled state.",browsers:"E,C,FF1.5,IE9,O9,S3.1"},{name:":double-button",desc:"Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed together at the same end of the scrollbar.",browsers:"C,S5"},{name:":empty",desc:"Represents an element that has no children at all.",browsers:"E,C,FF1.5,IE9,O9,S3.1"},{name:":enabled",desc:"Represents user interface elements that are in an enabled state; such elements have a corresponding disabled state.",browsers:"E,C,FF1.5,IE9,O9,S3.1"},{name:":end",desc:"Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed after the thumb.",browsers:"C,S5"},{name:":first",desc:"When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."},{name:":first-child",desc:"Same as :nth-child(1). Represents an element that is the first child of some other element.",browsers:"E,C,FF3,IE7,O9.5,S3.1"},{name:":first-of-type",desc:"Same as :nth-of-type(1). Represents an element that is the first sibling of its type in the list of children of its parent element.",browsers:"E,C,FF3.5,IE9,O9.5,S3.2"},{name:":focus",desc:"Applies while an element has the focus (accepts keyboard or mouse events, or other forms of input)."},{name:":fullscreen",desc:"Matches any element that has its fullscreen flag set.",browsers:"E"},{name:":future",desc:"Represents any element that is defined to occur entirely after a :current element.",browsers:"C,O16,S6"},{name:":horizontal",desc:"Non-standard. Applies to any scrollbar pieces that have a horizontal orientation.",browsers:"C,S5"},{name:":host",desc:"When evaluated in the context of a shadow tree, matches the shadow tree’s host element.",browsers:"C35,O22"},{name:":host()",desc:"When evaluated in the context of a shadow tree, it matches the shadow tree’s host element if the host element, in its normal context, matches the selector argument.",browsers:"C35,O22"},{name:":host-context()",desc:"Tests whether there is an ancestor, outside the shadow tree, which matches a particular selector.",browsers:"C35,O22"},{name:":hover",desc:"Applies while the user designates an element with a pointing device, but does not necessarily activate it. For example, a visual user agent could apply this pseudo-class when the cursor (mouse pointer) hovers over a box generated by the element."},{name:":increment",desc:"Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will increment the view’s position when used.",browsers:"C,S5"},{name:":indeterminate",desc:"Applies to UI elements whose value is in an indeterminate state.",browsers:"E,C,FF3.6,IE9,O10.6,S3"},{name:":in-range",desc:"Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes.",browsers:"E13,C,FF10,O9.6,S5.1"},{name:":invalid",desc:"An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification.",browsers:"E,C,FF4,IE10,O10,S5"},{name:":lang()",desc:"Represents an element that is in language specified.",browsers:"E,C,FF1,IE8,O8,S3"},{name:":last-child",desc:"Same as :nth-last-child(1). Represents an element that is the last child of some other element.",browsers:"E,C,FF1,IE9,O9.5,S3.1"},{name:":last-of-type",desc:"Same as :nth-last-of-type(1). Represents an element that is the last sibling of its type in the list of children of its parent element.",browsers:"E,C,FF3.5,IE9,O9.5,S3.1"},{name:":left",desc:"When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."},{name:":link",desc:"Applies to links that have not yet been visited."},{name:":matches()",desc:"Takes a selector list as its argument. It represents an element that is represented by its argument.",browsers:"S9"},{name:":-moz-any()",desc:"Represents an element that is represented by the selector list passed as its argument. Standardized as :matches().",browsers:"FF4"},{name:":-moz-any-link",desc:"Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links.",browsers:"FF1"},{name:":-moz-broken",desc:"Non-standard. Matches elements representing broken images.",browsers:"FF3"},{name:":-moz-drag-over",desc:"Non-standard. Matches elements when a drag-over event applies to it.",browsers:"FF1"},{name:":-moz-first-node",desc:"Non-standard. Represents an element that is the first child node of some other element.",browsers:"FF1"},{name:":-moz-focusring",desc:"Non-standard. Matches an element that has focus and focus ring drawing is enabled in the browser.",browsers:"FF4"},{name:":-moz-full-screen",desc:"Matches any element that has its fullscreen flag set. Standardized as :fullscreen.",browsers:"FF9"},{name:":-moz-last-node",desc:"Non-standard. Represents an element that is the last child node of some other element.",browsers:"FF1"},{name:":-moz-loading",desc:"Non-standard. Matches elements, such as images, that haven’t started loading yet.",browsers:"FF3"},{name:":-moz-only-whitespace",desc:"The same as :empty, except that it additionally matches elements that only contain code points affected by whitespace processing. Standardized as :blank.",browsers:"FF1.5"},{name:":-moz-placeholder",desc:"Deprecated. Represents placeholder text in an input field. Use ::-moz-placeholder for Firefox 19+.",browsers:"FF4"},{name:":-moz-submit-invalid",desc:"Non-standard. Represents any submit button when the contents of the associated form are not valid.",browsers:"FF4"},{name:":-moz-suppressed",desc:"Non-standard. Matches elements representing images that have been blocked from loading.",browsers:"FF3"},{name:":-moz-ui-invalid",desc:"Non-standard. Represents any validated form element whose value isn't valid ",browsers:"FF4"},{name:":-moz-ui-valid",desc:"Non-standard. Represents any validated form element whose value is valid ",browsers:"FF4"},{name:":-moz-user-disabled",desc:"Non-standard. Matches elements representing images that have been disabled due to the user’s preferences.",browsers:"FF3"},{name:":-moz-window-inactive",desc:"Non-standard. Matches elements in an inactive window.",browsers:"FF4"},{name:":-ms-fullscreen",desc:"Matches any element that has its fullscreen flag set.",browsers:"IE11"},{name:":-ms-input-placeholder",desc:"Represents placeholder text in an input field. Note: for Edge use the pseudo-element ::-ms-input-placeholder. Standardized as ::placeholder.",browsers:"IE10"},{name:":-ms-keyboard-active",desc:"Windows Store apps only. Applies one or more styles to an element when it has focus and the user presses the space bar.",browsers:"IE10"},{name:":-ms-lang()",desc:"Represents an element that is in the language specified. Accepts a comma seperated list of language tokens.",browsers:"E,IE10"},{name:":no-button",desc:"Non-standard. Applies to track pieces. Applies when there is no button at that end of the track.",browsers:"C,S5"},{name:":not()",desc:"The negation pseudo-class, :not(X), is a functional notation taking a simple selector (excluding the negation pseudo-class itself) as an argument. It represents an element that is not represented by its argument.",browsers:"E,C,FF1,IE9,O9.5,S2"},{name:":nth-child()",desc:"Represents an element that has an+b-1 siblings before it in the document tree, for any positive integer or zero value of n, and has a parent element.",browsers:"E,C,FF3.5,IE9,O9.5,S3.1"},{name:":nth-last-child()",desc:"Represents an element that has an+b-1 siblings after it in the document tree, for any positive integer or zero value of n, and has a parent element.",browsers:"E,C,FF3.5,IE9,O9.5,S3.1"},{name:":nth-last-of-type()",desc:"Represents an element that has an+b-1 siblings with the same expanded element name after it in the document tree, for any zero or positive integer value of n, and has a parent element.",browsers:"E,C,FF3.5,IE9,O9.5,S3.1"},{name:":nth-of-type()",desc:"Represents an element that has an+b-1 siblings with the same expanded element name before it in the document tree, for any zero or positive integer value of n, and has a parent element.",browsers:"E,C,FF3.5,IE9,O9.5,S3.1"},{name:":only-child",desc:"Represents an element that has a parent element and whose parent element has no other element children. Same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity.",browsers:"E,C,FF1.5,IE9,O9.5,S3.1"},{name:":only-of-type",desc:"Matches every element that is the only child of its type, of its parent. Same as :first-of-type:last-of-type or :nth-of-type(1):nth-last-of-type(1), but with a lower specificity.",browsers:"E,C,FF3.5,IE9,O9.5,S3.2"},{name:":optional",desc:"A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional.",browsers:"E,C,FF4,IE10,O10,S5"},{name:":out-of-range",desc:"Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes.",browsers:"E13,C,FF10,O9.6,S5.1"},{name:":past",desc:"Represents any element that is defined to occur entirely prior to a :current element.",browsers:"C,O16,S6"},{name:":read-only",desc:"An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only.",browsers:"E13,C,FF10,O9,S4"},{name:":read-write",desc:"An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only.",browsers:"E13,C,FF10,O9,S4"},{name:":required",desc:"A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional.",browsers:"E,C,FF4,IE10,O10,S5"},{name:":right",desc:"When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."},{name:":root",desc:"Represents an element that is the root of the document. In HTML 4, this is always the HTML element.",browsers:"E,C,FF1,IE9,O9.5,S1"},{name:":scope",desc:"Represents any element that is in the contextual reference element set.",browsers:"FF32,S6"},{name:":single-button",desc:"Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed separately at either end of the scrollbar.",browsers:"C,S5"},{name:":start",desc:"Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed before the thumb.",browsers:"C,S5"},{name:":target",desc:"Some URIs refer to a location within a resource. This kind of URI ends with a 'number sign' (#) followed by an anchor identifier (called the fragment identifier).",browsers:"E,C,FF1,IE9,O9.5,S1"},{name:":valid",desc:"An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification.",browsers:"E,C,FF4,IE10,O10,S5"},{name:":vertical",desc:"Non-standard. Applies to any scrollbar pieces that have a vertical orientation.",browsers:"C,S5"},{name:":visited",desc:"Applies once the link has been visited by the user."},{name:":-webkit-any()",desc:"Represents an element that is represented by the selector list passed as its argument. Standardized as :matches().",browsers:"C,S5"},{name:":-webkit-full-screen",desc:"Matches any element that has its fullscreen flag set. Standardized as :fullscreen.",browsers:"C,S6"},{name:":window-inactive",desc:"Non-standard. Applies to all scrollbar pieces. Indicates whether or not the window containing the scrollbar is currently active.",browsers:"C,S3"}],pseudoelements:[{name:"::after",desc:"Represents a styleable child pseudo-element immediately after the originating element’s actual content.",browsers:"E,C,FF1.5,IE9,O9,S4"},{name:"::backdrop",desc:"Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen).",browsers:"E"},{name:"::before",desc:"Represents a styleable child pseudo-element immediately before the originating element’s actual content.",browsers:"E,C,FF1.5,IE9,O9,S4"},{name:"::content",desc:"Deprecated. Matches the distribution list itself, on elements that have one. Use ::slotted for forward compatibility.",browsers:"C35,O22"},{name:"::cue",browsers:"C,O16,S6"},{name:"::cue()",browsers:"C,O16,S6"},{name:"::cue-region",browsers:"C,O16,S6"},{name:"::cue-region()",browsers:"C,O16,S6"},{name:"::first-letter",desc:"Represents the first letter of an element, if it is not preceded by any other content (such as images or inline tables) on its line.",browsers:"E,C,FF1.5,IE9,O7,S1"},{name:"::first-line",desc:"Describes the contents of the first formatted line of its originating element.",browsers:"E,C,FF1.5,IE9,O7,S1"},{name:"::-moz-focus-inner",browsers:"FF4"},{name:"::-moz-focus-outer",browsers:"FF4"},{name:"::-moz-list-bullet",desc:"Used to style the bullet of a list element. Similar to the standardized ::marker.",browsers:"FF1"},{name:"::-moz-list-number",desc:"Used to style the numbers of a list element. Similar to the standardized ::marker.",browsers:"FF1"},{name:"::-moz-placeholder",desc:"Represents placeholder text in an input field",browsers:"FF19"},{name:"::-moz-progress-bar",desc:"Represents the bar portion of a progress bar.",browsers:"FF9"},{name:"::-moz-selection",desc:"Represents the portion of a document that has been highlighted by the user.",browsers:"FF1"},{name:"::-ms-backdrop",desc:"Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen).",browsers:"IE11"},{name:"::-ms-browse",desc:"Represents the browse button of an input type=file control.",browsers:"E,IE10"},{name:"::-ms-check",desc:"Represents the check of a checkbox or radio button input control.",browsers:"E,IE10"},{name:"::-ms-clear",desc:"Represents the clear button of a text input control",browsers:"E,IE10"},{name:"::-ms-expand",desc:"Represents the drop-down button of a select control.",browsers:"E,IE10"},{name:"::-ms-fill",desc:"Represents the bar portion of a progress bar.",browsers:"E,IE10"},{name:"::-ms-fill-lower",desc:"Represents the portion of the slider track from its smallest value up to the value currently selected by the thumb. In a left-to-right layout, this is the portion of the slider track to the left of the thumb.",browsers:"E,IE10"},{name:"::-ms-fill-upper",desc:"Represents the portion of the slider track from the value currently selected by the thumb up to the slider's largest value. In a left-to-right layout, this is the portion of the slider track to the right of the thumb.",browsers:"E,IE10"},{name:"::-ms-reveal",desc:"Represents the password reveal button of an input type=password control.",browsers:"E,IE10"},{name:"::-ms-thumb",desc:"Represents the portion of range input control (also known as a slider control) that the user drags.",browsers:"E,IE10"},{name:"::-ms-ticks-after",desc:"Represents the tick marks of a slider that begin just after the thumb and continue up to the slider's largest value. In a left-to-right layout, these are the ticks to the right of the thumb.",browsers:"E,IE10"},{name:"::-ms-ticks-before",desc:"Represents the tick marks of a slider that represent its smallest values up to the value currently selected by the thumb. In a left-to-right layout, these are the ticks to the left of the thumb.",browsers:"E,IE10"},{name:"::-ms-tooltip",desc:"Represents the tooltip of a slider (input type=range).",browsers:"E,IE10"},{name:"::-ms-track",desc:"Represents the track of a slider.",browsers:"E,IE10"},{name:"::-ms-value",desc:"Represents the content of a text or password input control, or a select control.",browsers:"E,IE10"},{name:"::selection",desc:"Represents the portion of a document that has been highlighted by the user.",browsers:"E,C,IE9,O9.5,S1.1"},{name:"::shadow",desc:"Matches the shadow root if an element has a shadow tree.",browsers:"C35,O22"},{name:"::-webkit-file-upload-button",browsers:"C,O,S6"},{name:"::-webkit-inner-spin-button",browsers:"C,O,S6"},{name:"::-webkit-input-placeholder",browsers:"C,S4"},{name:"::-webkit-keygen-select",browsers:"C,O,S6"},{name:"::-webkit-meter-bar",browsers:"E13,C,O15,S6"},{name:"::-webkit-meter-even-less-good-value",browsers:"E13,C,O15,S6"},{name:"::-webkit-meter-optimum-value",browsers:"E13,C,O15,S6"},{name:"::-webkit-meter-suboptimal-value",browsers:"E13,C,O15,S6"},{name:"::-webkit-outer-spin-button",browsers:"C,O,S6"},{name:"::-webkit-progress-bar",browsers:"C,S3"},{name:"::-webkit-progress-inner-element",browsers:"C,S3"},{name:"::-webkit-progress-value",browsers:"C,S3"},{name:"::-webkit-resizer",browsers:"C,S5"},{name:"::-webkit-scrollbar",browsers:"C,S5"},{name:"::-webkit-scrollbar-button",browsers:"C,S5"},{name:"::-webkit-scrollbar-corner",browsers:"C,S5"},{name:"::-webkit-scrollbar-thumb",browsers:"C,S5"},{name:"::-webkit-scrollbar-track",browsers:"C,S5"},{name:"::-webkit-scrollbar-track-piece",browsers:"C,S5"},{name:"::-webkit-search-cancel-button",browsers:"C,S4"},{name:"::-webkit-search-decoration",browsers:"C,S4"},{name:"::-webkit-search-results-button",browsers:"C,S4"},{name:"::-webkit-search-results-decoration",browsers:"C,S4"},{name:"::-webkit-slider-runnable-track",browsers:"C,O,S6"},{name:"::-webkit-slider-thumb",browsers:"C,O,S6"},{name:"::-webkit-textfield-decoration-container",browsers:"C,O,S6"},{name:"::-webkit-validation-bubble",browsers:"C,O,S6"},{name:"::-webkit-validation-bubble-arrow",browsers:"C,O,S6"},{name:"::-webkit-validation-bubble-arrow-clipper",browsers:"C,O,S6"},{name:"::-webkit-validation-bubble-heading",browsers:"C,O,S6"},{name:"::-webkit-validation-bubble-message",browsers:"C,O,S6"},{name:"::-webkit-validation-bubble-text-block",browsers:"C,O,S6"}],properties:[{name:"additive-symbols",desc:"@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor. Needs to be specified if the counter system is 'additive'.",browsers:"FF33",restriction:"integer, string, image, identifier"},{name:"align-content",desc:"Aligns a flex container’s lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"enum",values:[{name:"center",desc:"Lines are packed toward the center of the flex container."},{name:"flex-end",desc:"Lines are packed toward the end of the flex container."},{name:"flex-start",desc:"Lines are packed toward the start of the flex container."},{name:"space-around",desc:"Lines are evenly distributed in the flex container, with half-size spaces on either end."},{name:"space-between",desc:"Lines are evenly distributed in the flex container."},{name:"stretch",desc:"Lines stretch to take up the remaining space."}]},{name:"align-items",desc:"Aligns flex items along the cross axis of the current line of the flex container.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"enum",values:[{name:"baseline",desc:"If the flex item’s inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."},{name:"center",desc:"The flex item’s margin box is centered in the cross axis within the line."},{name:"flex-end",desc:"The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."},{name:"flex-start",desc:"The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."},{name:"stretch",desc:"If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."}]},{name:"justify-items",desc:"Defines the default justify-self for all items of the box, given them the default way of justifying each box along the appropriate axi",browsers:"FF45",restriction:"enum",values:[{name:"auto"},{name:"normal"},{name:"end"},{name:"start"},{name:"flex-end",desc:'"Flex items are packed toward the end of the line."'},{name:"flex-start",desc:'"Flex items are packed toward the start of the line."'},{name:"self-end"},{name:"self-start"},{name:"center",desc:"The items are packed flush to each other toward the center of the of the alignment container."},{name:"left"},{name:"right"},{name:"baseline"},{name:"first baseline"},{name:"last baseline"},{name:"stretch",desc:"If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."},{name:"save"},{name:"unsave"},{name:"legacy"}]},{name:"justify-self",desc:"Defines the way of justifying a box inside its container along the appropriate axis.",browsers:"FF45",restriction:"enum",values:[{name:"auto"},{name:"normal"},{name:"end"},{name:"start"},{name:"flex-end",desc:'"Flex items are packed toward the end of the line."'},{name:"flex-start",desc:'"Flex items are packed toward the start of the line."'},{name:"self-end"},{name:"self-start"},{name:"center",desc:"The items are packed flush to each other toward the center of the of the alignment container."},{name:"left"},{name:"right"},{name:"baseline"},{name:"first baseline"},{name:"last baseline"},{name:"stretch",desc:"If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."},{name:"save"},{name:"unsave"}]},{name:"justify-items",desc:"Defines the default justify-self for all items of the box, given them the default way of justifying each box along the appropriate axi",browsers:"FF45",restriction:"enum"},{name:"align-self",desc:"Allows the default alignment along the cross axis to be overridden for individual flex items.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"enum",values:[{name:"auto",desc:"Computes to the value of 'align-items' on the element’s parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself."},{name:"baseline",desc:"If the flex item’s inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."},{name:"center",desc:"The flex item’s margin box is centered in the cross axis within the line."},{name:"flex-end",desc:"The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."},{name:"flex-start",desc:"The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."},{name:"stretch",desc:"If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."}]},{name:"all",desc:"Shorthand that resets all properties except 'direction' and 'unicode-bidi'.",browsers:"C37,FF27,O24",restriction:"enum",values:[]},{name:"alt",desc:"Provides alternative text for assistive technology to replace the genenerated content of a ::before or ::after element.",browsers:"S9",restriction:"string, enum",values:[]},{name:"animation",desc:"Shorthand property combines six of the animation properties into a single property.",browsers:"E,C43,FF16,IE10,O12.1,S9",restriction:"time, timing-function, enum, identifier, number",values:[{name:"alternate"},{name:"alternate-reverse"},{name:"backwards"},{name:"both",desc:"Both forwards and backwards fill modes are applied."},{name:"forwards"},{name:"infinite",desc:"Causes the animation to repeat forever."},{name:"none",desc:"No animation is performed"},{name:"normal",desc:"Normal playback."},{name:"reverse",desc:"All iterations of the animation are played in the reverse direction from the way they were specified."}]},{name:"animation-delay",desc:"Defines when the animation will start.",browsers:"E,C43,FF16,IE10,O12.1,S9",restriction:"time"},{name:"animation-direction",desc:"Defines whether or not the animation should play in reverse on alternate cycles.",browsers:"E,C43,FF16,IE10,O12.1,S9",restriction:"enum",values:[{name:"alternate"},{name:"alternate-reverse"},{name:"normal",desc:"Normal playback."},{name:"reverse",desc:"All iterations of the animation are played in the reverse direction from the way they were specified."}]},{name:"animation-duration",desc:"Defines the length of time that an animation takes to complete one cycle.",browsers:"E,C43,FF16,IE10,O12.1,S9",restriction:"time"},{name:"animation-fill-mode",desc:"Defines what values are applied by the animation outside the time it is executing.",browsers:"E,C43,FF16,IE10,O12.1,S9",restriction:"enum",values:[{name:"backwards"},{name:"both",desc:"Both forwards and backwards fill modes are applied."},{name:"forwards"},{name:"none",desc:"There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."}]},{name:"animation-iteration-count",desc:"Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",browsers:"E,C43,FF16,IE10,O12.1,S9",restriction:"number, enum",values:[{name:"infinite",desc:"Causes the animation to repeat forever."}]},{name:"animation-name",desc:"Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",browsers:"E,C43,FF16,IE10,O12.1,S9",restriction:"identifier, enum",values:[{name:"none",desc:"No animation is performed"}]},{name:"animation-play-state",desc:"Defines whether the animation is running or paused.",browsers:"E,C43,FF16,IE10,O12.1,S9",restriction:"enum",values:[{name:"paused"},{name:"running"}]},{name:"animation-timing-function",desc:"Describes how the animation will progress over one cycle of its duration.",browsers:"E,C43,FF16,IE10,O12.1,S9",restriction:"timing-function"},{name:"backface-visibility",desc:"Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",browsers:"E,C36,FF16,IE10,O23",restriction:"enum",values:[{name:"hidden",desc:"Back side is hidden."},{name:"visible",desc:"Back side is visible."}]},{name:"background",desc:"Shorthand property for setting most background properties at the same place in the style sheet.",restriction:"enum, image, color, position, length, repeat, percentage, box",values:[{name:"fixed",desc:"The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page."},{name:"local",desc:"The background is fixed with regard to the element's contents: if the element has a scrolling mechanism, the background scrolls with the element's contents."},{name:"scroll",desc:"The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)"}]},{name:"background-attachment",desc:"Specifies whether the background images are fixed with regard to the viewport ('fixed') or scroll along with the element ('scroll') or its contents ('local').",restriction:"enum",values:[{name:"fixed",desc:"The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page."},{name:"local",desc:"The background is fixed with regard to the element’s contents: if the element has a scrolling mechanism, the background scrolls with the element’s contents.",browsers:"E,C,FF25,IE9,O11.5,S5"},{name:"scroll",desc:"The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element’s border.)"}]},{name:"background-blend-mode",desc:"Defines the blending mode of each background layer.",browsers:"C35,FF30,O22,S7.1",restriction:"enum",values:[{name:"normal",desc:"Default attribute which specifies no blending"},{name:"multiply"},{name:"screen"},{name:"overlay"},{name:"darken"},{name:"lighten"},{name:"color-dodge"},{name:"color-burn"},{name:"hard-light"},{name:"soft-light"},{name:"difference"},{name:"exclusion"},{name:"hue",browsers:"C35,FF30,O22"},{name:"saturation",browsers:"C35,FF30,O22"},{name:"color",browsers:"C35,FF30,O22"},{name:"luminosity",browsers:"C35,FF30,O22"}]},{name:"background-clip",desc:"Determines the background painting area.",browsers:"E,C,FF4,IE9,O10.5,S3",restriction:"box"},{name:"background-color",desc:"Sets the background color of an element.",restriction:"color"},{name:"background-image",desc:"Sets the background image(s) of an element.",restriction:"image, enum",values:[{name:"none",desc:"Counts as an image layer but draws nothing."}]},{name:"background-origin",desc:"For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",browsers:"E,C,FF4,IE9,O10.5,S3",restriction:"box"},{name:"background-position",desc:"Specifies the initial position of the background image(s) (after any resizing) within their corresponding background positioning area.",restriction:"position, length, percentage"},{name:"background-position-x",desc:"If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",browsers:"E,IE6",restriction:"length, percentage",values:[{name:"center",desc:"Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is."},{name:"left",desc:"Equivalent to '0%' for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset."},{name:"right",desc:"Equivalent to '100%' for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset."}]},{name:"background-position-y",desc:"If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",browsers:"E,IE6",restriction:"length, percentage",values:[{name:"bottom",desc:"Equivalent to '100%' for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset."},{name:"center",desc:"Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is."},{name:"top",desc:"Equivalent to '0%' for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset."}]},{name:"background-repeat",desc:"Specifies how background images are tiled after they have been sized and positioned.",restriction:"repeat",values:[]},{name:"background-size",desc:"Specifies the size of the background images.",browsers:"E,C,FF4,IE9,O10,S4.1",restriction:"length, percentage",values:[{name:"auto",desc:"Resolved by using the image’s intrinsic ratio and the size of the other dimension, or failing that, using the image’s intrinsic size, or failing that, treating it as 100%."},{name:"contain",desc:"Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."},{name:"cover",desc:"Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."}]},{name:"behavior",desc:"IE only. Used to extend behaviors of the browser.",browsers:"IE6",restriction:"url"},{name:"block-size",desc:"Logical 'width'. Mapping depends on the element’s 'writing-mode'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto",desc:"Depends on the values of other properties."}]},{name:"border",desc:"Shorthand property for setting border width, style, and color.",restriction:"length, line-width, line-style, color"},{name:"border-block-end",desc:"Logical 'border-bottom'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, line-width, line-style, color"},{name:"border-block-start",desc:"Logical 'border-top'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, line-width, line-style, color"},{name:"border-block-end-color",desc:"Logical 'border-bottom-color'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"color"},{name:"border-block-start-color",desc:"Logical 'border-top-color'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"color"},{name:"border-block-end-style",desc:"Logical 'border-bottom-style'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"line-style"},{name:"border-block-start-style",desc:"Logical 'border-top-style'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"lline-style"},{name:"border-block-end-width",desc:"Logical 'border-bottom-width'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, line-width"},{name:"border-block-start-width",desc:"Logical 'border-top-width'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, line-width"},{name:"border-bottom",desc:"Shorthand property for setting border width, style and color.",restriction:"length, line-width, line-style, color"},{name:"border-bottom-color",desc:"Sets the color of the bottom border.",restriction:"color"},{name:"border-bottom-left-radius",desc:"Defines the radii of the bottom left outer border edge.",browsers:"E,C,FF4,IE9,O10.5,S5",restriction:"length, percentage"},{name:"border-bottom-right-radius",desc:"Defines the radii of the bottom right outer border edge.",browsers:"E,C,FF4,IE9,O10.5,S5",restriction:"length, percentage"},{name:"border-bottom-style",desc:"Sets the style of the bottom border.",restriction:"line-style"},{name:"border-bottom-width",desc:"Sets the thickness of the bottom border.",restriction:"length, line-width"},{name:"border-collapse",desc:"Selects a table's border model.",restriction:"enum",values:[{name:"collapse",desc:"Selects the collapsing borders model."},{name:"separate",desc:"Selects the separated borders border model."}]},{name:"border-color",desc:"The color of the border around all four edges of an element.",restriction:"color",values:[]},{name:"border-image",desc:"Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",browsers:"E,C16,FF15,IE11,O15,S6",restriction:"length, percentage, number, url, enum",values:[{name:"auto",desc:"If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."},{name:"fill",desc:"Causes the middle part of the border-image to be preserved."},{name:"none",desc:"Use the border styles."},{name:"repeat"},{name:"round",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."},{name:"space",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."},{name:"stretch",desc:"The image is stretched to fill the area."},{name:"url()"}]},{name:"border-image-outset",desc:"The values specify the amount by which the border image area extends beyond the border box on the top, right, bottom, and left sides respectively. If the fourth value is absent, it is the same as the second. If the third one is also absent, it is the same as the first. If the second one is also absent, it is the same as the first. Numbers represent multiples of the corresponding border-width.",browsers:"E,C16,FF15,IE11,O15,S6",restriction:"length, number"},{name:"border-image-repeat",desc:"Specifies how the images for the sides and the middle part of the border image are scaled and tiled. If the second keyword is absent, it is assumed to be the same as the first.",browsers:"E,C16,FF15,IE11,O15,S6",restriction:"enum",values:[{name:"repeat"},{name:"round",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."},{name:"space",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."},{name:"stretch",desc:"The image is stretched to fill the area."}]},{name:"border-image-slice",desc:"Specifies inward offsets from the top, right, bottom, and left edges of the image, dividing it into nine regions: four corners, four edges and a middle.",browsers:"E,C16,FF15,IE11,O15,S6",restriction:"number, percentage",values:[{name:"fill",desc:"Causes the middle part of the border-image to be preserved."}]},{name:"border-image-source",desc:"Specifies an image to use instead of the border styles given by the 'border-style' properties and as an additional background layer for the element. If the value is 'none' or if the image cannot be displayed, the border styles will be used.",browsers:"E,C16,FF15,IE11,O15,S6",restriction:"image",values:[{name:"none",desc:"Use the border styles."}]},{name:"border-image-width",desc:"The four values of 'border-image-width' specify offsets that are used to divide the border image area into nine parts. They represent inward distances from the top, right, bottom, and left sides of the area, respectively.",browsers:"E,C16,FF15,IE11,O15,S6",restriction:"length, percentage, number",values:[{name:"auto",desc:"The border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."}]},{name:"border-inline-end",desc:"Logical 'border-right'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, line-width, line-style, color"},{name:"border-inline-start",desc:"Logical 'border-left'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, line-width, line-style, color"},{name:"border-inline-end-color",desc:"Logical 'border-right-color'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"color"},{name:"border-inline-start-color",desc:"Logical 'border-left-color'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"color"},{name:"border-inline-end-style",desc:"Logical 'border-right-style'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"line-style"},{name:"border-inline-start-style",desc:"Logical 'border-left-style'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"lline-style"},{name:"border-inline-end-width",desc:"Logical 'border-right-width'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, line-width"},{name:"border-inline-start-width",desc:"Logical 'border-left-width'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, line-width"},{name:"border-left",desc:"Shorthand property for setting border width, style and color",restriction:"length, line-width, line-style, color"},{name:"border-left-color",desc:"Sets the color of the left border.",restriction:"color"},{name:"border-left-style",desc:"Sets the style of the left border.",restriction:"line-style"},{name:"border-left-width",desc:"Sets the thickness of the left border.",restriction:"length, line-width"},{name:"border-radius",desc:"Defines the radii of the outer border edge.",browsers:"E,C,FF4,IE9,O10.5,S5",restriction:"length, percentage"},{name:"border-right",desc:"Shorthand property for setting border width, style and color",restriction:"length, line-width, line-style, color"},{name:"border-right-color",desc:"Sets the color of the right border.",restriction:"color"},{name:"border-right-style",desc:"Sets the style of the right border.",restriction:"line-style"},{name:"border-right-width",desc:"Sets the thickness of the right border.",restriction:"length, line-width"},{name:"border-spacing",desc:"The lengths specify the distance that separates adjoining cell borders. If one length is specified, it gives both the horizontal and vertical spacing. If two are specified, the first gives the horizontal spacing and the second the vertical spacing. Lengths may not be negative.",browsers:"E,C,FF1,IE8,O7,S1.2",restriction:"length"},{name:"border-style",desc:"The style of the border around edges of an element.",restriction:"line-style",values:[]},{name:"border-top",desc:"Shorthand property for setting border width, style and color",restriction:"length, line-width, line-style, color"},{name:"border-top-color",desc:"Sets the color of the top border.",restriction:"color"},{name:"border-top-left-radius",desc:"Defines the radii of the top left outer border edge.",browsers:"E,C,FF4,IE9,O10.5,S5",restriction:"length, percentage"},{name:"border-top-right-radius",desc:"Defines the radii of the top right outer border edge.",browsers:"E,C,FF4,IE9,O10.5,S5",restriction:"length, percentage"},{name:"border-top-style",desc:"Sets the style of the top border.",restriction:"line-style"},{name:"border-top-width",desc:"Sets the thickness of the top border.",restriction:"length, line-width"},{name:"border-width",desc:"Shorthand that sets the four 'border-*-width' properties. If it has four values, they set top, right, bottom and left in that order. If left is missing, it is the same as right; if bottom is missing, it is the same as top; if right is missing, it is the same as top.",restriction:"length, line-width",values:[]},{name:"bottom",desc:"Specifies how far an absolutely positioned box's bottom margin edge is offset above the bottom edge of the box's 'containing block'.",restriction:"length, percentage",values:[{name:"auto",desc:"For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"}]},{name:"box-decoration-break",desc:"Specifies whether individual boxes are treated as broken pieces of one continuous box, or whether each box is individually wrapped with the border and padding.",browsers:"FF32,O11",restriction:"enum",values:[{name:"clone"},{name:"slice"}]},{name:"box-shadow",desc:"Attaches one or more drop-shadows to the box. The property is a comma-separated list of shadows, each specified by 2-4 length values, an optional color, and an optional 'inset' keyword. Omitted lengths are 0; omitted colors are a user agent chosen color.",browsers:"E,C,FF4,IE9,O11.5,S5.1",restriction:"length, color, enum",values:[{name:"inset"}]},{name:"box-sizing",desc:"Specifies the behavior of the 'width' and 'height' properties.",browsers:"E,C10,FF29,IE8,O8,S5.1",restriction:"enum",values:[{name:"border-box"},{name:"content-box"}]},{name:"break-after",desc:"Describes the page/column/region break behavior after the generated box.",browsers:"E,IE10,O11.5",restriction:"enum",values:[{name:"always",desc:"Always force a page break before/after the generated box."},{name:"auto",desc:"Neither force nor forbid a page/column break before/after the principal box."},{name:"avoid",desc:"Avoid a break before/after the principal box."},{name:"avoid-column",desc:"Avoid a column break before/after the principal box."},{name:"avoid-page",desc:"Avoid a page break before/after the principal box."},{name:"column",desc:"Always force a column break before/after the principal box."},{name:"left",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."},{name:"page",desc:"Always force a page break before/after the principal box."},{name:"right",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."}]},{name:"break-before",desc:"Describes the page/column/region break behavior before the generated box.",browsers:"E,IE10,O11.5",restriction:"enum",values:[{name:"always",desc:"Always force a page break before/after the generated box."},{name:"auto",desc:"Neither force nor forbid a page/column break before/after the principal box."},{name:"avoid",desc:"Avoid a break before/after the principal box."},{name:"avoid-column",desc:"Avoid a column break before/after the principal box."},{name:"avoid-page",desc:"Avoid a page break before/after the principal box."},{name:"column",desc:"Always force a column break before/after the principal box."},{name:"left",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."},{name:"page",desc:"Always force a page break before/after the principal box."},{name:"right",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."}]},{name:"break-inside",desc:"Describes the page/column/region break behavior inside the principal box.",browsers:"E,IE10,O11.5",restriction:"enum",values:[{name:"auto",desc:"Impose no additional breaking constraints within the box."},{name:"avoid",desc:"Avoid breaks within the box."},{name:"avoid-column",desc:"Avoid a column break within the box."},{name:"avoid-page",desc:"Avoid a page break within the box."}]},{name:"caption-side",desc:"Specifies the position of the caption box with respect to the table box.",browsers:"E,C,FF,IE8,O,S",restriction:"enum",values:[{name:"bottom",desc:"Positions the caption box below the table box."},{name:"top",desc:"Positions the caption box above the table box."}]},{name:"caret-color",desc:"Controls the color of the text insertion indicator.",browsers:"C60,FF55,O46",restriction:"color, enum",values:[{name:"auto",desc:"The user agent selects an appropriate color for the caret. This is generally currentcolor, but the user agent may choose a different color to ensure good visibility and contrast with the surrounding content, taking into account the value of currentcolor, the background, shadows, and other factors."}]},{name:"clear",desc:"Indicates which sides of an element's box(es) may not be adjacent to an earlier floating box. The 'clear' property does not consider floats inside the element itself or in other block formatting contexts.",restriction:"enum",values:[{name:"both",desc:"The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating and left-floating boxes that resulted from elements earlier in the source document."},{name:"left",desc:"The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any left-floating boxes that resulted from elements earlier in the source document."},{name:"none",desc:"No constraint on the box's position with respect to floats."},{name:"right",desc:"The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating boxes that resulted from elements earlier in the source document."}]},{name:"clip",desc:"Deprecated. Use the 'clip-path' property when support allows. Defines the visible portion of an element’s box.",restriction:"enum",values:[{name:"auto",desc:"The element does not clip."},{name:"rect()"}]},{name:"clip-path",desc:"Specifies a clipping path where everything inside the path is visable and everything outside is clipped out.",browsers:"FF3.5",restriction:"url, shape, geometry-box, enum",values:[{name:"none",desc:"No clipping path gets created."},{name:"url()",desc:"References a <clipPath> element to create a clipping path."}]},{name:"clip-rule",desc:"Indicates the algorithm which is to be used to determine what parts of the canvas are included inside the shape.",browsers:"E,C5,FF3,IE10,O9,S6",restriction:"enum",values:[{name:"evenodd"},{name:"nonzero"}]},{name:"color",desc:"Color of an element's text",restriction:"color"},{name:"color-interpolation-filters",desc:"Specifies the color space for imaging operations performed via filter effects.",browsers:"E,C5,FF3,IE10,O9,S6",restriction:"enum",values:[{name:"auto",desc:"Color operations are not required to occur in a particular color space."},{name:"linearRGB"},{name:"sRGB"}]},{name:"column-count",desc:"Describes the optimal number of columns into which the content of the element will be flowed.",browsers:"E,IE10,O11.5,S9",restriction:"integer, enum",values:[{name:"auto",desc:"Determines the number of columns by the 'column-width' property and the element width."}]},{name:"column-fill",desc:"In continuous media, this property will only be consulted if the length of columns has been constrained. Otherwise, columns will automatically be balanced.",browsers:"E,IE10,O11.5,S9",restriction:"enum",values:[{name:"auto",desc:"Fills columns sequentially."},{name:"balance"}]},{name:"column-gap",desc:"Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",browsers:"E,IE10,O11.5,S9",restriction:"length, enum",values:[{name:"normal",desc:"User agent specific and typically equivalent to 1em."}]},{name:"column-rule",desc:"Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",browsers:"E,IE10,O11.5,S9",restriction:"length, line-width, line-style, color"},{name:"column-rule-color",desc:"Sets the color of the column rule",browsers:"E,IE10,O11.6",restriction:"color"},{name:"column-rule-style",desc:"Sets the style of the rule between columns of an element.",browsers:"E,IE10,O11.5,S6",restriction:"line-style"},{name:"column-rule-width",desc:"Sets the width of the rule between columns. Negative values are not allowed.",browsers:"E,IE10,O11.5,S9",restriction:"length, line-width"},{name:"columns",desc:"A shorthand property which sets both 'column-width' and 'column-count'.",browsers:"E,IE10,O11.5,S9",restriction:"length, integer, enum",values:[{name:"auto",desc:"The width depends on the values of other properties."}]},{name:"column-span",desc:"Describes the page/column break behavior after the generated box.",browsers:"E,IE10,O11.5,S9",restriction:"enum",values:[{name:"all",desc:"The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear."},{name:"none",desc:"The element does not span multiple columns."}]},{name:"column-width",desc:"Describes the width of columns in multicol elements.",browsers:"E,IE10,O11.5,S9",restriction:"length, enum",values:[{name:"auto",desc:"The width depends on the values of other properties."}]},{name:"contain",desc:"Indicates that an element and its contents are, as much as possible, independent of the rest of the document tree.",browsers:"C52,O40",restriction:"enum",values:[{name:"none",desc:"Indicates that the property has no effect."},{name:"strict",desc:"Turns on all forms of containment for the element."},{name:"content",desc:"All containment rules except size are applied to the element."},{name:"size"},{name:"layout"},{name:"style",desc:"Turns on style containment for the element."},{name:"paint"}]},{name:"content",desc:"Determines which page-based occurrence of a given element is applied to a counter or string value.",browsers:"E,C,FF1,IE8,O4,S1",restriction:"string, url",values:[{name:"attr()"},{name:"counter(name)"},{name:"icon",desc:"The (pseudo-)element is replaced in its entirety by the resource referenced by its 'icon' property, and treated as a replaced element."},{name:"none",desc:"On elements, this inhibits the children of the element from being rendered as children of this element, as if the element was empty. On pseudo-elements it causes the pseudo-element to have no content."},{name:"normal",desc:"See http://www.w3.org/TR/css3-content/#content for computation rules."},{name:"url()"}]},{name:"counter-increment",desc:"Manipulate the value of existing counters.",browsers:"E,C,FF1.5,IE8,O10.5,S3",restriction:"identifier, integer",values:[{name:"none",desc:"This element does not alter the value of any counters."}]},{name:"counter-reset",desc:"Property accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer gives the value that the counter is set to on each occurrence of the element.",browsers:"E,C,FF1.5,IE8,O10.5,S3",restriction:"identifier, integer",values:[{name:"none",desc:"The counter is not modified."}]},{name:"cursor",desc:"Allows control over cursor appearance in an element",restriction:"url, number, enum",values:[{name:"alias"},{name:"all-scroll"},{name:"auto",desc:"The UA determines the cursor to display based on the current context."},{name:"cell"},{name:"col-resize"},{name:"context-menu"},{name:"copy"},{name:"crosshair"},{name:"default",desc:"The platform-dependent default cursor. Often rendered as an arrow."},{name:"e-resize"},{name:"ew-resize"},{name:"grab",browsers:"FF27"},{name:"grabbing",browsers:"FF27"},{name:"help"},{name:"move"},{name:"-moz-grab",browsers:"FF1.5"},{name:"-moz-grabbing",browsers:"FF1.5"},{name:"-moz-zoom-in",browsers:"FF"},{name:"-moz-zoom-out",browsers:"FF"},{name:"ne-resize"},{name:"nesw-resize"},{name:"no-drop"},{name:"none",desc:"No cursor is rendered for the element."},{name:"not-allowed"},{name:"n-resize"},{name:"ns-resize"},{name:"nw-resize"},{name:"nwse-resize"},{name:"pointer"},{name:"progress"},{name:"row-resize"},{name:"se-resize"},{name:"s-resize"},{name:"sw-resize"},{name:"text",desc:"Indicates text that may be selected. Often rendered as a vertical I-beam."},{name:"vertical-text"},{name:"wait"},{name:"-webkit-grab",browsers:"C,S4"},{name:"-webkit-grabbing",browsers:"C,S4"},{name:"-webkit-zoom-in",browsers:"C,S1.2"},{name:"-webkit-zoom-out",browsers:"C,S1.2"},{name:"w-resize"},{name:"zoom-in",browsers:"E,C37,FF24,O12.1,S9"},{name:"zoom-out",browsers:"E,C37,FF24,O12.1,S9"}]},{name:"direction",desc:"Specifies the inline base direction or directionality of any bidi paragraph, embedding, isolate, or override established by the box. Note: for HTML content use the 'dir' attribute and 'bdo' element rather than this property.",restriction:"enum",values:[{name:"ltr"},{name:"rtl"}]},{name:"display",desc:"In combination with 'float' and 'position', determines the type of box or boxes that are generated for an element.",restriction:"enum",values:[{name:"block"},{name:"contents",desc:"The element itself does not generate any boxes, but its children and pseudo-elements still generate boxes as normal.",browsers:"FF37"},{name:"flex",browsers:"E,C29,FF22,IE11,O12.1,S9"},{name:"flexbox",browsers:"O12.1"},{name:"flow-root",browsers:"C58,FF53,O45"},{name:"grid",browsers:"FF52,C57,S10.1,O44"},{name:"inline",desc:"The element generates an inline-level box."},{name:"inline-block"},{name:"inline-flex",browsers:"E,C29,FF22,IE11,O12.1,S9"},{name:"inline-flexbox",browsers:"O12.1"},{name:"inline-table"},{name:"list-item"},{name:"-moz-box",browsers:"FF"},{name:"-moz-deck",browsers:"FF"},{name:"-moz-grid",browsers:"FF"},{name:"-moz-grid-group",browsers:"FF"},{name:"-moz-grid-line",browsers:"FF"},{name:"-moz-groupbox",browsers:"FF"},{name:"-moz-inline-box",browsers:"FF"},{name:"-moz-inline-grid",browsers:"FF"},{name:"-moz-inline-stack",browsers:"FF"},{name:"-moz-marker",browsers:"FF"},{name:"-moz-popup",browsers:"FF"},{name:"-moz-stack",browsers:"FF"},{name:"-ms-flexbox",browsers:"IE10"},{name:"-ms-grid",browsers:"E,IE10"},{name:"-ms-inline-flexbox",browsers:"IE10"},{name:"-ms-inline-grid",browsers:"E,IE10"},{name:"none",desc:"The element and its descendants generates no boxes."},{name:"ruby",desc:"The element generates a principal ruby container box, and establishes a ruby formatting context."},{name:"ruby-base"},{name:"ruby-base-container"},{name:"ruby-text"},{name:"ruby-text-container"},{name:"run-in",browsers:"IE8"},{name:"table"},{name:"table-caption"},{name:"table-cell"},{name:"table-column"},{name:"table-column-group"},{name:"table-footer-group"},{name:"table-header-group"},{name:"table-row"},{name:"table-row-group"},{name:"-webkit-box",browsers:"C,S1"},{name:"-webkit-flex",browsers:"C21,O15,S6.1"},{name:"-webkit-inline-box",browsers:"C,S1"},{name:"-webkit-inline-flex",browsers:"C21,O15,S6.1"}]},{name:"empty-cells",desc:"In the separated borders model, this property controls the rendering of borders and backgrounds around cells that have no visible content.",browsers:"E,C,FF1,IE7,O4,S1.2",restriction:"enum",values:[{name:"hide"},{name:"-moz-show-background",browsers:"FF"},{name:"show"}]},{name:"enable-background",desc:"Deprecated. Use 'isolation' property instead when support allows. Specifies how the accumulation of the background image is managed.",restriction:"integer, length, percentage, enum",values:[{name:"accumulate"},{name:"new"}]},{name:"fallback",desc:"@counter-style descriptor. Specifies a fallback counter style to be used when the current counter style can’t create a representation for a given counter value.",browsers:"FF33",restriction:"identifier"},{name:"fill",desc:"Paints the interior of the given graphical element.",restriction:"color, enum, url",values:[{name:"url()",desc:"A URL reference to a paint server element, which is an element that defines a paint server: ‘hatch’, ‘linearGradient’, ‘mesh’, ‘pattern’, ‘radialGradient’ and ‘solidcolor’."}]},{name:"fill-opacity",desc:"Specifies the opacity of the painting operation used to paint the interior the current object.",restriction:"number(0-1)"},{name:"fill-rule",desc:"Indicates the algorithm (or winding rule) which is to be used to determine what parts of the canvas are included inside the shape.",restriction:"enum",values:[{name:"evenodd"},{name:"nonzero"}]},{name:"filter",desc:"Processes an element’s rendering before it is displayed in the document, by applying one or more filter effects.",browsers:"E13,FF35",restriction:"enum, url",values:[{name:"none",desc:"No filter effects are applied."},{name:"blur()"},{name:"brightness()"},{name:"contrast()"},{name:"drop-shadow()"},{name:"grayscale()"},{name:"hue-rotate()"},{name:"invert()"},{name:"opacity()"},{name:"saturate()"},{name:"sepia()"},{name:"url()",desc:"A filter reference to a <filter> element.",browsers:"FF3.6"}]},{name:"flex",desc:"Specifies the components of a flexible length: the flex grow factor and flex shrink factor, and the flex basis.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"length, number, percentage",values:[{name:"auto",desc:"Retrieves the value of the main size property as the used 'flex-basis'."},{name:"content",desc:"Indicates automatic sizing, based on the flex item’s content.",browsers:"E,IE11"},{name:"none",desc:"Expands to '0 0 auto'."}]},{name:"flex-basis",desc:"Sets the flex basis.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"length, number, percentage",values:[{name:"auto",desc:"Retrieves the value of the main size property as the used 'flex-basis'."},{name:"content",desc:"Indicates automatic sizing, based on the flex item’s content.",browsers:"E,IE11"}]},{name:"flex-direction",desc:"Specifies how flex items are placed in the flex container, by setting the direction of the flex container’s main axis.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"enum",values:[{name:"column",desc:"The flex container’s main axis has the same orientation as the block axis of the current writing mode."},{name:"column-reverse"},{name:"row",desc:"The flex container’s main axis has the same orientation as the inline axis of the current writing mode."},{name:"row-reverse"}]},{name:"flex-flow",desc:"Specifies how flexbox items are placed in the flexbox.",browsers:"E,C29,FF28,IE11,O12.1,S9",restriction:"enum",values:[{name:"column",desc:"The flex container’s main axis has the same orientation as the block axis of the current writing mode."},{name:"column-reverse"},{name:"nowrap",desc:"The flex container is single-line."},{name:"row",desc:"The flex container’s main axis has the same orientation as the inline axis of the current writing mode."},{name:"row-reverse"},{name:"wrap",desc:"The flexbox is multi-line."},{name:"wrap-reverse"}]},{name:"flex-grow",desc:"Sets the flex grow factor. Negative numbers are invalid.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"number"},{name:"flex-shrink",desc:"Sets the flex shrink factor. Negative numbers are invalid.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"number"},{name:"flex-wrap",desc:"Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",browsers:"E,C29,FF28,IE11,O12.1,S9",restriction:"enum",values:[{name:"nowrap",desc:"The flex container is single-line."},{name:"wrap",desc:"The flexbox is multi-line."},{name:"wrap-reverse"}]},{name:"float",desc:"Specifies how a box should be floated. It may be set for any element, but only applies to elements that generate boxes that are not absolutely positioned.",restriction:"enum",values:[{name:"inline-end",browsers:"FF55"},{name:"inline-start",browsers:"FF55"},{name:"left",desc:"The element generates a block box that is floated to the left. Content flows on the right side of the box, starting at the top (subject to the 'clear' property)."},{name:"none",desc:"The box is not floated."},{name:"right",desc:"Similar to 'left', except the box is floated to the right, and content flows on the left side of the box, starting at the top."}]},{name:"flood-color",desc:"Indicates what color to use to flood the current filter primitive subregion.",browsers:"E,C5,FF3,IE10,O9,S6",restriction:"color"},{name:"flood-opacity",desc:"Indicates what opacity to use to flood the current filter primitive subregion.",browsers:"E,C5,FF3,IE10,O9,S6",restriction:"number(0-1), percentage"},{name:"font",desc:"Shorthand property for setting 'font-style', 'font-variant', 'font-weight', 'font-size', 'line-height', and 'font-family', at the same place in the style sheet. The syntax of this property is based on a traditional typographical shorthand notation to set multiple properties related to fonts.",restriction:"font",values:[{name:"100"},{name:"200"},{name:"300"},{name:"400"},{name:"500"},{name:"600"},{name:"700"},{name:"800"},{name:"900"},{name:"bold"},{name:"bolder"},{name:"caption"},{name:"icon",desc:"The font used to label icons."},{name:"italic",desc:"Selects a font that is labeled 'italic', or, if that is not available, one labeled 'oblique'."},{name:"large"},{name:"larger"},{name:"lighter"},{name:"medium"},{name:"menu"},{name:"message-box"},{name:"normal",desc:"Specifies a face that is not labeled as a small-caps font."},{name:"oblique",desc:"Selects a font that is labeled 'oblique'."},{name:"small"},{name:"small-caps",desc:"Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font."},{name:"small-caption"},{name:"smaller"},{name:"status-bar"},{name:"x-large"},{name:"x-small"},{name:"xx-large"},{name:"xx-small"}]},{name:"font-family",desc:"Specifies a prioritized list of font family names or generic family names. A user agent iterates through the list of family names until it matches an available font that contains a glyph for the character to be rendered.",restriction:"font",values:[{name:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif"},{name:"Arial, Helvetica, sans-serif"},{name:"Cambria, Cochin, Georgia, Times, 'Times New Roman', serif"},{name:"'Courier New', Courier, monospace"},{name:"cursive"},{name:"fantasy"},{name:"'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif"},{name:"Georgia, 'Times New Roman', Times, serif"},{name:"'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif"},{name:"Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif"},{name:"'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif"},{name:"monospace"},{name:"sans-serif"},{name:"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"},{name:"serif"},{name:"'Times New Roman', Times, serif"},{name:"'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif"},{name:"Verdana, Geneva, Tahoma, sans-serif"}]},{name:"font-feature-settings",desc:"Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",browsers:"E,FF34,IE10",restriction:"string, integer",values:[{name:'"aalt"'},{name:'"abvf"'},{name:'"abvm"'},{name:'"abvs"'},{name:'"afrc"'},{name:'"akhn"'},{name:'"blwf"'},{name:'"blwm"'},{name:'"blws"'},{name:'"calt"'},{name:'"case"'},{name:'"ccmp"'},{name:'"cfar"'},{name:'"cjct"'},{name:'"clig"'},{name:'"cpct"'},{name:'"cpsp"'},{name:'"cswh"'},{name:'"curs"'},{name:'"c2pc"'},{name:'"c2cs"',desc:"Small Capitals From Capitals. Applies only to bicameral scripts."},{name:'"dist"'},{name:'"dlig"',desc:"Discretionary ligatures."},{name:'"dnom"'},{name:'"dtls"'},{name:'"expt"'},{name:'"falt"'},{name:'"fin2"'},{name:'"fin3"'},{name:'"fina"'},{name:'"flac"'},{name:'"frac"'},{name:'"fwid"'},{name:'"half"'},{name:'"haln"'},{name:'"halt"'},{name:'"hist"'},{name:'"hkna"'},{name:'"hlig"'},{name:'"hngl"'},{name:'"hojo"'},{name:'"hwid"'},{name:'"init"'},{name:'"isol"'},{name:'"ital"'},{name:'"jalt"'},{name:'"jp78"'},{name:'"jp83"'},{name:'"jp90"'},{name:'"jp04"'},{name:'"kern"',desc:"Kerning."},{name:'"lfbd"'},{name:'"liga"',desc:"Standard Ligatures."},{name:'"ljmo"'},{name:'"lnum"',desc:"Lining Figures."},{name:'"locl"'},{name:'"ltra"'},{name:'"ltrm"'},{name:'"mark"'},{name:'"med2"'},{name:'"medi"'},{name:'"mgrk"'},{name:'"mkmk"'},{name:'"nalt"'},{name:'"nlck"'},{name:'"nukt"'},{name:'"numr"'},{name:'"onum"',desc:"Oldstyle Figures."},{name:'"opbd"'},{name:'"ordn"'},{name:'"ornm"'},{name:'"palt"'},{name:'"pcap"'},{name:'"pkna"'},{name:'"pnum"'},{name:'"pref"'},{name:'"pres"'},{name:'"pstf"'},{name:'"psts"'},{name:'"pwid"'},{name:'"qwid"'},{name:'"rand"'},{name:'"rclt"'},{name:'"rlig"'},{name:'"rkrf"'},{name:'"rphf"'},{name:'"rtbd"'},{name:'"rtla"'},{name:'"rtlm"'},{name:'"ruby"'},{name:'"salt"'},{name:'"sinf"'},{name:'"size"'},{name:'"smcp"',desc:"Small Capitals. Applies only to bicameral scripts."},{name:'"smpl"'},{name:'"ssty"'},{name:'"stch"'},{name:'"subs"'},{name:'"sups"'},{name:'"swsh"',desc:"Swash. Does not apply to ideographic scripts."},{name:'"titl"'},{name:'"tjmo"'},{name:'"tnam"'},{name:'"tnum"',desc:"Tabular Figures."},{name:'"trad"'},{name:'"twid"'},{name:'"unic"'},{name:'"valt"'},{name:'"vatu"'},{name:'"vert"'},{name:'"vhal"'},{name:'"vjmo"'},{name:'"vkna"'},{name:'"vkrn"'},{name:'"vpal"'},{name:'"vrt2"'},{name:'"zero"'},{name:"normal",desc:"No change in glyph substitution or positioning occurs."},{name:"off",desc:"Disable feature."},{name:"on",desc:"Enable feature."}]},{name:"font-kerning",desc:"Kerning is the contextual adjustment of inter-glyph spacing. This property controls metric kerning, kerning that utilizes adjustment data contained in the font.",browsers:"C33,FF34,O20",restriction:"enum",values:[{name:"auto",desc:"Specifies that kerning is applied at the discretion of the user agent."},{name:"none",desc:"Specifies that kerning is not applied."},{name:"normal",desc:"Specifies that kerning is applied."}]},{name:"font-language-override",desc:"The value of 'normal' implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering.",browsers:"FF34",restriction:"string",values:[{name:"normal",desc:"Implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering."}]},{name:"font-size",desc:"Indicates the desired height of glyphs from the font. For scalable fonts, the font-size is a scale factor applied to the EM unit of the font. (Note that certain glyphs may bleed outside their EM box.) For non-scalable fonts, the font-size is converted into absolute units and matched against the declared font-size of the font, using the same absolute coordinate space for both of the matched values.",restriction:"length, percentage",values:[{name:"large"},{name:"larger"},{name:"medium"},{name:"small"},{name:"smaller"},{name:"x-large"},{name:"x-small"},{name:"xx-large"},{name:"xx-small"}]},{name:"font-size-adjust",desc:"Preserves the readability of text when font fallback occurs by adjusting the font-size so that the x-height is the same irregardless of the font used.",browsers:"E,FF3,IE10",restriction:"number",values:[{name:"none",desc:"Do not preserve the font’s x-height."}]},{name:"font-stretch",desc:"Selects a normal, condensed, or expanded face from a font family.",browsers:"E,FF9,IE9",restriction:"enum",values:[{name:"condensed"},{name:"expanded"},{name:"extra-condensed"},{name:"extra-expanded"},{name:"narrower",browsers:"E,IE10"},{name:"normal"},{name:"semi-condensed"},{name:"semi-expanded"},{name:"ultra-condensed"},{name:"ultra-expanded"},{name:"wider",browsers:"E,IE10"}]},{name:"font-style",desc:"Allows italic or oblique faces to be selected. Italic forms are generally cursive in nature while oblique faces are typically sloped versions of the regular face.",restriction:"enum",values:[{name:"italic",desc:"Selects a font that is labeled as an 'italic' face, or an 'oblique' face if one is not"},{name:"normal",desc:"Selects a face that is classified as 'normal'."},{name:"oblique",desc:"Selects a font that is labeled as an 'oblique' face, or an 'italic' face if one is not."}]},{name:"font-synthesis",desc:"Controls whether user agents are allowed to synthesize bold or oblique font faces when a font family lacks bold or italic faces.",browsers:"FF34,S9",restriction:"enum",values:[{name:"none",desc:"Disallow all synthetic faces."},{name:"style",desc:"Allow synthetic italic faces."},{name:"weight"}]},{name:"font-variant",desc:"Specifies variant representations of the font",restriction:"enum",values:[{name:"normal",desc:"Specifies a face that is not labeled as a small-caps font."},{name:"small-caps",desc:"Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font."}]},{name:"font-variant-alternates",desc:"For any given character, fonts can provide a variety of alternate glyphs in addition to the default glyph for that character. This property provides control over the selection of these alternate glyphs.",browsers:"FF34",restriction:"enum",values:[{name:"annotation()"},{name:"character-variant()"},{name:"historical-forms"},{name:"normal",desc:"None of the features are enabled."},{name:"ornaments()"},{name:"styleset()"},{name:"stylistic()"},{name:"swash()"}]},{name:"font-variant-caps",desc:"Specifies control over capitalized forms.",browsers:"FF34",restriction:"enum",values:[{name:"all-petite-caps"},{name:"all-small-caps"},{name:"normal",desc:"None of the features are enabled."},{name:"petite-caps"},{name:"small-caps",desc:"Enables display of small capitals. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters."},{name:"titling-caps"},{name:"unicase"}]},{name:"font-variant-east-asian",desc:"Allows control of glyph substitute and positioning in East Asian text.",browsers:"FF34",restriction:"enum",values:[{name:"full-width"},{name:"jis04"},{name:"jis78"},{name:"jis83"},{name:"jis90"},{name:"normal",desc:"None of the features are enabled."},{name:"proportional-width"},{name:"ruby",desc:"Enables display of ruby variant glyphs."},{name:"simplified"},{name:"traditional"}]},{name:"font-variant-ligatures",desc:"Specifies control over which ligatures are enabled or disabled. A value of ‘normal’ implies that the defaults set by the font are used.",browsers:"C18,FF34,O15,S6",restriction:"enum",values:[{name:"additional-ligatures"},{name:"common-ligatures"},{name:"contextual",browsers:"C35,F34,O22"},{name:"discretionary-ligatures"},{name:"historical-ligatures"},{name:"no-additional-ligatures"},{name:"no-common-ligatures"},{name:"no-contextual",browsers:"C35,F34,O22"},{name:"no-discretionary-ligatures"},{name:"no-historical-ligatures"},{name:"none",desc:"Disables all ligatures.",browsers:"FF34"},{name:"normal",desc:"Implies that the defaults set by the font are used."}]},{name:"font-variant-numeric",desc:"Specifies control over numerical forms.",browsers:"FF34",restriction:"enum",values:[{name:"diagonal-fractions"},{name:"lining-nums"},{name:"normal",desc:"None of the features are enabled."},{name:"oldstyle-nums"},{name:"ordinal"},{name:"proportional-nums"},{name:"slashed-zero"},{name:"stacked-fractions"},{name:"tabular-nums"}]},{name:"font-variant-position",desc:"Specifies the vertical position",browsers:"FF34",restriction:"enum",values:[{name:"normal",desc:"None of the features are enabled."},{name:"sub",desc:"Enables display of subscript variants (OpenType feature: subs)."},{name:"super",desc:"Enables display of superscript variants (OpenType feature: sups)."}]},{name:"font-weight",desc:"Specifies weight of glyphs in the font, their degree of blackness or stroke thickness.",restriction:"enum",values:[{name:"100"},{name:"200"},{name:"300"},{name:"400"},{name:"500"},{name:"600"},{name:"700"},{name:"800"},{name:"900"},{name:"bold"},{name:"bolder"},{name:"lighter"},{name:"normal",desc:"Same as 400"}]},{name:"glyph-orientation-horizontal",desc:"Controls glyph orientation when the inline-progression-direction is horizontal.",restriction:"angle, number"},{name:"glyph-orientation-vertical",desc:"Controls glyph orientation when the inline-progression-direction is vertical.",restriction:"angle, number, enum",values:[{name:"auto",desc:"Sets the orientation based on the fullwidth or non-fullwidth characters and the most common orientation."}]},{name:"grid-area",desc:"Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. Shorthand for 'grid-row-start', 'grid-column-start', 'grid-row-end', and 'grid-column-end'.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, integer",values:[{name:"auto",desc:"The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."},{name:"span"}]},{name:"grid",desc:"The grid CSS property is a shorthand property that sets all of the explicit grid properties ('grid-template-rows', 'grid-template-columns', and 'grid-template-areas'), and all the implicit grid properties ('grid-auto-rows', 'grid-auto-columns', and 'grid-auto-flow'), in a single declaration.",browsers:"FF52,C57,E16,S10.1,O44",restriction:"identifier, length, percentage, string, enum"},{name:"grid-auto-columns",desc:"Specifies the size of implicitly created columns.",browsers:"FF52,C57,S10.1,O44",restriction:"length, percentage",values:[{name:"min-content",desc:"Represents the largest min-content contribution of the grid items occupying the grid track."},{name:"max-content",desc:"Represents the largest max-content contribution of the grid items occupying the grid track."},{name:"auto",desc:"As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."},{name:"minmax()"}]},{name:"grid-auto-flow",desc:"Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.",browsers:"FF52,C57,S10.1,O44",restriction:"enum",values:[{name:"row",desc:"The auto-placement algorithm places items by filling each row in turn, adding new rows as necessary."},{name:"column",desc:"The auto-placement algorithm places items by filling each column in turn, adding new columns as necessary."},{name:"dense"}]},{name:"grid-auto-rows",desc:"Specifies the size of implicitly created rows.",browsers:"FF52,C57,S10.1,O44",restriction:"length, percentage",values:[{name:"min-content",desc:"Represents the largest min-content contribution of the grid items occupying the grid track."},{name:"max-content",desc:"Represents the largest max-content contribution of the grid items occupying the grid track."},{name:"auto",desc:"As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."},{name:"minmax()"}]},{name:"grid-column",desc:"Shorthand for 'grid-column-start' and 'grid-column-end'.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, integer, enum",values:[{name:"auto",desc:"The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."},{name:"span"}]},{name:"grid-column-end",desc:"Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, integer, enum",values:[{name:"auto",desc:"The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."},{name:"span"}]},{name:"grid-column-gap",desc:"Specifies the gutters between grid columns.",browsers:"FF52,C57,S10.1,O44",restriction:"length"},{name:"grid-column-start",desc:"Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, integer, enum",values:[{name:"auto",desc:"The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."},{name:"span"}]},{name:"grid-gap",desc:"Shorthand that specifies the gutters between grid columns and grid rows in one declaration.",browsers:"FF52,C57,S10.1,O44",restriction:"length"},{name:"grid-row",desc:"Shorthand for 'grid-row-start' and 'grid-row-end'.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, integer, enum",values:[{name:"auto",desc:"The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."},{name:"span"}]},{name:"grid-row-end",desc:"Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, integer, enum",values:[{name:"auto",desc:"The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."},{name:"span"}]},{name:"grid-row-gap",desc:"Specifies the gutters between grid rows.",browsers:"FF52,C57,S10.1,O44",restriction:"length"},{name:"grid-row-start",desc:"Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, integer, enum",values:[{name:"auto",desc:"The property contributes nothing to the grid item’s placement, indicating auto-placement, an automatic span, or a default span of one."},{name:"span"}]},{name:"grid-template",desc:"Shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, length, percentage, string, enum",values:[{name:"none",desc:"Sets all three properties to their initial values."},{name:"min-content",desc:"Represents the largest min-content contribution of the grid items occupying the grid track."},{name:"max-content",desc:"Represents the largest max-content contribution of the grid items occupying the grid track."},{name:"auto",desc:"As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."},{name:"subgrid",desc:"Sets 'grid-template-rows' and 'grid-template-columns' to 'subgrid', and 'grid-template-areas' to its initial value."},{name:"minmax()"},{name:"repeat()",desc:"Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."}]},{name:"grid-template-areas",desc:"Specifies named grid areas, which are not associated with any particular grid item, but can be referenced from the grid-placement properties.",browsers:"FF52,C57,S10.1,O44",restriction:"string",values:[{name:"none",desc:"The grid container doesn’t define any named grid areas."}]},{name:"grid-template-columns",desc:"specifies, as a space-separated track list, the line names and track sizing functions of the grid.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, length, percentage, enum",values:[{name:"none",desc:"There is no explicit grid; any rows/columns will be implicitly generated."},{name:"min-content",desc:"Represents the largest min-content contribution of the grid items occupying the grid track."},{name:"max-content",desc:"Represents the largest max-content contribution of the grid items occupying the grid track."},{name:"auto",desc:"As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."},{name:"subgrid",desc:"Indicates that the grid will align to its parent grid in that axis."},{name:"minmax()"},{name:"repeat()",desc:"Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."}]},{name:"grid-template-rows",desc:"specifies, as a space-separated track list, the line names and track sizing functions of the grid.",browsers:"FF52,C57,S10.1,O44",restriction:"identifier, length, percentage, string, enum",values:[{name:"none",desc:"There is no explicit grid; any rows/columns will be implicitly generated."},{name:"min-content",desc:"Represents the largest min-content contribution of the grid items occupying the grid track."},{name:"max-content",desc:"Represents the largest max-content contribution of the grid items occupying the grid track."},{name:"auto",desc:"As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."},{name:"subgrid",desc:"Indicates that the grid will align to its parent grid in that axis."},{name:"minmax()"},{name:"repeat()",desc:"Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."}]},{name:"height",desc:"Specifies the height of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",restriction:"length, percentage",values:[{name:"auto",desc:"The height depends on the values of other properties."},{name:"fit-content",browsers:"C46,O33"},{name:"max-content",desc:"Use the max-content inline size or max-content block size, as appropriate to the writing mode.",browsers:"C46,O33"},{name:"min-content",desc:"Use the min-content inline size or min-content block size, as appropriate to the writing mode.",browsers:"C46,O33"}]},{name:"hyphens",desc:"Controls whether hyphenation is allowed to create more break opportunities within a line of text.",browsers:"C55,FF43,O44",restriction:"enum",values:[{name:"auto",desc:"Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."},{name:"manual"},{name:"none",desc:"Words are not broken at line breaks, even if characters inside the word suggest line break points."}]},{name:"image-orientation",desc:"Specifies an orthogonal rotation to be applied to an image before it is laid out.",browsers:"FF26",restriction:"angle",values:[{name:"flip"},{name:"from-image"}]},{name:"image-rendering",desc:"Provides a hint to the user-agent about what aspects of an image are most important to preserve when the image is scaled, to aid the user-agent in the choice of an appropriate scaling algorithm.",browsers:"C,FF3.6,O11.6,S",restriction:"enum",values:[{name:"auto",desc:"The image should be scaled with an algorithm that maximizes the appearance of the image."},{name:"crisp-edges"},{name:"-moz-crisp-edges",browsers:"FF"},{name:"optimizeQuality"},{name:"optimizeSpeed",desc:"Deprecated."},{name:"pixelated"}]},{name:"ime-mode",desc:"Controls the state of the input method editor for text fields.",browsers:"E,FF3,IE5",restriction:"enum",values:[{name:"active"},{name:"auto",desc:"No change is made to the current input method editor state. This is the default."},{name:"disabled"},{name:"inactive"},{name:"normal",desc:"The IME state should be normal; this value can be used in a user style sheet to override the page setting."}]},{name:"inline-size",desc:"Logical 'height'. Mapping depends on the element’s 'writing-mode'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto",desc:"Depends on the values of other properties."}]},{name:"isolation",desc:"In CSS setting to 'isolate' will turn the element into a stacking context. In SVG, it defines whether an element is isolated or not.",browsers:"C,FF,O,S",restriction:"enum",values:[{name:"auto",desc:"Elements are not isolated unless an operation is applied that causes the creation of a stacking context."},{name:"isolate",desc:"In CSS will turn the element into a stacking context."}]},{name:"justify-content",desc:"Aligns flex items along the main axis of the current line of the flex container.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"enum",values:[{name:"start",desc:"The items are packed flush to each other toward the start edge of the alignment container in the main axis."},{name:"end",desc:"The items are packed flush to each other toward the end edge of the alignment container in the main axis."},{name:"left",desc:"The items are packed flush to each other toward the left edge of the alignment container in the main axis."},{name:"right",desc:"The items are packed flush to each other toward the right edge of the alignment container in the main axis."},{name:"safe"},{name:"unsafe"},{name:"stretch",desc:"If the combined size of the alignment subjects is less than the size of the alignment container, any auto-sized alignment subjects have their size increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size exactly fills the alignment container."},{name:"space-evenly"},{name:"flex-end",desc:"Flex items are packed toward the end of the line."},{name:"flex-start",desc:"Flex items are packed toward the start of the line."},{name:"space-around",desc:"Flex items are evenly distributed in the line, with half-size spaces on either end."},{name:"space-between",desc:"Flex items are evenly distributed in the line."},{name:"unsafe"},{name:"baseline",desc:"Specifies participation in first-baseline alignment."},{name:"first baseline",desc:"Specifies participation in first-baseline alignment."},{name:"last baseline",desc:"Specifies participation in last-baseline alignment."}]},{name:"kerning",desc:"Indicates whether the user agent should adjust inter-glyph spacing based on kerning tables that are included in the relevant font or instead disable auto-kerning and set inter-character spacing to a specific length.",restriction:"length, enum",values:[{name:"auto",desc:"Indicates that the user agent should adjust inter-glyph spacing based on kerning tables that are included in the font that will be used."}]},{name:"left",desc:"Specifies how far an absolutely positioned box's left margin edge is offset to the right of the left edge of the box's 'containing block'.",restriction:"length, percentage",values:[{name:"auto",desc:"For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"}]},{name:"letter-spacing",desc:"Specifies the minimum, maximum, and optimal spacing between grapheme clusters.",restriction:"length",values:[{name:"normal",desc:"The spacing is the normal spacing for the current font. It is typically zero-length."}]},{name:"lighting-color",desc:"Defines the color of the light source for filter primitives 'feDiffuseLighting' and 'feSpecularLighting'.",browsers:"E,C5,FF3,IE10,O9,S6",restriction:"color"},{name:"line-break",desc:"Specifies what set of line breaking restrictions are in effect within the element.",browsers:"E,IE5.5,C58,O45,S",restriction:"enum",values:[{name:"auto",desc:"The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines."},{name:"loose",desc:"Breaks text using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers."},{name:"normal",desc:"Breaks text using the most common set of line-breaking rules."},{name:"strict",desc:"Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'."}]},{name:"line-height",desc:"Determines the block-progression dimension of the text content area of an inline box.",restriction:"number, length, percentage",values:[{name:"normal",desc:"Tells user agents to set the computed value to a 'reasonable' value based on the font size of the element."}]},{name:"list-style",desc:"Shorthand for setting 'list-style-type', 'list-style-position' and 'list-style-image'",restriction:"image, enum, url",values:[{name:"armenian"},{name:"circle"},{name:"decimal"},{name:"decimal-leading-zero"},{name:"disc"},{name:"georgian"},{name:"inside"},{name:"lower-alpha"},{name:"lower-greek"},{name:"lower-latin"},{name:"lower-roman"},{name:"none"},{name:"outside"},{name:"square",desc:"A filled square."},{name:"symbols()",browsers:"FF35"},{name:"upper-alpha"},{name:"upper-latin"},{name:"upper-roman"},{name:"url()"}]},{name:"list-style-image",desc:"Sets the image that will be used as the list item marker. When the image is available, it will replace the marker set with the 'list-style-type' marker.",restriction:"image",values:[{name:"none",desc:"The default contents of the of the list item’s marker are given by 'list-style-type' instead."}]},{name:"list-style-position",desc:"Specifies the position of the '::marker' pseudo-element's box in the list item.",restriction:"enum",values:[{name:"inside"},{name:"outside"}]},{name:"list-style-type",desc:"Used to construct the default contents of a list item’s marker",restriction:"enum, string",values:[{name:"armenian",desc:"Traditional uppercase Armenian numbering."},{name:"circle"},{name:"decimal",desc:"Western decimal numbers."},{name:"decimal-leading-zero",desc:"Decimal numbers padded by initial zeros."},{name:"disc"},{name:"georgian",desc:"Traditional Georgian numbering."},{name:"lower-alpha",desc:"Lowercase ASCII letters."},{name:"lower-greek",desc:"Lowercase classical Greek."},{name:"lower-latin",desc:"Lowercase ASCII letters."},{name:"lower-roman",desc:"Lowercase ASCII Roman numerals."},{name:"none",desc:"No marker"},{name:"square",desc:"A filled square."},{name:"symbols()",browsers:"FF35"},{name:"upper-alpha",desc:"Uppercase ASCII letters."},{name:"upper-latin",desc:"Uppercase ASCII letters."},{name:"upper-roman",desc:"Uppercase ASCII Roman numerals."}]},{name:"margin",desc:"Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits.",restriction:"length, percentage",values:[{name:"auto"}]},{name:"margin-block-end",desc:"Logical 'margin-bottom'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto"}]},{name:"margin-block-start",desc:"Logical 'margin-top'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto"}]},{name:"margin-bottom",desc:"Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",restriction:"length, percentage",values:[{name:"auto"}]},{name:"margin-inline-end",desc:"Logical 'margin-right'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto"}]},{name:"margin-inline-start",desc:"Logical 'margin-left'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto"}]},{name:"margin-left",desc:"Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",restriction:"length, percentage",values:[{name:"auto"}]},{name:"margin-right",desc:"Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",restriction:"length, percentage",values:[{name:"auto"}]},{name:"margin-top",desc:"Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",restriction:"length, percentage",values:[{name:"auto"}]},{name:"marker",desc:"Specifies the marker symbol that shall be used for all points on the sets the value for all vertices on the given ‘path’ element or basic shape.",restriction:"url",values:[{name:"none",desc:"Indicates that no marker symbol will be drawn at the given vertex or vertices."},{name:"url()",desc:"Indicates that the <marker> element referenced will be used."}]},{name:"marker-end",desc:"Specifies the marker that will be drawn at the last vertices of the given markable element.",restriction:"url",values:[{name:"none",desc:"Indicates that no marker symbol will be drawn at the given vertex or vertices."},{name:"url()",desc:"Indicates that the <marker> element referenced will be used."}]},{name:"marker-mid",desc:"Specifies the marker that will be drawn at all vertices except the first and last.",restriction:"url",values:[{name:"none",desc:"Indicates that no marker symbol will be drawn at the given vertex or vertices."},{name:"url()",desc:"Indicates that the <marker> element referenced will be used."}]},{name:"marker-start",desc:"Specifies the marker that will be drawn at the first vertices of the given markable element.",restriction:"url",values:[{name:"none",desc:"Indicates that no marker symbol will be drawn at the given vertex or vertices."},{name:"url()",desc:"Indicates that the <marker> element referenced will be used."}]},{name:"mask-image",desc:"Sets the mask layer image of an element.",browsers:"E,FF53",restriction:"url, image, enum",values:[{name:"none",desc:"Counts as a transparent black image layer."},{name:"url()",desc:"Reference to a <mask element or to a CSS image."}]},{name:"mask-mode",desc:"Indicates whether the mask layer image is treated as luminance mask or alpha mask.",browsers:"FF53",restriction:"url, image, enum",values:[{name:"alpha",desc:"Alpha values of the mask layer image should be used as the mask values."},{name:"auto",desc:"Use alpha values if 'mask-image' is an image, luminance if a <mask> element or a CSS image."},{name:"luminance",desc:"Luminance values of the mask layer image should be used as the mask values."}]},{name:"mask-origin",desc:"Specifies the mask positioning area.",browsers:"FF53",restriction:"geometry-box, enum"},{name:"mask-position",desc:"Specifies how mask layer images are positioned.",browsers:"FF53",restriction:"position, length, percentage"},{name:"mask-repeat",desc:"Specifies how mask layer images are tiled after they have been sized and positioned.",browsers:"FF53",restriction:"repeat"},{name:"mask-size",desc:"Specifies the size of the mask layer images.",browsers:"F53",restriction:"length, percentage, enum",values:[{name:"auto",desc:"Resolved by using the image’s intrinsic ratio and the size of the other dimension, or failing that, using the image’s intrinsic size, or failing that, treating it as 100%."},{name:"contain",desc:"Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."},{name:"cover",desc:"Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."}]},{name:"mask-type",desc:"Defines whether the content of the <mask> element is treated as as luminance mask or alpha mask.",browsers:"C24,FF35,O15,S7",restriction:"enum",values:[{name:"alpha",desc:"Indicates that the alpha values of the mask should be used."},{name:"luminance",desc:"Indicates that the luminance values of the mask should be used."}]},{name:"max-block-size",desc:"Logical 'max-width'. Mapping depends on the element’s 'writing-mode'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"none",desc:"No limit on the width of the box."}]},{name:"max-height",desc:"Allows authors to constrain content height to a certain range.",browsers:"E,C,FF1,IE7,O7,S1",restriction:"length, percentage",values:[{name:"none",desc:"No limit on the height of the box."},{name:"fit-content",browsers:"C46,O33"},{name:"max-content",desc:"Use the max-content inline size or max-content block size, as appropriate to the writing mode.",browsers:"C46,O33"},{name:"min-content",desc:"Use the min-content inline size or min-content block size, as appropriate to the writing mode.",browsers:"C46,O33"}]},{name:"max-inline-size",desc:"Logical 'max-height'. Mapping depends on the element’s 'writing-mode'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"none",desc:"No limit on the height of the box."}]},{name:"max-width",desc:"Allows authors to constrain content width to a certain range.",browsers:"E,C,FF1,IE7,O7,S1",restriction:"length, percentage",values:[{name:"none",desc:"No limit on the width of the box."},{name:"fit-content",browsers:"C46,O33"},{name:"max-content",desc:"Use the max-content inline size or max-content block size, as appropriate to the writing mode.",browsers:"C46,O33"},{name:"min-content",desc:"Use the min-content inline size or min-content block size, as appropriate to the writing mode.",browsers:"C46,O33"}]},{name:"min-block-size",desc:"Logical 'min-width'. Mapping depends on the element’s 'writing-mode'.",browsers:"FF41",restriction:"length, percentage"},{name:"min-height",desc:"Allows authors to constrain content height to a certain range.",browsers:"E,C,FF1,IE7,O7,S1",restriction:"length, percentage",values:[{name:"auto",browsers:"E,IE11"},{name:"fit-content",browsers:"C46,O33"},{name:"max-content",desc:"Use the max-content inline size or max-content block size, as appropriate to the writing mode.",browsers:"C46,O33"},{name:"min-content",desc:"Use the min-content inline size or min-content block size, as appropriate to the writing mode.",browsers:"C46,O33"}]},{name:"min-inline-size",desc:"Logical 'min-height'. Mapping depends on the element’s 'writing-mode'.",browsers:"FF41",restriction:"length, percentage"},{name:"min-width",desc:"Allows authors to constrain content width to a certain range.",browsers:"E,C,FF1,IE7,O7,S1",restriction:"length, percentage",values:[{name:"auto",browsers:"E,IE11"},{name:"fit-content",browsers:"C46,O33"},{name:"max-content",desc:"Use the max-content inline size or max-content block size, as appropriate to the writing mode.",browsers:"C46,O33"},{name:"min-content",desc:"Use the min-content inline size or min-content block size, as appropriate to the writing mode.",browsers:"C46,O33"}]},{name:"mix-blend-mode",desc:"Defines the formula that must be used to mix the colors with the backdrop.",browsers:"C41,FF32,O29,S7.1",restriction:"enum",values:[{name:"normal",desc:"Default attribute which specifies no blending"},{name:"multiply"},{name:"screen"},{name:"overlay"},{name:"darken"},{name:"lighten"},{name:"color-dodge"},{name:"color-burn"},{name:"hard-light"},{name:"soft-light"},{name:"difference"},{name:"exclusion"},{name:"hue",browsers:"C41,FF32,O29"},{name:"saturation",browsers:"C41,FF32,O29"},{name:"color",browsers:"C41,FF32,O29"},{name:"luminosity",browsers:"C41,FF32,O29"}]},{name:"motion",desc:"Shorthand property for setting 'motion-path', 'motion-offset' and 'motion-rotation'.",browsers:"C46,O33",restriction:"url, length, percentage, angle, shape, geometry-box, enum",values:[{name:"none",desc:"No motion path gets created."},{name:"path()"},{name:"auto",desc:"Indicates that the object is rotated by the angle of the direction of the motion path."},{name:"reverse",desc:"Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees."}]},{name:"motion-offset",desc:"A distance that describes the position along the specified motion path.",browsers:"C46,O33",restriction:"length, percentage"},{name:"motion-path",desc:"Specifies the motion path the element gets positioned at.",browsers:"C46,O33",restriction:"url, shape, geometry-box, enum",values:[{name:"none",desc:"No motion path gets created."},{name:"path()"}]},{name:"motion-rotation",desc:"Defines the direction of the element while positioning along the motion path.",browsers:"C46,O33",restriction:"angle",values:[{name:"auto",desc:"Indicates that the object is rotated by the angle of the direction of the motion path."},{name:"reverse",desc:"Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees."}]},{name:"-moz-animation",desc:"Shorthand property combines six of the animation properties into a single property.",browsers:"FF9",restriction:"time, enum, timing-function, identifier, number",values:[{name:"alternate"},{name:"alternate-reverse"},{name:"backwards"},{name:"both",desc:"Both forwards and backwards fill modes are applied."},{name:"forwards"},{name:"infinite",desc:"Causes the animation to repeat forever."},{name:"none",desc:"No animation is performed"},{name:"normal",desc:"Normal playback."},{name:"reverse",desc:"All iterations of the animation are played in the reverse direction from the way they were specified."}]},{name:"-moz-animation-delay",desc:"Defines when the animation will start.",browsers:"FF9",restriction:"time"},{name:"-moz-animation-direction",desc:"Defines whether or not the animation should play in reverse on alternate cycles.",browsers:"FF9",restriction:"enum",values:[{name:"alternate"},{name:"alternate-reverse"},{name:"normal",desc:"Normal playback."},{name:"reverse",desc:"All iterations of the animation are played in the reverse direction from the way they were specified."}]},{name:"-moz-animation-duration",desc:"Defines the length of time that an animation takes to complete one cycle.",browsers:"FF9",restriction:"time"},{name:"-moz-animation-iteration-count",desc:"Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",browsers:"FF9",restriction:"number, enum",values:[{name:"infinite",desc:"Causes the animation to repeat forever."}]},{name:"-moz-animation-name",desc:"Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",browsers:"FF9",restriction:"identifier, enum",values:[{name:"none",desc:"No animation is performed"}]},{name:"-moz-animation-play-state",desc:"Defines whether the animation is running or paused.",browsers:"FF9",restriction:"enum",values:[{name:"paused"},{name:"running"}]},{name:"-moz-animation-timing-function",desc:"Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",browsers:"FF9",restriction:"timing-function"},{name:"-moz-appearance",desc:"Used in Gecko (Firefox) to display an element using a platform-native styling based on the operating system's theme.",browsers:"FF1",restriction:"enum",values:[{name:"button"},{name:"button-arrow-down"},{name:"button-arrow-next"},{name:"button-arrow-previous"},{name:"button-arrow-up"},{name:"button-bevel"},{name:"checkbox"},{name:"checkbox-container"},{name:"checkbox-label"},{name:"dialog"},{name:"groupbox"},{name:"listbox"},{name:"menuarrow"},{name:"menuimage"},{name:"menuitem"},{name:"menuitemtext"},{name:"menulist"},{name:"menulist-button"},{name:"menulist-text"},{name:"menulist-textfield"},{name:"menupopup"},{name:"menuradio"},{name:"menuseparator"},{name:"-moz-mac-unified-toolbar"},{name:"-moz-win-borderless-glass"},{name:"-moz-win-browsertabbar-toolbox"},{name:"-moz-win-communications-toolbox"},{name:"-moz-win-glass"},{name:"-moz-win-media-toolbox"},{name:"none"},{name:"progressbar"},{name:"progresschunk"},{name:"radio"},{name:"radio-container"},{name:"radio-label"},{name:"radiomenuitem"},{name:"resizer"},{name:"resizerpanel"},{name:"scrollbarbutton-down"},{name:"scrollbarbutton-left"},{name:"scrollbarbutton-right"},{name:"scrollbarbutton-up"},{name:"scrollbar-small"},{name:"scrollbartrack-horizontal"},{name:"scrollbartrack-vertical"},{name:"separator"},{name:"spinner"},{name:"spinner-downbutton"},{name:"spinner-textfield"},{name:"spinner-upbutton"},{name:"statusbar"},{name:"statusbarpanel"},{name:"tab"},{name:"tabpanels"},{name:"tab-scroll-arrow-back"},{name:"tab-scroll-arrow-forward"},{name:"textfield"},{name:"textfield-multiline"},{name:"toolbar"},{name:"toolbox"},{name:"tooltip"},{name:"treeheadercell"},{name:"treeheadersortarrow"},{name:"treeitem"},{name:"treetwistyopen"},{name:"treeview"},{name:"treewisty"},{name:"window"}]},{name:"-moz-backface-visibility",desc:"Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",browsers:"FF10",restriction:"enum",values:[{name:"hidden"},{name:"visible"}]},{name:"-moz-background-clip",desc:"Determines the background painting area.",browsers:"FF1-3.6",restriction:"box, enum",values:[{name:"padding"}]},{name:"-moz-background-inline-policy",desc:"In Gecko-based applications like Firefox, the -moz-background-inline-policy CSS property specifies how the background image of an inline element is determined when the content of the inline element wraps onto multiple lines. The choice of position has significant effects on repetition.",browsers:"FF1",restriction:"enum",values:[{name:"bounding-box"},{name:"continuous"},{name:"each-box"}]},{name:"-moz-background-origin",desc:"For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",browsers:"FF1",restriction:"box"},{name:"-moz-border-bottom-colors",desc:"Sets a list of colors for the bottom border.",browsers:"FF1",restriction:"color"},{name:"-moz-border-image",desc:"Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",browsers:"FF3.6",restriction:"length, percentage, number, url, enum",values:[{name:"auto",desc:"If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."},{name:"fill",desc:"Causes the middle part of the border-image to be preserved."},{name:"none"},{name:"repeat"},{name:"round",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."},{name:"space",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."},{name:"stretch",desc:"The image is stretched to fill the area."},{name:"url()"}]},{name:"-moz-border-left-colors",desc:"Sets a list of colors for the bottom border.",browsers:"FF1",restriction:"color"},{name:"-moz-border-right-colors",desc:"Sets a list of colors for the bottom border.",browsers:"FF1",restriction:"color"},{name:"-moz-border-top-colors",desc:"Ske Firefox, -moz-border-bottom-colors sets a list of colors for the bottom border.",browsers:"FF1",restriction:"color"},{name:"-moz-box-align",desc:"Specifies how a XUL box aligns its contents across (perpendicular to) the direction of its layout. The effect of this is only visible if there is extra space in the box.",browsers:"FF1",restriction:"enum",values:[{name:"baseline",desc:"If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used."},{name:"center",desc:"Any extra space is divided evenly, with half placed above the child and the other half placed after the child."},{name:"end",desc:"For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element."},{name:"start",desc:"For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element."},{name:"stretch",desc:"The height of each child is adjusted to that of the containing block."}]},{name:"-moz-box-direction",desc:"Specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",browsers:"FF1",restriction:"enum",values:[{name:"normal",desc:"A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom."},{name:"reverse",desc:"A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top."}]},{name:"-moz-box-flex",desc:"Specifies how a box grows to fill the box that contains it, in the direction of the containing box's layout.",browsers:"FF1",restriction:"number"},{name:"-moz-box-flexgroup",desc:"Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",browsers:"FF1",restriction:"integer"},{name:"-moz-box-ordinal-group",desc:"Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",browsers:"FF1",restriction:"integer"},{name:"-moz-box-orient",desc:"In Mozilla applications, -moz-box-orient specifies whether a box lays out its contents horizontally or vertically.",browsers:"FF1",restriction:"enum",values:[{name:"block-axis"},{name:"horizontal",desc:"The box displays its children from left to right in a horizontal line."},{name:"inline-axis"},{name:"vertical",desc:"The box displays its children from stacked from top to bottom vertically."}]},{name:"-moz-box-pack",desc:"Specifies how a box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.",browsers:"FF1",restriction:"enum",values:[{name:"center",desc:"The extra space is divided evenly, with half placed before the first child and the other half placed after the last child."},{name:"end",desc:"For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child."},{name:"justify",desc:"The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start."},{name:"start",desc:"For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child."}]},{name:"-moz-box-sizing",desc:"Box Model addition in CSS3.",browsers:"FF1",restriction:"enum",values:[{name:"border-box"},{name:"content-box"},{name:"padding-box"}]},{name:"-moz-column-count",desc:"Describes the optimal number of columns into which the content of the element will be flowed.",browsers:"FF3.5",restriction:"integer",values:[{name:"auto",desc:"Determines the number of columns by the 'column-width' property and the element width."}]},{name:"-moz-column-gap",desc:"Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",browsers:"FF3.5",restriction:"length",values:[{name:"normal",desc:"User agent specific and typically equivalent to 1em."}]},{name:"-moz-column-rule",desc:"Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",browsers:"FF3.5",restriction:"length, line-width, line-style, color"},{name:"-moz-column-rule-color",desc:"Sets the color of the column rule",browsers:"FF3.5",restriction:"color"},{name:"-moz-column-rule-style",desc:"Sets the style of the rule between columns of an element.",browsers:"FF3.5",restriction:"line-style"},{name:"-moz-column-rule-width",desc:"Sets the width of the rule between columns. Negative values are not allowed.",browsers:"FF3.5",restriction:"length, line-width"},{name:"-moz-columns",desc:"A shorthand property which sets both 'column-width' and 'column-count'.",browsers:"FF9",restriction:"length, integer",values:[{name:"auto",desc:"The width depends on the values of other properties."}]},{name:"-moz-column-width",desc:"This property describes the width of columns in multicol elements.",browsers:"FF3.5",restriction:"length",values:[{name:"auto",desc:"The width depends on the values of other properties."}]},{name:"-moz-font-feature-settings",desc:"Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",browsers:"FF4",restriction:"string, integer",values:[{name:'"c2cs"'},{name:'"dlig"'},{name:'"kern"'},{name:'"liga"'},{name:'"lnum"'},{name:'"onum"'},{name:'"smcp"'},{name:'"swsh"'},{name:'"tnum"'},{name:"normal",desc:"No change in glyph substitution or positioning occurs."},{name:"off",browsers:"FF15"},{name:"on",browsers:"FF15"}]},{name:"-moz-hyphens",desc:"Controls whether hyphenation is allowed to create more break opportunities within a line of text.",browsers:"FF9",restriction:"enum",values:[{name:"auto",desc:"Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."},{name:"manual"},{name:"none",desc:"Words are not broken at line breaks, even if characters inside the word suggest line break points."}]},{name:"-moz-perspective",desc:"Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",browsers:"FF10",restriction:"length",values:[{name:"none",desc:"No perspective transform is applied."}]},{name:"-moz-perspective-origin",desc:"Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",browsers:"FF10",restriction:"position, percentage, length"},{name:"-moz-text-align-last",desc:"Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",browsers:"FF12",restriction:"enum",values:[{name:"auto"},{name:"center",desc:"The inline contents are centered within the line box."},{name:"justify",desc:"The text is justified according to the method specified by the 'text-justify' property."},{name:"left",desc:"The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."},{name:"right",desc:"The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."}]},{name:"-moz-text-decoration-color",desc:"Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",browsers:"FF6",restriction:"color"},{name:"-moz-text-decoration-line",desc:"Specifies what line decorations, if any, are added to the element.",browsers:"FF6",restriction:"enum",values:[{name:"line-through"},{name:"none",desc:"Neither produces nor inhibits text decoration."},{name:"overline"},{name:"underline"}]},{name:"-moz-text-decoration-style",desc:"Specifies the line style for underline, line-through and overline text decoration.",browsers:"FF6",restriction:"enum",values:[{name:"dashed"},{name:"dotted"},{name:"double"},{name:"none",desc:"Produces no line."},{name:"solid"},{name:"wavy"}]},{name:"-moz-text-size-adjust",desc:"Specifies a size adjustment for displaying text content in mobile browsers.",browsers:"FF",restriction:"enum, percentage",values:[{name:"auto",desc:"Renderers must use the default size adjustment when displaying on a small device."},{name:"none",desc:"Renderers must not do size adjustment when displaying on a small device."}]},{name:"-moz-transform",desc:"A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",browsers:"FF3.5",restriction:"enum",values:[{name:"matrix()"},{name:"matrix3d()"},{name:"none"},{name:"perspective"},{name:"rotate()"},{name:"rotate3d()"},{name:"rotateX('angle')"},{name:"rotateY('angle')"},{name:"rotateZ('angle')"},{name:"scale()"},{name:"scale3d()"},{name:"scaleX()"},{name:"scaleY()"},{name:"scaleZ()"},{name:"skew()"},{name:"skewX()"},{name:"skewY()"},{name:"translate()"},{name:"translate3d()"},{name:"translateX()"},{name:"translateY()"},{name:"translateZ()"}]},{name:"-moz-transform-origin",desc:"Establishes the origin of transformation for an element.",browsers:"FF3.5",restriction:"position, length, percentage"},{name:"-moz-transition",desc:"Shorthand property combines four of the transition properties into a single property.",browsers:"FF4",restriction:"time, property, timing-function, enum",values:[{name:"all",desc:"Every property that is able to undergo a transition will do so."},{name:"none",desc:"No property will transition."}]},{name:"-moz-transition-delay",desc:"Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",browsers:"FF4",restriction:"time"},{name:"-moz-transition-duration",desc:"Specifies how long the transition from the old value to the new value should take.",browsers:"FF4",restriction:"time"},{name:"-moz-transition-property",desc:"Specifies the name of the CSS property to which the transition is applied.",browsers:"FF4",restriction:"property",values:[{name:"all",desc:"Every property that is able to undergo a transition will do so."},{name:"none",desc:"No property will transition."}]},{name:"-moz-transition-timing-function",desc:"Describes how the intermediate values used during a transition will be calculated.",browsers:"FF4",restriction:"timing-function"},{name:"-moz-user-focus",desc:"Used to indicate whether the element can have focus.",browsers:"FF1.5",values:[{name:"ignore"},{name:"normal"}]},{name:"-moz-user-select",desc:"Controls the appearance of selection.",browsers:"FF1.5",restriction:"enum",values:[{name:"all"},{name:"element"},{name:"elements"},{name:"-moz-all"},{name:"-moz-none"},{name:"none"},{name:"text"},{name:"toggle"}]},{name:"-ms-accelerator",desc:"IE only. Has the ability to turn off its system underlines for accelerator keys until the ALT key is pressed",browsers:"E,IE10",restriction:"enum",values:[{name:"false"},{name:"true"}]},{name:"-ms-behavior",desc:"IE only. Used to extend behaviors of the browser",browsers:"IE8",restriction:"url"},{name:"-ms-block-progression",desc:"Sets the block-progression value and the flow orientation",browsers:"IE8",restriction:"enum",values:[{name:"bt"},{name:"lr"},{name:"rl"},{name:"tb"}]},{name:"-ms-content-zoom-chaining",desc:"Specifies the zoom behavior that occurs when a user hits the zoom limit during a manipulation.",browsers:"E,IE10",values:[{name:"chained",desc:"The nearest zoomable parent element begins zooming when the user hits a zoom limit during a manipulation. No bounce effect is shown."},{name:"none",desc:"A bounce effect is shown when the user hits a zoom limit during a manipulation."}]},{name:"-ms-content-zooming",desc:"Specifies whether zooming is enabled.",browsers:"E,IE10",restriction:"enum",values:[{name:"none",desc:"The element is not zoomable."},{name:"zoom"}]},{name:"-ms-content-zoom-limit",desc:"Shorthand property for the -ms-content-zoom-limit-min and -ms-content-zoom-limit-max properties.",browsers:"E,IE10",restriction:"percentage"},{name:"-ms-content-zoom-limit-max",desc:"Specifies the maximum zoom factor.",browsers:"E,IE10",restriction:"percentage"},{name:"-ms-content-zoom-limit-min",desc:"Specifies the minimum zoom factor.",browsers:"E,IE10",restriction:"percentage"},{name:"-ms-content-zoom-snap",desc:"Shorthand property for the -ms-content-zoom-snap-type and -ms-content-zoom-snap-points properties.",browsers:"E,IE10",values:[{name:"mandatory",desc:"Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point."},{name:"none",desc:"Indicates that zooming is unaffected by any defined snap-points."},{name:"proximity",desc:'Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop "close enough" to a snap-point.'},{name:"snapInterval(100%, 100%)",desc:"Specifies where the snap-points will be placed."},{name:"snapList()",desc:"Specifies the position of individual snap-points as a comma-separated list of zoom factors."}]},{name:"-ms-content-zoom-snap-points",desc:"Defines where zoom snap-points are located.",browsers:"E,IE10",values:[{name:"snapInterval(100%, 100%)",desc:"Specifies where the snap-points will be placed."},{name:"snapList()",desc:"Specifies the position of individual snap-points as a comma-separated list of zoom factors."}]},{name:"-ms-content-zoom-snap-type",desc:"Specifies how zooming is affected by defined snap-points.",browsers:"E,IE10",restriction:"enum",values:[{name:"mandatory",desc:"Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point."},{name:"none",desc:"Indicates that zooming is unaffected by any defined snap-points."},{name:"proximity",desc:'Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop "close enough" to a snap-point.'}]},{name:"-ms-filter",desc:"IE only. Used to produce visual effects.",browsers:"IE8-9",restriction:"string"},{name:"-ms-flex",desc:"specifies the parameters of a flexible length: the positive and negative flexibility, and the preferred size.",browsers:"IE10",restriction:"length, number, percentage",values:[{name:"auto",desc:"Retrieves the value of the main size property as the used 'flex-basis'."},{name:"none",desc:"Expands to '0 0 auto'."}]},{name:"-ms-flex-align",desc:"Aligns flex items along the cross axis of the current line of the flex container.",browsers:"IE10",restriction:"enum",values:[{name:"baseline",desc:"If the flex item’s inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."},{name:"center",desc:"The flex item’s margin box is centered in the cross axis within the line."},{name:"end",desc:"The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."},{name:"start",desc:"The cross-start margin edge of the flexbox item is placed flush with the cross-start edge of the line."},{name:"stretch",desc:"If the cross size property of the flexbox item is anything other than 'auto', this value is identical to 'start'."}]},{name:"-ms-flex-direction",desc:"Specifies how flex items are placed in the flex container, by setting the direction of the flex container’s main axis.",browsers:"IE10",restriction:"enum",values:[{name:"column",desc:"The flex container’s main axis has the same orientation as the block axis of the current writing mode."},{name:"column-reverse"},{name:"row",desc:"The flex container’s main axis has the same orientation as the inline axis of the current writing mode."},{name:"row-reverse"}]},{name:"-ms-flex-flow",desc:"Specifies how flexbox items are placed in the flexbox.",browsers:"IE10",restriction:"enum",values:[{name:"column",desc:"The flex container’s main axis has the same orientation as the block axis of the current writing mode."},{name:"column-reverse"},{name:"nowrap",desc:"The flex container is single-line."},{name:"row",desc:"The flex container’s main axis has the same orientation as the inline axis of the current writing mode."},{name:"wrap",desc:"The flexbox is multi-line."},{name:"wrap-reverse"}]},{name:"-ms-flex-item-align",desc:"Allows the default alignment along the cross axis to be overridden for individual flex items.",browsers:"IE10",restriction:"enum",values:[{name:"auto",desc:"Computes to the value of 'align-items' on the element’s parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself."},{name:"baseline",desc:"If the flex item’s inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."},{name:"center",desc:"The flex item’s margin box is centered in the cross axis within the line."},{name:"end",desc:"The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."},{name:"start",desc:"The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."},{name:"stretch",desc:"If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."}]},{name:"-ms-flex-line-pack",desc:"Aligns a flex container’s lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",browsers:"IE10",restriction:"enum",values:[{name:"center",desc:"Lines are packed toward the center of the flex container."},{name:"distribute",desc:"Lines are evenly distributed in the flex container, with half-size spaces on either end."},{name:"end",desc:"Lines are packed toward the end of the flex container."},{name:"justify",desc:"Lines are evenly distributed in the flex container."},{name:"start",desc:"Lines are packed toward the start of the flex container."},{name:"stretch",desc:"Lines stretch to take up the remaining space."}]},{name:"-ms-flex-order",desc:"Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",browsers:"IE10",restriction:"integer"},{name:"-ms-flex-pack",desc:"Aligns flex items along the main axis of the current line of the flex container.",browsers:"IE10",restriction:"enum",values:[{name:"center",desc:"Flex items are packed toward the center of the line."},{name:"distribute",desc:"Flex items are evenly distributed in the line, with half-size spaces on either end."},{name:"end",desc:"Flex items are packed toward the end of the line."},{name:"justify",desc:"Flex items are evenly distributed in the line."},{name:"start",desc:"Flex items are packed toward the start of the line."}]},{name:"-ms-flex-wrap",desc:"Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",browsers:"IE10",restriction:"enum",values:[{name:"nowrap",desc:"The flex container is single-line."},{name:"wrap",desc:"The flexbox is multi-line."},{name:"wrap-reverse"}]},{name:"-ms-flow-from",desc:"Makes a block container a region and associates it with a named flow.",browsers:"E,IE10",restriction:"identifier",values:[{name:"none",desc:"The block container is not a CSS Region."}]},{name:"-ms-flow-into",desc:"Places an element or its contents into a named flow.",browsers:"E,IE10",restriction:"identifier",values:[{name:"none",desc:"The element is not moved to a named flow and normal CSS processing takes place."}]},{name:"-ms-grid-column",desc:"Used to place grid items and explicitly defined grid cells in the Grid.",browsers:"E,IE10",restriction:"integer, string, enum",values:[{name:"auto"},{name:"end"},{name:"start"}]},{name:"-ms-grid-column-align",desc:"Aligns the columns in a grid.",browsers:"E,IE10",restriction:"enum",values:[{name:"center",desc:"Places the center of the Grid Item's margin box at the center of the Grid Item's column."},{name:"end",desc:"Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's column."},{name:"start",desc:"Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's column."},{name:"stretch",desc:"Ensures that the Grid Item's margin box is equal to the size of the Grid Item's column."}]},{name:"-ms-grid-columns",desc:"Lays out the columns of the grid.",browsers:"E,IE10"},{name:"-ms-grid-column-span",desc:"Specifies the number of columns to span.",browsers:"E,IE10",restriction:"integer"},{name:"-ms-grid-layer",desc:"Grid-layer is similar in concept to z-index, but avoids overloading the meaning of the z-index property, which is applicable only to positioned elements.",browsers:"E,IE10",restriction:"integer"},{name:"-ms-grid-row",desc:"grid-row is used to place grid items and explicitly defined grid cells in the Grid.",browsers:"E,IE10",restriction:"integer, string, enum",values:[{name:"auto"},{name:"end"},{name:"start"}]},{name:"-ms-grid-row-align",desc:"Aligns the rows in a grid.",browsers:"E,IE10",restriction:"enum",values:[{name:"center",desc:"Places the center of the Grid Item's margin box at the center of the Grid Item's row."},{name:"end",desc:"Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's row."},{name:"start",desc:"Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's row."},{name:"stretch",desc:"Ensures that the Grid Item's margin box is equal to the size of the Grid Item's row."}]},{name:"-ms-grid-rows",desc:"Lays out the columns of the grid.",browsers:"E,IE10"},{name:"-ms-grid-row-span",desc:"Specifies the number of rows to span.",browsers:"E,IE10",restriction:"integer"},{name:"-ms-high-contrast-adjust",desc:"Specifies if properties should be adjusted in high contrast mode.",browsers:"E,IE10",restriction:"enum",values:[{name:"auto",desc:"Properties will be adjusted as applicable."},{name:"none",desc:"No adjustments will be applied."}]},{name:"-ms-hyphenate-limit-chars",desc:"Specifies the minimum number of characters in a hyphenated word.",browsers:"E,IE10",restriction:"integer",values:[{name:"auto",desc:"The user agent chooses a value that adapts to the current layout."}]},{name:"-ms-hyphenate-limit-lines",desc:"Indicates the maximum number of successive hyphenated lines in an element.",browsers:"E,IE10",restriction:"integer",values:[{name:"no-limit"}]},{name:"-ms-hyphenate-limit-zone",desc:"Specifies the maximum amount of unfilled space (before justification) that may be left in the line box before hyphenation is triggered to pull part of a word from the next line back up into the current line.",browsers:"E,IE10",restriction:"percentage, length"},{name:"-ms-hyphens",desc:"Controls whether hyphenation is allowed to create more break opportunities within a line of text.",browsers:"E,IE10",restriction:"enum",values:[{name:"auto",desc:"Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."},{name:"manual"},{name:"none",desc:"Words are not broken at line breaks, even if characters inside the word suggest line break points."}]},{name:"-ms-ime-mode",desc:"Controls the state of the input method editor for text fields.",browsers:"IE10",restriction:"enum",values:[{name:"active"},{name:"auto",desc:"No change is made to the current input method editor state. This is the default."},{name:"disabled"},{name:"inactive"},{name:"normal",desc:"The IME state should be normal; this value can be used in a user style sheet to override the page setting."}]},{name:"-ms-interpolation-mode",desc:"Gets or sets the interpolation (resampling) method used to stretch images.",browsers:"IE7",restriction:"enum",values:[{name:"bicubic"},{name:"nearest-neighbor"}]},{name:"-ms-layout-grid",desc:"Sets or retrieves the composite document grid properties that specify the layout of text characters.",browsers:"E,IE10",values:[{name:"char",desc:"Any of the range of character values available to the -ms-layout-grid-char property."},{name:"line",desc:"Any of the range of line values available to the -ms-layout-grid-line property."},{name:"mode"},{name:"type"}]},{name:"-ms-layout-grid-char",desc:"Sets or retrieves the size of the character grid used for rendering the text content of an element.",browsers:"E,IE10",restriction:"enum, length, percentage",values:[{name:"auto",desc:"Largest character in the font of the element is used to set the character grid."},{name:"none",desc:"Default. No character grid is set."}]},{name:"-ms-layout-grid-line",desc:"Sets or retrieves the gridline value used for rendering the text content of an element.",browsers:"E,IE10",restriction:"length",values:[{name:"auto",desc:"Largest character in the font of the element is used to set the character grid."},{name:"none",desc:"Default. No grid line is set."}]},{name:"-ms-layout-grid-mode",desc:"Gets or sets whether the text layout grid uses two dimensions.",browsers:"E,IE10",restriction:"enum",values:[{name:"both",desc:"Default. Both the char and line grid modes are enabled. This setting is necessary to fully enable the layout grid on an element."},{name:"char",desc:"Only a character grid is used. This is recommended for use with block-level elements, such as a blockquote, where the line grid is intended to be disabled."},{name:"line",desc:"Only a line grid is used. This is recommended for use with inline elements, such as a span, to disable the horizontal grid on runs of text that act as a single entity in the grid layout."},{name:"none",desc:"No grid is used."}]},{name:"-ms-layout-grid-type",desc:"Sets or retrieves the type of grid used for rendering the text content of an element.",browsers:"E,IE10",restriction:"enum",values:[{name:"fixed",desc:"Grid used for monospaced layout. All noncursive characters are treated as equal; every character is centered within a single grid space by default."},{name:"loose",desc:"Default. Grid used for Japanese and Korean characters."},{name:"strict",desc:"Grid used for Chinese, as well as Japanese (Genko) and Korean characters. Only the ideographs, kanas, and wide characters are snapped to the grid."}]},{name:"-ms-line-break",desc:"Specifies what set of line breaking restrictions are in effect within the element.",browsers:"E,IE10",restriction:"enum",values:[{name:"auto",desc:"The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines."},{name:"keep-all",desc:"Sequences of CJK characters can no longer break on implied break points. This option should only be used where the presence of word separator characters still creates line-breaking opportunities, as in Korean."},{name:"newspaper",desc:"Breaks CJK scripts using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers."},{name:"normal",desc:"Breaks CJK scripts using a normal set of line-breaking rules."},{name:"strict",desc:"Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'."}]},{name:"-ms-overflow-style",desc:"Specify whether content is clipped when it overflows the element's content area.",browsers:"E,IE10",restriction:"enum",values:[{name:"auto",desc:"No preference, UA should use the first scrolling method in the list that it supports."},{name:"-ms-autohiding-scrollbar"},{name:"none",desc:"Indicates the element does not display scrollbars or panning indicators, even when its content overflows."},{name:"scrollbar"}]},{name:"-ms-perspective",desc:"Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",browsers:"IE10",restriction:"length",values:[{name:"none",desc:"No perspective transform is applied."}]},{name:"-ms-perspective-origin",desc:"Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",browsers:"IE10",restriction:"position, percentage, length"},{name:"-ms-perspective-origin-x",desc:"Establishes the origin for the perspective property. It effectively sets the X  position at which the viewer appears to be looking at the children of the element.",browsers:"IE10",restriction:"position, percentage, length"},{name:"-ms-perspective-origin-y",desc:"Establishes the origin for the perspective property. It effectively sets the Y position at which the viewer appears to be looking at the children of the element.",browsers:"IE10",restriction:"position, percentage, length"},{name:"-ms-progress-appearance",desc:"Gets or sets a value that specifies whether a progress control displays as a bar or a ring.",browsers:"IE10",restriction:"enum",values:[{name:"bar"},{name:"ring"}]},{name:"-ms-scrollbar-3dlight-color",desc:"Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",browsers:"IE8",restriction:"color"},{name:"-ms-scrollbar-arrow-color",desc:"Determines the color of the arrow elements of a scroll arrow.",browsers:"IE8",restriction:"color"},{name:"-ms-scrollbar-base-color",desc:"Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",browsers:"IE8",restriction:"color"},{name:"-ms-scrollbar-darkshadow-color",desc:"Determines the color of the gutter of a scroll bar.",browsers:"IE8",restriction:"color"},{name:"-ms-scrollbar-face-color",desc:"Determines the color of the scroll box and scroll arrows of a scroll bar.",browsers:"IE8",restriction:"color"},{name:"-ms-scrollbar-highlight-color",desc:"Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",browsers:"IE8",restriction:"color"},{name:"-ms-scrollbar-shadow-color",desc:"Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",browsers:"IE8",restriction:"color"},{name:"-ms-scrollbar-track-color",desc:"Determines the color of the track element of a scroll bar.",browsers:"IE8",restriction:"color"},{name:"-ms-scroll-chaining",desc:"Gets or sets a value that indicates the scrolling behavior that occurs when a user hits the content boundary during a manipulation.",browsers:"E,IE10",restriction:"enum, length",values:[{name:"chained"},{name:"none"}]},{name:"-ms-scroll-limit",desc:"Gets or sets a shorthand value that sets values for the -ms-scroll-limit-x-min, -ms-scroll-limit-y-min, -ms-scroll-limit-x-max, and -ms-scroll-limit-y-max properties.",browsers:"E,IE10",restriction:"length",values:[{name:"auto"}]},{name:"-ms-scroll-limit-x-max",desc:"Gets or sets a value that specifies the maximum value for the scrollLeft property.",browsers:"E,IE10",restriction:"length",values:[{name:"auto"}]},{name:"-ms-scroll-limit-x-min",desc:"Gets or sets a value that specifies the minimum value for the scrollLeft property.",browsers:"E,IE10",restriction:"length"},{name:"-ms-scroll-limit-y-max",desc:"Gets or sets a value that specifies the maximum value for the scrollTop property.",browsers:"E,IE10",restriction:"length",values:[{name:"auto"}]},{name:"-ms-scroll-limit-y-min",desc:"Gets or sets a value that specifies the minimum value for the scrollTop property.",browsers:"E,IE10",restriction:"length"},{name:"-ms-scroll-rails",desc:"Gets or sets a value that indicates whether or not small motions perpendicular to the primary axis of motion will result in either changes to both the scrollTop and scrollLeft properties or a change to the primary axis (for instance, either the scrollTop or scrollLeft properties will change, but not both).",browsers:"E,IE10",restriction:"enum, length",values:[{name:"none"},{name:"railed"}]},{name:"-ms-scroll-snap-points-x",desc:"Gets or sets a value that defines where snap-points will be located along the x-axis.",browsers:"E,IE10",restriction:"enum",values:[{name:"snapInterval(100%, 100%)"},{name:"snapList()"}]},{name:"-ms-scroll-snap-points-y",desc:"Gets or sets a value that defines where snap-points will be located along the y-axis.",browsers:"E,IE10",restriction:"enum",values:[{name:"snapInterval(100%, 100%)"},{name:"snapList()"}]},{name:"-ms-scroll-snap-type",desc:"Gets or sets a value that defines what type of snap-point should be used for the current element. There are two type of snap-points, with the primary difference being whether or not the user is guaranteed to always stop on a snap-point.",browsers:"E,IE10",restriction:"enum",values:[{name:"none",desc:"The visual viewport of this scroll container must ignore snap points, if any, when scrolled."},{name:"mandatory",desc:"The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations."},{name:"proximity",desc:"The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll."}]},{name:"-ms-scroll-snap-x",desc:"Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-x properties.",browsers:"E,IE10",restriction:"enum",values:[{name:"mandatory"},{name:"none"},{name:"proximity"},{name:"snapInterval(100%, 100%)"},{name:"snapList()"}]},{name:"-ms-scroll-snap-y",desc:"Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-y properties.",browsers:"E,IE10",restriction:"enum",values:[{name:"mandatory"},{name:"none"},{name:"proximity"},{name:"snapInterval(100%, 100%)"},{name:"snapList()"}]},{name:"-ms-scroll-translation",desc:"Gets or sets a value that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.",browsers:"E,IE10",restriction:"enum",values:[{name:"none"},{name:"vertical-to-horizontal"}]},{name:"-ms-text-align-last",desc:"Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",browsers:"E,IE8",restriction:"enum",values:[{name:"auto"},{name:"center",desc:"The inline contents are centered within the line box."},{name:"justify",desc:"The text is justified according to the method specified by the 'text-justify' property."},{name:"left",desc:"The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."},{name:"right",desc:"The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."}]},{name:"-ms-text-autospace",desc:"Determines whether or not a full-width punctuation mark character should be trimmed if it appears at the beginning of a line, so that its 'ink' lines up with the first glyph in the line above and below.",browsers:"E,IE8",restriction:"enum",values:[{name:"ideograph-alpha"},{name:"ideograph-numeric"},{name:"ideograph-parenthesis"},{name:"ideograph-space"},{name:"none",desc:"No extra space is created."},{name:"punctuation"}]},{name:"-ms-text-combine-horizontal",desc:"This property specifies the combination of multiple characters into the space of a single character.",browsers:"E,IE11",restriction:"enum, integer",values:[{name:"all",desc:"Attempt to typeset horizontally all consecutive characters within the box such that they take up the space of a single character within the vertical line box."},{name:"digits"},{name:"none",desc:"No special processing."}]},{name:"-ms-text-justify",desc:"Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",browsers:"E,IE8",restriction:"enum",values:[{name:"auto",desc:"The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality."},{name:"distribute",desc:"Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property."},{name:"inter-cluster"},{name:"inter-ideograph"},{name:"inter-word"},{name:"kashida"}]},{name:"-ms-text-kashida-space",desc:"Sets or retrieves the ratio of kashida expansion to white space expansion when justifying lines of text in the object.",browsers:"E,IE10",restriction:"percentage"},{name:"-ms-text-overflow",desc:"Text can overflow for example when it is prevented from wrapping",browsers:"IE10",restriction:"enum",values:[{name:"clip"},{name:"ellipsis"}]},{name:"-ms-text-size-adjust",desc:"Specifies a size adjustment for displaying text content in mobile browsers.",browsers:"E,IE10",restriction:"enum, percentage",values:[{name:"auto",desc:"Renderers must use the default size adjustment when displaying on a small device."},{name:"none",desc:"Renderers must not do size adjustment when displaying on a small device."}]},{name:"-ms-text-underline-position",desc:"Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements.This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",browsers:"E,IE10",restriction:"enum",values:[{name:"alphabetic",desc:"The underline is aligned with the alphabetic baseline. In this case the underline is likely to cross some descenders."},{name:"auto",desc:"The user agent may use any algorithm to determine the underline's position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over."},{name:"over"},{name:"under"}]},{name:"-ms-touch-action",desc:"Gets or sets a value that indicates whether and how a given region can be manipulated by the user.",browsers:"IE10",restriction:"enum",values:[{name:"auto",desc:"The element is a passive element, with several exceptions."},{name:"double-tap-zoom",desc:"The element will zoom on double-tap."},{name:"manipulation",desc:"The element is a manipulation-causing element."},{name:"none",desc:"The element is a manipulation-blocking element."},{name:"pan-x",desc:"The element permits touch-driven panning on the horizontal axis. The touch pan is performed on the nearest ancestor with horizontally scrollable content."},{name:"pan-y",desc:"The element permits touch-driven panning on the vertical axis. The touch pan is performed on the nearest ancestor with vertically scrollable content."},{name:"pinch-zoom",desc:"The element permits pinch-zooming. The pinch-zoom is performed on the nearest ancestor with zoomable content."}]},{name:"-ms-touch-select",desc:"Gets or sets a value that toggles the 'gripper' visual elements that enable touch text selection.",browsers:"E,IE10",restriction:"enum",values:[{name:"grippers"},{name:"none",desc:"Grippers are always off."}]},{name:"-ms-transform",desc:"A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",browsers:"IE9-9",restriction:"enum",values:[{name:"matrix()"},{name:"matrix3d()"},{name:"none"},{name:"rotate()"},{name:"rotate3d()"},{name:"rotateX('angle')"},{name:"rotateY('angle')"},{name:"rotateZ('angle')"},{name:"scale()"},{name:"scale3d()"},{name:"scaleX()"},{name:"scaleY()"},{name:"scaleZ()"},{name:"skew()"},{name:"skewX()"},{name:"skewY()"},{name:"translate()"},{name:"translate3d()"},{name:"translateX()"},{name:"translateY()"},{name:"translateZ()"}]},{name:"-ms-transform-origin",desc:"Establishes the origin of transformation for an element.",browsers:"IE9-9",restriction:"position, length, percentage"},{name:"-ms-transform-origin-x",desc:"The x coordinate of the origin for transforms applied to an element with respect to its border box.",browsers:"IE10",restriction:"length, percentage"},{name:"-ms-transform-origin-y",desc:"The y coordinate of the origin for transforms applied to an element with respect to its border box.",browsers:"IE10",restriction:"length, percentage"},{name:"-ms-transform-origin-z",desc:"The z coordinate of the origin for transforms applied to an element with respect to its border box.",browsers:"IE10",restriction:"length, percentage"},{name:"-ms-user-select",desc:"Controls the appearance of selection.",browsers:"E,IE10",restriction:"enum",values:[{name:"element"},{name:"none"},{name:"text"}]},{name:"-ms-word-break",desc:"Specifies line break opportunities for non-CJK scripts.",browsers:"IE8",restriction:"enum",values:[{name:"break-all"},{name:"keep-all",desc:"Block characters can no longer create implied break points."},{name:"normal",desc:"Breaks non-CJK scripts according to their own rules."}]},{name:"-ms-word-wrap",desc:"Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",browsers:"IE8",restriction:"enum",values:[{name:"break-word",desc:"An unbreakable 'word' may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."},{name:"normal",desc:"Lines may break only at allowed break points."}]},{name:"-ms-wrap-flow",desc:"An element becomes an exclusion when its 'wrap-flow' property has a computed value other than 'auto'.",browsers:"E,IE10",restriction:"enum",values:[{name:"auto",desc:"For floats an exclusion is created, for all other elements an exclusion is not created."},{name:"both",desc:"Inline flow content can flow on all sides of the exclusion."},{name:"clear"},{name:"end",desc:"Inline flow content can wrap on the end side of the exclusion area but must leave the area to the start edge of the exclusion area empty."},{name:"maximum"},{name:"minimum"},{name:"start",desc:"Inline flow content can wrap on the start edge of the exclusion area but must leave the area to end edge of the exclusion area empty."}]},{name:"-ms-wrap-margin",desc:"Gets or sets a value that is used to offset the inner wrap shape from other shapes.",browsers:"E,IE10",restriction:"length, percentage"},{name:"-ms-wrap-through",desc:"Specifies if an element inherits its parent wrapping context. In other words if it is subject to the exclusions defined outside the element.",browsers:"E,IE10",restriction:"enum",values:[{name:"none",desc:"The exclusion element does not inherit its parent node's wrapping context. Its descendants are only subject to exclusion shapes defined inside the element."},{name:"wrap",desc:"The exclusion element inherits its parent node's wrapping context. Its descendant inline content wraps around exclusions defined outside the element."}]},{name:"-ms-writing-mode",desc:"Shorthand property for both 'direction' and 'block-progression'.",browsers:"IE8",restriction:"enum",values:[{name:"bt-lr"},{name:"bt-rl"},{name:"lr-bt"},{name:"lr-tb"},{name:"rl-bt"},{name:"rl-tb"},{name:"tb-lr"},{name:"tb-rl"}]},{name:"-ms-zoom",desc:"Sets or retrieves the magnification scale of the object.",browsers:"IE8",restriction:"enum, integer, number, percentage",values:[{name:"normal"}]},{name:"-ms-zoom-animation",desc:"Gets or sets a value that indicates whether an animation is used when zooming.",browsers:"IE10",restriction:"enum",values:[{name:"default"},{name:"none"}]},{name:"nav-down",desc:"Provides an way to control directional focus navigation.",browsers:"O9.5",restriction:"enum, identifier, string",values:[{name:"auto",desc:"The user agent automatically determines which element to navigate the focus to in response to directional navigational input."},{name:"current"},{name:"root"}]},{name:"nav-index",desc:"Provides an input-method-neutral way of specifying the sequential navigation order (also known as 'tabbing order').",browsers:"O9.5",restriction:"number",values:[{name:"auto",desc:"The element's sequential navigation order is assigned automatically by the user agent."}]},{name:"nav-left",desc:"Provides an way to control directional focus navigation.",browsers:"O9.5",restriction:"enum, identifier, string",values:[{name:"auto",desc:"The user agent automatically determines which element to navigate the focus to in response to directional navigational input."},{name:"current"},{name:"root"}]},{name:"nav-right",desc:"Provides an way to control directional focus navigation.",browsers:"O9.5",restriction:"enum, identifier, string",values:[{name:"auto",desc:"The user agent automatically determines which element to navigate the focus to in response to directional navigational input."},{name:"current"},{name:"root"}]},{name:"nav-up",desc:"Provides an way to control directional focus navigation.",browsers:"O9.5",restriction:"enum, identifier, string",values:[{name:"auto",desc:"The user agent automatically determines which element to navigate the focus to in response to directional navigational input."},{name:"current"},{name:"root"}]},{name:"negative",desc:"@counter-style descriptor. Defines how to alter the representation when the counter value is negative.",browsers:"FF33",restriction:"image, identifier, string"},{name:"-o-animation",desc:"Shorthand property combines six of the animation properties into a single property.",browsers:"O12",restriction:"time, enum, timing-function, identifier, number",values:[{name:"alternate"},{name:"alternate-reverse"},{name:"backwards"},{name:"both",desc:"Both forwards and backwards fill modes are applied."},{name:"forwards"},{name:"infinite",desc:"Causes the animation to repeat forever."},{name:"none",desc:"No animation is performed"},{name:"normal",desc:"Normal playback."},{name:"reverse",desc:"All iterations of the animation are played in the reverse direction from the way they were specified."}]},{name:"-o-animation-delay",desc:"Defines when the animation will start.",browsers:"O12",restriction:"time"},{name:"-o-animation-direction",desc:"Defines whether or not the animation should play in reverse on alternate cycles.",browsers:"O12",restriction:"enum",values:[{name:"alternate"},{name:"alternate-reverse"},{name:"normal",desc:"Normal playback."},{name:"reverse",desc:"All iterations of the animation are played in the reverse direction from the way they were specified."}]},{name:"-o-animation-duration",desc:"Defines the length of time that an animation takes to complete one cycle.",browsers:"O12",restriction:"time"},{name:"-o-animation-fill-mode",desc:"Defines what values are applied by the animation outside the time it is executing.",browsers:"O12",restriction:"enum",values:[{name:"backwards"},{name:"both",desc:"Both forwards and backwards fill modes are applied."},{name:"forwards"},{name:"none",desc:"There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."}]},{name:"-o-animation-iteration-count",desc:"Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",browsers:"O12",restriction:"number, enum",values:[{name:"infinite",desc:"Causes the animation to repeat forever."}]},{name:"-o-animation-name",desc:"Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",browsers:"O12",restriction:"identifier, enum",values:[{name:"none",desc:"No animation is performed"}]},{name:"-o-animation-play-state",desc:"Defines whether the animation is running or paused.",browsers:"O12",restriction:"enum",values:[{name:"paused"},{name:"running"}]},{name:"-o-animation-timing-function",desc:"Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",browsers:"O12",restriction:"timing-function"},{name:"object-fit",desc:"Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",browsers:"C32,FF36,O19,S7.1",restriction:"enum",values:[{name:"contain",desc:"The replaced content is sized to maintain its aspect ratio while fitting within the element’s content box: its concrete object size is resolved as a contain constraint against the element's used width and height."},{name:"cover",desc:"The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element’s used width and height."},{name:"fill",desc:"The replaced content is sized to fill the element’s content box: the object's concrete object size is the element's used width and height."},{name:"none",desc:"The replaced content is not resized to fit inside the element's content box"},{name:"scale-down"}]},{name:"object-position",desc:"Determines the alignment of the replaced element inside its box.",browsers:"C32,FF36,O19",restriction:"position, length, percentage"},{name:"-o-border-image",desc:"Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",browsers:"O11.6",restriction:"length, percentage, number, image, enum",values:[{name:"auto",desc:"If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."},{name:"fill",desc:"Causes the middle part of the border-image to be preserved."},{name:"none"},{name:"repeat"},{name:"round",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."},{name:"space",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."},{name:"stretch",desc:"The image is stretched to fill the area."}]},{name:"-o-object-fit",desc:"Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",browsers:"O10.6",restriction:"enum",values:[{name:"contain",desc:"The replaced content is sized to maintain its aspect ratio while fitting within the element’s content box: its concrete object size is resolved as a contain constraint against the element's used width and height."},{name:"cover",desc:"The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element’s used width and height."},{name:"fill",desc:"The replaced content is sized to fill the element’s content box: the object's concrete object size is the element's used width and height."},{name:"none",desc:"The replaced content is not resized to fit inside the element's content box"},{name:"scale-down"}]},{name:"-o-object-position",desc:"Determines the alignment of the replaced element inside its box.",browsers:"O10.6",restriction:"position, length, percentage"},{name:"opacity",desc:"Opacity of an element's text, where 1 is opaque and 0 is entirely transparent.",browsers:"C,FF3.6,IE9,O9,S1.2",restriction:"number(0-1)"},{name:"order",desc:"Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",browsers:"E,C29,FF22,IE11,O12.1,S9",restriction:"integer"},{name:"orphans",desc:"Specifies the minimum number of line boxes in a block container that must be left in a fragment before a fragmentation break.",browsers:"C,IE8,O7,S1.3",restriction:"integer"},{name:"-o-table-baseline",desc:"Determines which row of a inline-table should be used as baseline of inline-table.",browsers:"O9.6",restriction:"integer"},{name:"-o-tab-size",desc:"This property determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",browsers:"O10.6",restriction:"integer, length"},{name:"-o-text-overflow",desc:"Text can overflow for example when it is prevented from wrapping",browsers:"O10",restriction:"enum",values:[{name:"clip"},{name:"ellipsis"}]},{name:"-o-transform",desc:"A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",browsers:"O10.5",restriction:"enum",values:[{name:"matrix()"},{name:"matrix3d()"},{name:"none"},{name:"rotate()"},{name:"rotate3d()"},{name:"rotateX('angle')"},{name:"rotateY('angle')"},{name:"rotateZ('angle')"},{name:"scale()"},{name:"scale3d()"},{name:"scaleX()"},{name:"scaleY()"},{name:"scaleZ()"},{name:"skew()"},{name:"skewX()"},{name:"skewY()"},{name:"translate()"},{name:"translate3d()"},{name:"translateX()"},{name:"translateY()"},{name:"translateZ()"}]},{name:"-o-transform-origin",desc:"Establishes the origin of transformation for an element.",browsers:"O10.5",restriction:"positon, length, percentage"},{name:"-o-transition",desc:"Shorthand property combines four of the transition properties into a single property.",browsers:"O11.5",restriction:"time, property, timing-function, enum",values:[{name:"all",desc:"Every property that is able to undergo a transition will do so."},{name:"none",desc:"No property will transition."}]},{name:"-o-transition-delay",desc:"Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",browsers:"O11.5",restriction:"time"},{name:"-o-transition-duration",desc:"Specifies how long the transition from the old value to the new value should take.",browsers:"O11.5",restriction:"time"},{name:"-o-transition-property",desc:"Specifies the name of the CSS property to which the transition is applied.",browsers:"O11.5",restriction:"property",values:[{name:"all",desc:"Every property that is able to undergo a transition will do so."},{name:"none",desc:"No property will transition."}]},{name:"-o-transition-timing-function",desc:"Describes how the intermediate values used during a transition will be calculated.",browsers:"O11.5",restriction:"timing-function"},{name:"offset-block-end",desc:"Logical 'bottom'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto",desc:"For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."}]},{name:"offset-block-start",desc:"Logical 'top'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto",desc:"For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."}]},{name:"offset-inline-end",desc:"Logical 'right'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto",desc:"For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."}]},{name:"offset-inline-start",desc:"Logical 'left'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage",values:[{name:"auto",desc:"For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."}]},{name:"outline",desc:"Shorthand property for 'outline-style', 'outline-width', and 'outline-color'.",browsers:"E,C,FF1.5,IE8,O8,S1.2",restriction:"length, line-width, line-style, color, enum",values:[{name:"auto",desc:"Permits the user agent to render a custom outline style, typically the default platform style."},{name:"invert",browsers:"E,IE8,O"}]},{name:"outline-color",desc:"The color of the outline.",browsers:"E,C,FF1.5,IE8,O8,S1.2",restriction:"enum, color",values:[{name:"invert",browsers:"E,IE8,O"}]},{name:"outline-offset",desc:"Offset the outline and draw it beyond the border edge.",browsers:"C,FF1.5,O9.5,S1.2",restriction:"length"},{name:"outline-style",desc:"Style of the outline.",browsers:"E,C,FF1.5,IE8,O8,S1.2",restriction:"line-style, enum",values:[{name:"auto",desc:"Permits the user agent to render a custom outline style, typically the default platform style."}]},{name:"outline-width",desc:"Width of the outline.",browsers:"E,C,FF1.5,IE8,O8,S1.2",restriction:"length, line-width"},{name:"overflow",desc:"Shorthand for setting 'overflow-x' and 'overflow-y'.",restriction:"enum",values:[{name:"auto",desc:"The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."},{name:"hidden",desc:"Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."},{name:"-moz-hidden-unscrollable",browsers:"FF"},{name:"scroll",desc:"Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."},{name:"visible",desc:"Content is not clipped, i.e., it may be rendered outside the content box."}]},{name:"overflow-wrap",desc:"Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit within the line box.",browsers:"C23,O12.1,S6.1",restriction:"enum",values:[{name:"break-word",desc:"An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."},{name:"normal",desc:"Lines may break only at allowed break points."}]},{name:"overflow-x",desc:"Specifies the handling of overflow in the horizontal direction.",browsers:"E,C,FF1.5,IE5,O9.5,S3",restriction:"enum",values:[{name:"auto",desc:"The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."},{name:"hidden",desc:"Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."},{name:"scroll",desc:"Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."},{name:"visible",desc:"Content is not clipped, i.e., it may be rendered outside the content box."}]},{name:"overflow-y",desc:"Specifies the handling of overflow in the vertical direction.",browsers:"E,C,FF1.5,IE5,O9.5,S3",restriction:"enum",values:[{name:"auto",desc:"The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."},{name:"hidden",desc:"Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."},{name:"scroll",desc:"Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."},{name:"visible",desc:"Content is not clipped, i.e., it may be rendered outside the content box."}]},{name:"pad",desc:"@counter-style descriptor. Specifies a “fixed-width” counter style, where representations shorter than the pad value are padded with a particular <symbol>",browsers:"FF33",restriction:"integer, image, string, identifier"},{name:"padding",desc:"Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",restriction:"length, percentage",values:[]},{name:"padding-bottom",desc:"Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",restriction:"length, percentage"},{name:"padding-block-end",desc:"Logical 'padding-bottom'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage"},{name:"padding-block-start",desc:"Logical 'padding-top'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage"},{name:"padding-inline-end",desc:"Logical 'padding-right'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage"},{name:"padding-inline-start",desc:"Logical 'padding-left'. Mapping depends on the parent element’s 'writing-mode', 'direction', and 'text-orientation'.",browsers:"FF41",restriction:"length, percentage"},{name:"padding-left",desc:"Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",restriction:"length, percentage"},{name:"padding-right",desc:"Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",restriction:"length, percentage"},{name:"padding-top",desc:"Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",restriction:"length, percentage"},{name:"page-break-after",desc:"Defines rules for page breaks after an element.",restriction:"enum",values:[{name:"always",desc:"Always force a page break after the generated box."},{name:"auto",desc:"Neither force nor forbid a page break after generated box."},{name:"avoid",desc:"Avoid a page break after the generated box."},{name:"left",desc:"Force one or two page breaks after the generated box so that the next page is formatted as a left page."},{name:"right",desc:"Force one or two page breaks after the generated box so that the next page is formatted as a right page."}]},{name:"page-break-before",desc:"Defines rules for page breaks before an element.",restriction:"enum",values:[{name:"always",desc:"Always force a page break before the generated box."},{name:"auto",desc:"Neither force nor forbid a page break before the generated box."},{name:"avoid",desc:"Avoid a page break before the generated box."},{name:"left",desc:"Force one or two page breaks before the generated box so that the next page is formatted as a left page."},{name:"right",desc:"Force one or two page breaks before the generated box so that the next page is formatted as a right page."}]},{name:"page-break-inside",desc:"Defines rules for page breaks inside an element.",browsers:"C,IE8,O7,S1.3",restriction:"enum",values:[{name:"auto",desc:"Neither force nor forbid a page break inside the generated box."},{name:"avoid",desc:"Avoid a page break inside the generated box."}]},{name:"paint-order",desc:"Controls the order that the three paint operations that shapes and text are rendered with: their fill, their stroke and any markers they might have.",browsers:"C35,FF31,O22,S7.1",restriction:"enum",values:[{name:"fill"},{name:"markers"},{name:"normal",desc:"The element is painted with the standard order of painting operations: the 'fill' is painted first, then its 'stroke' and finally its markers."},{name:"stroke"}]},{name:"perspective",desc:"Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",browsers:"E,C36,FF16,IE10,O23,S9",restriction:"length, enum",values:[{name:"none",desc:"No perspective transform is applied."}]},{name:"perspective-origin",desc:"Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",browsers:"E,C36,FF16,IE10,O23,S9",restriction:"position, percentage, length"},{name:"pointer-events",desc:"Specifies under what circumstances a given element can be the target element for a pointer event.",restriction:"enum",values:[{name:"all",desc:"The given element can be the target element for pointer events whenever the pointer is over either the interior or the perimeter of the element."},{name:"fill",desc:"The given element can be the target element for pointer events whenever the pointer is over the interior of the element."},{name:"none",desc:"The given element does not receive pointer events."},{name:"painted"},{name:"stroke",desc:"The given element can be the target element for pointer events whenever the pointer is over the perimeter of the element."},{name:"visible",desc:"The given element can be the target element for pointer events when the ‘visibility’ property is set to visible and the pointer is over either the interior or the perimete of the element."},{name:"visibleFill"},{name:"visiblePainted"},{name:"visibleStroke"}]},{name:"position",restriction:"enum",values:[{name:"absolute"},{name:"fixed",desc:"The box's position is calculated according to the 'absolute' model, but in addition, the box is fixed with respect to some reference. As with the 'absolute' model, the box's margins do not collapse with any other margins."},{name:"-ms-page",browsers:"E,IE10"},{name:"relative"},{name:"static"},{name:"sticky",browsers:"C56,FF32"},{name:"-webkit-sticky",browsers:"S6.1"}]},{name:"prefix",desc:"@counter-style descriptor. Specifies a <symbol> that is prepended to the marker representation.",browsers:"FF33",restriction:"image, string, identifier"},{name:"quotes",desc:"Specifies quotation marks for any number of embedded quotations.",browsers:"E,C,FF1.5,IE8,O8,S5.1",restriction:"string",values:[{name:"none",desc:"The 'open-quote' and 'close-quote' values of the 'content' property produce no quotations marks, as if they were 'no-open-quote' and 'no-close-quote' respectively."}]},{name:"range",desc:"@counter-style descriptor. Defines the ranges over which the counter style is defined.",browsers:"FF33",restriction:"integer, enum",values:[{name:"auto",desc:"The range depends on the counter system."},{name:"infinite",desc:"If used as the first value in a range, it represents negative infinity; if used as the second value, it represents positive infinity."}]},{name:"resize",desc:"Specifies whether or not an element is resizable by the user, and if so, along which axis/axes.",browsers:"C,FF4,O15,S3",restriction:"enum",values:[{name:"both",desc:"The UA presents a bidirectional resizing mechanism to allow the user to adjust both the height and the width of the element."},{name:"horizontal",desc:"The UA presents a unidirectional horizontal resizing mechanism to allow the user to adjust only the width of the element."},{name:"none",desc:"The UA does not present a resizing mechanism on the element, and the user is given no direct manipulation mechanism to resize the element."},{name:"vertical",desc:"The UA presents a unidirectional vertical resizing mechanism to allow the user to adjust only the height of the element."}]},{name:"right",desc:"Specifies how far an absolutely positioned box's right margin edge is offset to the left of the right edge of the box's 'containing block'.",restriction:"length, percentage",values:[{name:"auto",desc:"For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"}]},{name:"ruby-align",desc:"Specifies how text is distributed within the various ruby boxes when their contents do not exactly fill their respective boxes.",browsers:"FF10,IE5",restriction:"enum",values:[{name:"auto",desc:"The user agent determines how the ruby contents are aligned. This is the initial value.",browsers:"E,IE5"},{name:"center",desc:"The ruby content is centered within its box."},{name:"distribute-letter",browsers:"E,IE5"},{name:"distribute-space",browsers:"E,IE5"},{name:"left",desc:"The ruby text content is aligned with the start edge of the base."},{name:"line-edge",browsers:"E,IE5"},{name:"right",desc:"The ruby text content is aligned with the end edge of the base.",browsers:"E,IE5"},{name:"start",desc:"The ruby text content is aligned with the start edge of the base.",browsers:"FF10"},{name:"space-between",desc:"The ruby content expands as defined for normal text justification (as defined by 'text-justify'),",browsers:"FF10"},{name:"space-around",desc:"As for 'space-between' except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content.",browsers:"FF10"}]},{name:"ruby-overhang",desc:"Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",browsers:"FF10,IE5",restriction:"enum",values:[{name:"auto",desc:"The ruby text can overhang text adjacent to the base on either side. This is the initial value."},{name:"end",desc:"The ruby text can overhang the text that follows it."},{name:"none",desc:"The ruby text cannot overhang any text adjacent to its base, only its own base."},{name:"start",desc:"The ruby text can overhang the text that precedes it."}]},{name:"ruby-position",desc:"Used by the parent of elements with display: ruby-text to control the position of the ruby text with respect to its base.",browsers:"FF10,IE5",restriction:"enum",values:[{name:"after"},{name:"before"},{name:"inline"},{name:"right",desc:"The ruby text appears on the right of the base. Unlike 'before' and 'after', this value is not relative to the text flow direction."}]},{name:"ruby-span",desc:"Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",browsers:"FF10",restriction:"enum",values:[{name:"attr(x)"},{name:"none",desc:"No spanning. The computed value is '1'."}]},{name:"scrollbar-3dlight-color",desc:"Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",browsers:"IE6",restriction:"color"},{name:"scrollbar-arrow-color",desc:"Determines the color of the arrow elements of a scroll arrow.",browsers:"IE6",restriction:"color"},{name:"scrollbar-base-color",desc:"Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",browsers:"IE6",restriction:"color"},{name:"scrollbar-darkshadow-color",desc:"Determines the color of the gutter of a scroll bar.",browsers:"IE6",restriction:"color"},{name:"scrollbar-face-color",desc:"Determines the color of the scroll box and scroll arrows of a scroll bar.",browsers:"IE6",restriction:"color"},{name:"scrollbar-highlight-color",desc:"Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",browsers:"IE6",restriction:"color"},{name:"scrollbar-shadow-color",desc:"Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",browsers:"IE6",restriction:"color"},{name:"scrollbar-track-color",desc:"Determines the color of the track element of a scroll bar.",browsers:"IE6",restriction:"color"},{name:"scroll-behavior",desc:"Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSSOM scrolling APIs.",browsers:"FF36",restriction:"enum",values:[{name:"auto",desc:"Scrolls in an instant fashion."},{name:"smooth"}]},{name:"scroll-snap-coordinate",desc:"Defines the x and y coordinate within the element which will align with the nearest ancestor scroll container’s snap-destination for the respective axis.",browsers:"FF39",restriction:"position, length, percentage, enum",values:[{name:"none",desc:"Specifies that this element does not contribute a snap point."}]},{name:"scroll-snap-destination",desc:"Define the x and y coordinate within the scroll container’s visual viewport which element snap points will align with.",browsers:"FF39",restriction:"position, length, percentage"},{name:"scroll-snap-points-x",desc:"Defines the positioning of snap points along the x axis of the scroll container it is applied to.",browsers:"FF39",restriction:"enum",values:[{name:"none",desc:"No snap points are defined by this scroll container."},{name:"repeat()",desc:"Defines an interval at which snap points are defined, starting from the container’s relevant start edge."}]},{name:"scroll-snap-points-y",desc:"Defines the positioning of snap points alobg the y axis of the scroll container it is applied to.",browsers:"FF39",restriction:"enum",values:[{name:"none",desc:"No snap points are defined by this scroll container."},{name:"repeat()",desc:"Defines an interval at which snap points are defined, starting from the container’s relevant start edge."}]},{name:"scroll-snap-type",desc:"Defines how strictly snap points are enforced on the scroll container.",browsers:"FF39",restriction:"enum",values:[{name:"none",desc:"The visual viewport of this scroll container must ignore snap points, if any, when scrolled."},{name:"mandatory",desc:"The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations."},{name:"proximity",desc:"The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll."}]},{name:"shape-image-threshold",desc:"Defines the alpha channel threshold used to extract the shape using an image. A value of 0.5 means that the shape will enclose all the pixels that are more than 50% opaque.",browsers:"C37,O24",restriction:"number"},{name:"shape-margin",desc:"Adds a margin to a 'shape-outside'. This defines a new shape that is the smallest contour that includes all the points that are the 'shape-margin' distance outward in the perpendicular direction from a point on the underlying shape.",browsers:"C37,O24",restriction:"url, length, percentage"},{name:"shape-outside",desc:"Specifies an orthogonal rotation to be applied to an image before it is laid out.",browsers:"C37,O24",restriction:"image, box, shape, enum",values:[{name:"margin-box"},{name:"none",desc:"The float area is unaffected."}]},{name:"shape-rendering",desc:"Provides hints about what tradeoffs to make as it renders vector graphics elements such as <path> elements and basic shapes such as circles and rectangles.",restriction:"enum",values:[{name:"auto",desc:"Suppresses aural rendering."},{name:"crispEdges"},{name:"geometricPrecision",desc:"Emphasize geometric precision over speed and crisp edges."},{name:"optimizeSpeed",desc:"Emphasize rendering speed over geometric precision and crisp edges."}]},{name:"size",browsers:"C,O8",restriction:"length"},{name:"src",desc:"@font-face descriptor. Specifies the resource containing font data. It is required, whether the font is downloadable or locally installed.",restriction:"enum, url, identifier",values:[{name:"url()",desc:"Reference font by URL"},{name:"format()"},{name:"local()"}]},{name:"stop-color",desc:"Indicates what color to use at that gradient stop.",restriction:"color"},{name:"stop-opacity",desc:"Defines the opacity of a given gradient stop.",restriction:"number(0-1)"},{name:"stroke",desc:"Paints along the outline of the given graphical element.",restriction:"color, enum, url",values:[{name:"url()",desc:"A URL reference to a paint server element, which is an element that defines a paint server: ‘hatch’, ‘linearGradient’, ‘mesh’, ‘pattern’, ‘radialGradient’ and ‘solidcolor’."}]},{name:"stroke-dasharray",desc:"Controls the pattern of dashes and gaps used to stroke paths.",restriction:"length, percentage, number, enum",values:[{name:"none",desc:"Indicates that no dashing is used."}]},{name:"stroke-dashoffset",desc:"Specifies the distance into the dash pattern to start the dash.",restriction:"percentage, length"},{name:"stroke-linecap",desc:"Specifies the shape to be used at the end of open subpaths when they are stroked.",restriction:"enum",values:[{name:"butt"},{name:"round",desc:"Indicates that at each end of each subpath, the shape representing the stroke will be extended by a half circle with a radius equal to the stroke width."},{name:"square",desc:"Indicates that at the end of each subpath, the shape representing the stroke will be extended by a rectangle with the same width as the stroke width and whose length is half of the stroke width."}]},{name:"stroke-linejoin",desc:"Specifies the shape to be used at the corners of paths or basic shapes when they are stroked.",restriction:"enum",values:[{name:"bevel"},{name:"miter"},{name:"round",desc:"Indicates that a round corner is to be used to join path segments."}]},{name:"stroke-miterlimit",desc:"When two line segments meet at a sharp angle and miter joins have been specified for 'stroke-linejoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path.",restriction:"number"},{name:"stroke-opacity",desc:"Specifies the opacity of the painting operation used to stroke the current object.",restriction:"number(0-1)"},{name:"stroke-width",desc:"Specifies the width of the stroke on the current object.",restriction:"percentage, length"},{name:"suffix",desc:"@counter-style descriptor. Specifies a <symbol> that is appended to the marker representation.",browsers:"FF33",restriction:"image, string, identifier"},{name:"system",desc:"@counter-style descriptor. Specifies which algorithm will be used to construct the counter’s representation based on the counter value.",browsers:"FF33",restriction:"enum, integer",values:[{name:"additive"},{name:"alphabetic",desc:'Interprets the list of counter symbols as digits to an alphabetic numbering system, similar to the default lower-alpha counter style, which wraps from "a", "b", "c", to "aa", "ab", "ac".'},{name:"cyclic"},{name:"extends"},{name:"fixed",desc:"Runs through its list of counter symbols once, then falls back."},{name:"numeric"},{name:"symbolic"}]},{name:"symbols",desc:"@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor.",browsers:"FF33",restriction:"image, string, identifier"},{name:"table-layout",desc:"Controls the algorithm used to lay out the table cells, rows, and columns.",restriction:"enum",values:[{name:"auto",desc:"Use any automatic table layout algorithm."},{name:"fixed",desc:"Use the fixed table layout algorithm."}]},{name:"tab-size",desc:"Determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",browsers:"C21,O15,S6.1",restriction:"integer, length"},{name:"text-align",desc:"Describes how inline contents of a block are horizontally aligned if the contents do not completely fill the line box.",restriction:"string",values:[{name:"center",desc:"The inline contents are centered within the line box."},{name:"end",desc:"The inline contents are aligned to the end edge of the line box.",browsers:"C,FF3.6,O15,S3.1"},{name:"justify",desc:"The text is justified according to the method specified by the 'text-justify' property."},{name:"left",desc:"The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."},{name:"right",desc:"The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."},{name:"start",desc:"The inline contents are aligned to the start edge of the line box.",browsers:"C,FF1,O15,S3.1"}]},{name:"text-align-last",desc:"Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",browsers:"E,FF12,IE5",restriction:"enum",values:[{name:"auto",desc:"Content on the affected line is aligned per 'text-align' unless 'text-align' is set to 'justify', in which case it is 'start-aligned'."},{name:"center",desc:"The inline contents are centered within the line box."},{name:"justify",desc:"The text is justified according to the method specified by the 'text-justify' property."},{name:"left",desc:"The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."},{name:"right",desc:"The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."}]},{name:"text-anchor",desc:"Used to align (start-, middle- or end-alignment) a string of text relative to a given point.",restriction:"enum",values:[{name:"end",desc:"The rendered characters are aligned such that the end of the resulting rendered text is at the initial current text position."},{name:"middle",desc:"The rendered characters are aligned such that the geometric middle of the resulting rendered text is at the initial current text position."},{name:"start",desc:"The rendered characters are aligned such that the start of the resulting rendered text is at the initial current text position."}]},{name:"text-decoration",desc:"Decorations applied to font used for an element's text.",restriction:"enum, color",values:[{name:"dashed"},{name:"dotted"},{name:"double"},{name:"line-through"},{name:"overline"},{name:"solid"},{name:"underline"},{name:"wavy"}]},{name:"text-decoration-color",desc:"Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",browsers:"FF36,C57,O44",restriction:"color"},{name:"text-decoration-line",desc:"Specifies what line decorations, if any, are added to the element.",browsers:"FF36",restriction:"enum",values:[{name:"line-through"},{name:"none",desc:"Neither produces nor inhibits text decoration."},{name:"overline"},{name:"underline"}]},{name:"text-decoration-style",desc:"Specifies the line style for underline, line-through and overline text decoration.",browsers:"FF36",restriction:"enum",values:[{name:"dashed"},{name:"dotted"},{name:"double"},{name:"none",desc:"Produces no line."},{name:"solid"},{name:"wavy"}]},{name:"text-indent",desc:"Specifies the indentation applied to lines of inline content in a block. The indentation only affects the first line of inline content in the block unless the 'hanging' keyword is specified, in which case it affects all lines except the first.",restriction:"percentage, length",values:[]},{name:"text-justify",desc:"Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",browsers:"E,IE5.5",restriction:"enum",values:[{name:"auto",desc:"The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality."},{name:"distribute",desc:"Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property."},{name:"distribute-all-lines"},{name:"inter-cluster"},{name:"inter-ideograph"},{name:"inter-word"},{name:"kashida"},{name:"newspaper"}]},{name:"text-orientation",desc:"Specifies the orientation of text within a line.",browsers:"C,O15,S5.1",restriction:"enum",values:[{name:"sideways",browsers:"C25,O15,S6.1"},{name:"sideways-right",browsers:"C25,O15,S6.1"},{name:"upright"}]},{name:"text-overflow",desc:"Text can overflow for example when it is prevented from wrapping.",browsers:"E,C,FF9,IE5.5,O11.6,S2",restriction:"enum, string",values:[{name:"clip"},{name:"ellipsis"}]},{name:"text-rendering",desc:"The creator of SVG content might want to provide a hint to the implementation about what tradeoffs to make as it renders text. The ‘text-rendering’ property provides these hints.",browsers:"C,FF3,O9,S5",restriction:"enum",values:[{name:"auto"},{name:"geometricPrecision",desc:"Indicates that the user agent shall emphasize geometric precision over legibility and rendering speed."},{name:"optimizeLegibility"},{name:"optimizeSpeed",desc:"Indicates that the user agent shall emphasize rendering speed over legibility and geometric precision."}]},{name:"text-shadow",desc:"Enables shadow effects to be applied to the text of the element.",browsers:"E,C,FF3.6,IE10,O9.5,S1.1",restriction:"length, color",values:[]},{name:"text-transform",desc:"Controls capitalization effects of an element’s text.",restriction:"enum",values:[{name:"capitalize"},{name:"lowercase"},{name:"none",desc:"No effects."},{name:"uppercase"}]},{name:"text-underline-position",desc:"Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements. This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",browsers:"E,IE10",restriction:"enum",values:[{name:"above"},{name:"auto",desc:"The user agent may use any algorithm to determine the underline’s position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over."},{name:"below",desc:"The underline is aligned with the under edge of the element’s content box."}]},{name:"top",desc:"Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's 'containing block'.",restriction:"length, percentage",values:[{name:"auto",desc:"For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"}]},{name:"touch-action",desc:"Determines whether touch input may trigger default behavior supplied by user agent.",browsers:"E,C36,IE11,O23",restriction:"enum",values:[{name:"auto",desc:"The user agent may determine any permitted touch behaviors for touches that begin on the element."},{name:"cross-slide-x",browsers:"E,IE11"},{name:"cross-slide-y",browsers:"E,IE11"},{name:"double-tap-zoom",browsers:"E,IE11"},{name:"manipulation",desc:"The user agent may consider touches that begin on the element only for the purposes of scrolling and continuous zooming."},{name:"none",desc:"Touches that begin on the element must not trigger default touch behaviors."},{name:"pan-x",desc:"The user agent may consider touches that begin on the element only for the purposes of horizontally scrolling the element’s nearest ancestor with horizontally scrollable content."},{name:"pan-y",desc:"The user agent may consider touches that begin on the element only for the purposes of vertically scrolling the element’s nearest ancestor with vertically scrollable content."},{name:"pinch-zoom",browsers:"E,IE11"}]},{name:"transform",desc:"A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",browsers:"E,C36,FF16,IE10,O12.1,S9",restriction:"enum",values:[{name:"matrix()"},{name:"matrix3d()"},{name:"none"},{name:"perspective()"},{name:"rotate()"},{name:"rotate3d()"},{name:"rotateX('angle')"},{name:"rotateY('angle')"},{name:"rotateZ('angle')"},{name:"scale()"},{name:"scale3d()"},{name:"scaleX()"},{name:"scaleY()"},{name:"scaleZ()"},{name:"skew()"},{name:"skewX()"},{name:"skewY()"},{name:"translate()"},{name:"translate3d()"},{name:"translateX()"},{name:"translateY()"},{name:"translateZ()"}]},{name:"transform-origin",desc:"Establishes the origin of transformation for an element.",browsers:"E,C36,FF16,IE10,O12.1,S9",restriction:"position, length, percentage"},{name:"transform-style",desc:"Defines how nested elements are rendered in 3D space.",browsers:"E,C36,FF16,IE10,O23,S9",restriction:"enum",values:[{name:"flat"},{name:"preserve-3d",browsers:"E,C36,FF16,O23,S9"}]},{name:"transition",desc:"Shorthand property combines four of the transition properties into a single property.",browsers:"E,FF16,IE10,O12.5",restriction:"time, property, timing-function, enum",values:[{name:"all",desc:"Every property that is able to undergo a transition will do so."},{name:"none",desc:"No property will transition."}]},{name:"transition-delay",desc:"Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",browsers:"E,FF16,IE10,O12.5",restriction:"time"},{name:"transition-duration",desc:"Specifies how long the transition from the old value to the new value should take.",browsers:"E,FF16,IE10,O12.5",restriction:"time"},{name:"transition-property",desc:"Specifies the name of the CSS property to which the transition is applied.",browsers:"E,FF16,IE10,O12.5",restriction:"property",values:[{name:"all",desc:"Every property that is able to undergo a transition will do so."},{name:"none",desc:"No property will transition."}]},{name:"transition-timing-function",desc:"Describes how the intermediate values used during a transition will be calculated.",browsers:"E,FF16,IE10,O12.5",restriction:"timing-function"},{name:"unicode-bidi",desc:"The level of embedding with respect to the bidirectional algorithm.",restriction:"enum",values:[{name:"bidi-override"},{name:"embed"},{name:"isolate",desc:"The contents of the element are considered to be inside a separate, independent paragraph.",browsers:"C,FF10,O15,S5.1"},{name:"isolate-override",browsers:"C,FF17,O15,S6.1"},{name:"normal",desc:"The element does not open an additional level of embedding with respect to the bidirectional algorithm. For inline-level elements, implicit reordering works across element boundaries."},{name:"plaintext",browsers:"C,FF10,O15,S6"}]},{name:"unicode-range",desc:"@font-face descriptor. Defines the set of Unicode codepoints that may be supported by the font face for which it is declared.",restriction:"unicode-range",values:[{name:"U+26"},{name:"U+20-24F, U+2B0-2FF, U+370-4FF, U+1E00-1EFF, U+2000-20CF, U+2100-23FF, U+2500-26FF, U+E000-F8FF, U+FB00–FB4F"},{name:"U+20-17F, U+2B0-2FF, U+2000-206F, U+20A0-20CF, U+2100-21FF, U+2600-26FF"},{name:"U+20-2FF, U+370-4FF, U+1E00-20CF, U+2100-23FF, U+2500-26FF, U+FB00-FB4F, U+FFF0-FFFD"},{name:"U+20-4FF, U+530-58F, U+10D0-10FF, U+1E00-23FF, U+2440-245F, U+2500-26FF, U+FB00-FB4F, U+FE20-FE2F, U+FFF0-FFFD"},{name:"U+00-7F"},{name:"U+80-FF"},{name:"U+100-17F"},{name:"U+180-24F"},{name:"U+1E00-1EFF"},{name:"U+250-2AF"},{name:"U+370-3FF"},{name:"U+1F00-1FFF"},{name:"U+400-4FF"},{name:"U+500-52F"},{name:"U+00-52F, U+1E00-1FFF, U+2200–22FF"},{name:"U+530–58F"},{name:"U+590–5FF"},{name:"U+600–6FF"},{name:"U+750–77F"},{name:"U+8A0–8FF"},{name:"U+700–74F"},{name:"U+900–97F"},{name:"U+980–9FF"},{name:"U+A00–A7F"},{name:"U+A80–AFF"},{name:"U+B00–B7F"},{name:"U+B80–BFF"},{name:"U+C00–C7F"},{name:"U+C80–CFF"},{name:"U+D00–D7F"},{name:"U+D80–DFF"},{name:"U+118A0–118FF"},{name:"U+E00–E7F"},{name:"U+1A20–1AAF"},{name:"U+AA80–AADF"},{name:"U+E80–EFF"},{name:"U+F00–FFF"},{name:"U+1000–109F"},{name:"U+10A0–10FF"},{name:"U+1200–137F"},{name:"U+1380–139F"},{name:"U+2D80–2DDF"},{name:"U+AB00–AB2F"},{name:"U+1780–17FF"},{name:"U+1800–18AF"},{name:"U+1B80–1BBF"},{name:"U+1CC0–1CCF"},{name:"U+4E00–9FD5"},{name:"U+3400–4DB5"},{name:"U+2F00–2FDF"},{name:"U+2E80–2EFF"},{name:"U+1100–11FF"},{name:"U+AC00–D7AF"},{name:"U+3040–309F"},{name:"U+30A0–30FF"},{name:"U+A5, U+4E00-9FFF, U+30??, U+FF00-FF9F"},{name:"U+A4D0–A4FF"},{name:"U+A000–A48F"},{name:"U+A490–A4CF"},{name:"U+2000-206F"},{name:"U+3000–303F"},{name:"U+2070–209F"},{name:"U+20A0–20CF"},{name:"U+2100–214F"},{name:"U+2150–218F"},{name:"U+2190–21FF"},{name:"U+2200–22FF"},{name:"U+2300–23FF"},{name:"U+E000-F8FF"},{name:"U+FB00–FB4F"},{name:"U+FB50–FDFF"},{name:"U+1F600–1F64F"},{name:"U+2600–26FF"},{name:"U+1F300–1F5FF"},{name:"U+1F900–1F9FF"},{name:"U+1F680–1F6FF"}]},{name:"user-select",desc:"Controls the appearance of selection.",restriction:"enum",values:[{name:"all",desc:"The content of the element must be selected atomically"},{name:"auto"},{name:"contain",desc:"UAs must not allow a selection which is started in this element to be extended outside of this element."},{name:"none",desc:"The UA must not allow selections to be started in this element."},{name:"text",desc:"The element imposes no constraint on the selection."}]},{name:"vertical-align",desc:"Affects the vertical positioning of the inline boxes generated by an inline-level element inside a line box.",restriction:"percentage, length",values:[{name:"auto",desc:"Align the dominant baseline of the parent box with the equivalent, or heuristically reconstructed, baseline of the element inline box."},{name:"baseline",desc:"Align the 'alphabetic' baseline of the element with the 'alphabetic' baseline of the parent element."},{name:"bottom",desc:"Align the after edge of the extended inline box with the after-edge of the line box."},{name:"middle",desc:"Align the 'middle' baseline of the inline element with the middle baseline of the parent."},{name:"sub",desc:"Lower the baseline of the box to the proper position for subscripts of the parent's box. (This value has no effect on the font size of the element's text.)"},{name:"super",desc:"Raise the baseline of the box to the proper position for superscripts of the parent's box. (This value has no effect on the font size of the element's text.)"},{name:"text-bottom"},{name:"text-top"},{name:"top",desc:"Align the before edge of the extended inline box with the before-edge of the line box."},{name:"-webkit-baseline-middle",browsers:"C,S1"}]},{name:"visibility",desc:"Specifies whether the boxes generated by an element are rendered. Invisible boxes still affect layout (set the ‘display’ property to ‘none’ to suppress box generation altogether).",restriction:"enum",values:[{name:"collapse",desc:"Table-specific. If used on elements other than rows, row groups, columns, or column groups, 'collapse' has the same meaning as 'hidden'."},{name:"hidden",desc:"The generated box is invisible (fully transparent, nothing is drawn), but still affects layout."},{name:"visible",desc:"The generated box is visible."}]},{name:"-webkit-animation",desc:"Shorthand property combines six of the animation properties into a single property.",browsers:"C,S5",restriction:"time, enum, timing-function, identifier, number",values:[{name:"alternate"},{name:"alternate-reverse"},{name:"backwards"},{name:"both",desc:"Both forwards and backwards fill modes are applied."},{name:"forwards"},{name:"infinite",desc:"Causes the animation to repeat forever."},{name:"none",desc:"No animation is performed"},{name:"normal",desc:"Normal playback."},{name:"reverse",desc:"All iterations of the animation are played in the reverse direction from the way they were specified."}]},{name:"-webkit-animation-delay",desc:"Defines when the animation will start.",browsers:"C,S5",restriction:"time"},{name:"-webkit-animation-direction",desc:"Defines whether or not the animation should play in reverse on alternate cycles.",browsers:"C,S5",restriction:"enum",values:[{name:"alternate"},{name:"alternate-reverse"},{name:"normal",desc:"Normal playback."},{name:"reverse",desc:"All iterations of the animation are played in the reverse direction from the way they were specified."}]},{name:"-webkit-animation-duration",desc:"Defines the length of time that an animation takes to complete one cycle.",browsers:"C,S5",restriction:"time"},{name:"-webkit-animation-fill-mode",desc:"Defines what values are applied by the animation outside the time it is executing.",browsers:"C,S5",restriction:"enum",values:[{name:"backwards"},{name:"both",desc:"Both forwards and backwards fill modes are applied."},{name:"forwards"},{name:"none",desc:"There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."}]},{name:"-webkit-animation-iteration-count",desc:"Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",browsers:"C,S5",restriction:"number, enum",values:[{name:"infinite",desc:"Causes the animation to repeat forever."}]},{name:"-webkit-animation-name",desc:"Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",browsers:"C,S5",restriction:"identifier, enum",values:[{name:"none",desc:"No animation is performed"}]},{name:"-webkit-animation-play-state",desc:"Defines whether the animation is running or paused.",browsers:"C,S5",restriction:"enum",values:[{name:"paused"},{name:"running"}]},{name:"-webkit-animation-timing-function",desc:"Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",browsers:"C,S5",restriction:"timing-function"},{name:"-webkit-appearance",desc:"Changes the appearance of buttons and other controls to resemble native controls.",browsers:"C,S3",restriction:"enum",values:[{name:"button"},{name:"button-bevel"},{name:"caps-lock-indicator"},{name:"caret"},{name:"checkbox"},{name:"default-button"},{name:"listbox"},{name:"listitem"},{name:"media-fullscreen-button"},{name:"media-mute-button"},{name:"media-play-button"},{name:"media-seek-back-button"},{name:"media-seek-forward-button"},{name:"media-slider"},{name:"media-sliderthumb"},{name:"menulist"},{name:"menulist-button"},{name:"menulist-text"},{name:"menulist-textfield"},{name:"none"},{name:"push-button"},{name:"radio"},{name:"scrollbarbutton-down"},{name:"scrollbarbutton-left"},{name:"scrollbarbutton-right"},{name:"scrollbarbutton-up"},{name:"scrollbargripper-horizontal"},{name:"scrollbargripper-vertical"},{name:"scrollbarthumb-horizontal"},{name:"scrollbarthumb-vertical"},{name:"scrollbartrack-horizontal"},{name:"scrollbartrack-vertical"},{name:"searchfield"},{name:"searchfield-cancel-button"},{name:"searchfield-decoration"},{name:"searchfield-results-button"},{name:"searchfield-results-decoration"},{name:"slider-horizontal"},{name:"sliderthumb-horizontal"},{name:"sliderthumb-vertical"},{name:"slider-vertical"},{name:"square-button"},{name:"textarea"},{name:"textfield"}]},{name:"-webkit-backdrop-filter",desc:"Applies a filter effect where the first filter in the list takes the element's background image as the input image.",browsers:"S9",restriction:"enum, url",values:[{name:"none",desc:"No filter effects are applied."},{name:"blur()"},{name:"brightness()"},{name:"contrast()"},{name:"drop-shadow()"},{name:"grayscale()"},{name:"hue-rotate()"},{name:"invert()"},{name:"opacity()"},{name:"saturate()"},{name:"sepia()"},{name:"url()",desc:"A filter reference to a <filter> element."}]},{name:"-webkit-backface-visibility",desc:"Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",browsers:"C,S5",restriction:"enum",values:[{name:"hidden"},{name:"visible"}]},{name:"-webkit-background-clip",desc:"Determines the background painting area.",browsers:"C,S3",restriction:"box"},{name:"-webkit-background-composite",browsers:"C,S3",restriction:"enum",values:[{name:"border"},{name:"padding"}]},{name:"-webkit-background-origin",desc:"For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",browsers:"C,S3",restriction:"box"},{name:"-webkit-border-image",desc:"Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",browsers:"C,S5",restriction:"length, percentage, number, url, enum",values:[{name:"auto",desc:"If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."},{name:"fill",desc:"Causes the middle part of the border-image to be preserved."},{name:"none"},{name:"repeat"},{name:"round",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."},{name:"space",desc:"The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."},{name:"stretch",desc:"The image is stretched to fill the area."},{name:"url()"}]},{name:"-webkit-box-align",desc:"Specifies the alignment of nested elements within an outer flexible box element.",browsers:"C,S3",restriction:"enum",values:[{name:"baseline",desc:"If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used."},{name:"center",desc:"Any extra space is divided evenly, with half placed above the child and the other half placed after the child."},{name:"end",desc:"For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element."},{name:"start",desc:"For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element."},{name:"stretch",desc:"The height of each child is adjusted to that of the containing block."}]},{name:"-webkit-box-direction",desc:"In webkit applications, -webkit-box-direction specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",browsers:"C,S3",restriction:"enum",values:[{name:"normal",desc:"A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom."},{name:"reverse",desc:"A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top."}]},{name:"-webkit-box-flex",desc:"Specifies an element's flexibility.",browsers:"C,S3",restriction:"number"},{name:"-webkit-box-flex-group",desc:"Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",browsers:"C,S3",restriction:"integer"},{name:"-webkit-box-ordinal-group",desc:"Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",browsers:"C,S3",restriction:"integer"},{name:"-webkit-box-orient",desc:"In webkit applications, -webkit-box-orient specifies whether a box lays out its contents horizontally or vertically.",browsers:"C,S3",restriction:"enum",values:[{name:"block-axis"},{name:"horizontal",desc:"The box displays its children from left to right in a horizontal line."},{name:"inline-axis"},{name:"vertical",desc:"The box displays its children from stacked from top to bottom vertically."}]},{name:"-webkit-box-pack",desc:"Specifies alignment of child elements within the current element in the direction of orientation.",browsers:"C,S3",restriction:"enum",values:[{name:"center",desc:"The extra space is divided evenly, with half placed before the first child and the other half placed after the last child."},{name:"end",desc:"For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child."},{name:"justify",desc:"The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start."},{name:"start",desc:"For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child."}]},{name:"-webkit-box-reflect",desc:"Defines a reflection of a border box.",browsers:"C,S4",values:[{name:"above",desc:"The reflection appears above the border box."},{name:"below",desc:"The reflection appears below the border box."},{name:"left",desc:"The reflection appears to the left of the border box."},{name:"right",desc:"The reflection appears to the right of the border box."}]},{name:"-webkit-box-sizing",desc:"Box Model addition in CSS3.",browsers:"C,S3",restriction:"enum",values:[{name:"border-box"},{name:"content-box"}]},{name:"-webkit-break-after",desc:"Describes the page/column break behavior before the generated box.",browsers:"S7",restriction:"enum",values:[{name:"always",desc:"Always force a page break before/after the generated box."},{name:"auto",desc:"Neither force nor forbid a page/column break before/after the generated box."},{name:"avoid",desc:"Avoid a page/column break before/after the generated box."},{name:"avoid-column",desc:"Avoid a column break before/after the generated box."},{name:"avoid-page",desc:"Avoid a page break before/after the generated box."},{name:"avoid-region"},{name:"column",desc:"Always force a column break before/after the generated box."},{name:"left",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."},{name:"page",desc:"Always force a page break before/after the generated box."},{name:"region"},{name:"right",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."}]},{name:"-webkit-break-before",desc:"Describes the page/column break behavior before the generated box.",browsers:"S7",restriction:"enum",values:[{name:"always",desc:"Always force a page break before/after the generated box."},{name:"auto",desc:"Neither force nor forbid a page/column break before/after the generated box."},{name:"avoid",desc:"Avoid a page/column break before/after the generated box."},{name:"avoid-column",desc:"Avoid a column break before/after the generated box."},{name:"avoid-page",desc:"Avoid a page break before/after the generated box."},{name:"avoid-region"},{name:"column",desc:"Always force a column break before/after the generated box."},{name:"left",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."},{name:"page",desc:"Always force a page break before/after the generated box."},{name:"region"},{name:"right",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."}]},{name:"-webkit-break-inside",desc:"Describes the page/column break behavior inside the generated box.",browsers:"S7",restriction:"enum",values:[{name:"auto",desc:"Neither force nor forbid a page/column break inside the generated box."},{name:"avoid",desc:"Avoid a page/column break inside the generated box."},{name:"avoid-column",desc:"Avoid a column break inside the generated box."},{name:"avoid-page",desc:"Avoid a page break inside the generated box."},{name:"avoid-region"}]},{name:"-webkit-column-break-after",desc:"Describes the page/column break behavior before the generated box.",browsers:"C,S3",restriction:"enum",values:[{name:"always",desc:"Always force a page break before/after the generated box."},{name:"auto",desc:"Neither force nor forbid a page/column break before/after the generated box."},{name:"avoid",desc:"Avoid a page/column break before/after the generated box."},{name:"avoid-column",desc:"Avoid a column break before/after the generated box."},{name:"avoid-page",desc:"Avoid a page break before/after the generated box."},{name:"avoid-region"},{name:"column",desc:"Always force a column break before/after the generated box."},{name:"left",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."},{name:"page",desc:"Always force a page break before/after the generated box."},{name:"region"},{name:"right",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."}]},{name:"-webkit-column-break-before",desc:"Describes the page/column break behavior before the generated box.",browsers:"C,S3",restriction:"enum",values:[{name:"always",desc:"Always force a page break before/after the generated box."},{name:"auto",desc:"Neither force nor forbid a page/column break before/after the generated box."},{name:"avoid",desc:"Avoid a page/column break before/after the generated box."},{name:"avoid-column",desc:"Avoid a column break before/after the generated box."},{name:"avoid-page",desc:"Avoid a page break before/after the generated box."},{name:"avoid-region"},{name:"column",desc:"Always force a column break before/after the generated box."},{name:"left",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."},{name:"page",desc:"Always force a page break before/after the generated box."},{name:"region"},{name:"right",desc:"Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."}]},{name:"-webkit-column-break-inside",desc:"Describes the page/column break behavior inside the generated box.",browsers:"C,S3",restriction:"enum",values:[{name:"auto",desc:"Neither force nor forbid a page/column break inside the generated box."},{name:"avoid",desc:"Avoid a page/column break inside the generated box."},{name:"avoid-column",desc:"Avoid a column break inside the generated box."},{name:"avoid-page",desc:"Avoid a page break inside the generated box."},{name:"avoid-region"}]},{name:"-webkit-column-count",desc:"Describes the optimal number of columns into which the content of the element will be flowed.",browsers:"C,S3",restriction:"integer",values:[{name:"auto",desc:"Determines the number of columns by the 'column-width' property and the element width."}]},{name:"-webkit-column-gap",desc:"Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",browsers:"C,S3",restriction:"length",values:[{name:"normal",desc:"User agent specific and typically equivalent to 1em."}]},{name:"-webkit-column-rule",desc:"This property is a shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",browsers:"C,S3",restriction:"length, line-width, line-style, color"},{name:"-webkit-column-rule-color",desc:"Sets the color of the column rule",browsers:"C,S3",restriction:"color"},{name:"-webkit-column-rule-style",desc:"Sets the style of the rule between columns of an element.",browsers:"C,S3",restriction:"line-style"},{name:"-webkit-column-rule-width",desc:"Sets the width of the rule between columns. Negative values are not allowed.",browsers:"C,S3",restriction:"length, line-width"},{name:"-webkit-columns",desc:"A shorthand property which sets both 'column-width' and 'column-count'.",browsers:"C,S3",restriction:"length, integer",values:[{name:"auto",desc:"The width depends on the values of other properties."}]},{name:"-webkit-column-span",desc:"Describes the page/column break behavior after the generated box.",browsers:"C,S3",restriction:"enum",values:[{name:"all",desc:"The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear."},{name:"none",desc:"The element does not span multiple columns."}]},{name:"-webkit-column-width",desc:"This property describes the width of columns in multicol elements.",browsers:"C,S3",restriction:"length",values:[{name:"auto",desc:"The width depends on the values of other properties."}]},{name:"-webkit-filter",desc:"Processes an element’s rendering before it is displayed in the document, by applying one or more filter effects.",browsers:"C18,O15,S6",restriction:"enum, url",values:[{name:"none",desc:"No filter effects are applied."},{name:"blur()"},{name:"brightness()"},{name:"contrast()"},{name:"drop-shadow()"},{name:"grayscale()"},{name:"hue-rotate()"},{name:"invert()"},{name:"opacity()"},{name:"saturate()"},{name:"sepia()"},{name:"url()",desc:"A filter reference to a <filter> element."}]},{name:"-webkit-flow-from",desc:"Makes a block container a region and associates it with a named flow.",browsers:"S6.1",restriction:"identifier",values:[{name:"none",desc:"The block container is not a CSS Region."}]},{name:"-webkit-flow-into",desc:"Places an element or its contents into a named flow.",browsers:"S6.1",restriction:"identifier",values:[{name:"none",desc:"The element is not moved to a named flow and normal CSS processing takes place."}]},{name:"-webkit-font-feature-settings",desc:"This property provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",browsers:"C16",restriction:"string, integer",values:[{name:'"c2cs"'},{name:'"dlig"'},{name:'"kern"'},{name:'"liga"'},{name:'"lnum"'},{name:'"onum"'},{name:'"smcp"'},{name:'"swsh"'},{name:'"tnum"'},{name:"normal",desc:"No change in glyph substitution or positioning occurs."},{name:"off"},{name:"on"}]},{name:"-webkit-hyphens",desc:"Controls whether hyphenation is allowed to create more break opportunities within a line of text.",browsers:"S5.1",restriction:"enum",values:[{name:"auto",desc:"Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."},{name:"manual"},{name:"none",desc:"Words are not broken at line breaks, even if characters inside the word suggest line break points."}]},{name:"-webkit-line-break",desc:"Specifies line-breaking rules for CJK (Chinese, Japanese, and Korean) text.",browsers:"C,S3",values:[{name:"after-white-space"},{name:"normal"}]},{name:"-webkit-margin-bottom-collapse",browsers:"C,S3",restriction:"enum",values:[{name:"collapse"},{name:"discard"},{name:"separate"}]},{name:"-webkit-margin-collapse",browsers:"C,S3",restriction:"enum",values:[{name:"collapse"},{name:"discard"},{name:"separate"}]},{name:"-webkit-margin-start",browsers:"C,S3",restriction:"percentage, length",values:[{name:"auto"}]},{name:"-webkit-margin-top-collapse",browsers:"C,S3",restriction:"enum",values:[{name:"collapse"},{name:"discard"},{name:"separate"}]},{name:"-webkit-mask-clip",desc:"Determines the mask painting area, which determines the area that is affected by the mask.",browsers:"C,O15,S4",restriction:"box"},{name:"-webkit-mask-image",desc:"Sets the mask layer image of an element.",browsers:"C,O15,S4",restriction:"url, image, enum",values:[{name:"none",desc:"Counts as a transparent black image layer."},{name:"url()",desc:"Reference to a <mask element or to a CSS image."}]},{name:"-webkit-mask-origin",desc:"Specifies the mask positioning area.",browsers:"C,O15,S4",restriction:"box"},{name:"-webkit-mask-repeat",desc:"Specifies how mask layer images are tiled after they have been sized and positioned.",browsers:"C,O15,S4",restriction:"repeat"},{name:"-webkit-mask-size",desc:"Specifies the size of the mask layer images.",browsers:"C,O15,S4",restriction:"length, percentage, enum",values:[{name:"auto",desc:"Resolved by using the image’s intrinsic ratio and the size of the other dimension, or failing that, using the image’s intrinsic size, or failing that, treating it as 100%."},{name:"contain",desc:"Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."},{name:"cover",desc:"Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."}]},{name:"-webkit-nbsp-mode",desc:"Defines the behavior of nonbreaking spaces within text.",browsers:"C,S3",values:[{name:"normal"},{name:"space"}]},{name:"-webkit-overflow-scrolling",desc:"Specifies whether to use native-style scrolling in an overflow:scroll element.",browsers:"C,S5",values:[{name:"auto"},{name:"touch"}]},{name:"-webkit-padding-start",browsers:"C,S3",restriction:"percentage, length"},{name:"-webkit-perspective",desc:"Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",browsers:"C,S4",restriction:"length",values:[{name:"none",desc:"No perspective transform is applied."}]},{name:"-webkit-perspective-origin",desc:"Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",browsers:"C,S4",restriction:"position, percentage, length"},{name:"-webkit-region-fragment",desc:"The 'region-fragment' property controls the behavior of the last region associated with a named flow.",browsers:"S7",restriction:"enum",values:[{name:"auto",desc:"Content flows as it would in a regular content box."},{name:"break"}]},{name:"-webkit-tap-highlight-color",browsers:"E,C,S3.1",restriction:"color"},{name:"-webkit-text-fill-color",browsers:"E,C,S3",restriction:"color"},{name:"-webkit-text-size-adjust",desc:"Specifies a size adjustment for displaying text content in mobile browsers.",browsers:"E,C,S3",restriction:"percentage",values:[{name:"auto",desc:"Renderers must use the default size adjustment when displaying on a small device."},{name:"none",desc:"Renderers must not do size adjustment when displaying on a small device."}]},{name:"-webkit-text-stroke",browsers:"S3",restriction:"length, line-width, color, percentage"},{name:"-webkit-text-stroke-color",browsers:"S3",restriction:"color"},{name:"-webkit-text-stroke-width",browsers:"S3",restriction:"length, line-width, percentage"},{name:"-webkit-touch-callout",browsers:"S3",restriction:"enum",values:[{name:"none"}]},{name:"-webkit-transform",desc:"A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",browsers:"C,O12,S3.1",restriction:"enum",values:[{name:"matrix()"},{name:"matrix3d()"},{name:"none"},{name:"perspective()"},{name:"rotate()"},{name:"rotate3d()"},{name:"rotateX('angle')"},{name:"rotateY('angle')"},{name:"rotateZ('angle')"},{name:"scale()"},{name:"scale3d()"},{name:"scaleX()"},{name:"scaleY()"},{name:"scaleZ()"},{name:"skew()"},{name:"skewX()"},{name:"skewY()"},{name:"translate()"},{name:"translate3d()"},{name:"translateX()"},{name:"translateY()"},{name:"translateZ()"}]},{name:"-webkit-transform-origin",desc:"Establishes the origin of transformation for an element.",browsers:"C,O15,S3.1",restriction:"position, length, percentage"},{name:"-webkit-transform-origin-x",desc:"The x coordinate of the origin for transforms applied to an element with respect to its border box.",browsers:"C,S3.1",restriction:"length, percentage"},{name:"-webkit-transform-origin-y",desc:"The y coordinate of the origin for transforms applied to an element with respect to its border box.",browsers:"C,S3.1",restriction:"length, percentage"},{name:"-webkit-transform-origin-z",desc:"The z coordinate of the origin for transforms applied to an element with respect to its border box.",browsers:"C,S4",restriction:"length, percentage"},{name:"-webkit-transform-style",desc:"Defines how nested elements are rendered in 3D space.",browsers:"C,S4",restriction:"enum",values:[{name:"flat"}]},{name:"-webkit-transition",desc:"Shorthand property combines four of the transition properties into a single property.",browsers:"C,O12,S5",restriction:"time, property, timing-function, enum",values:[{name:"all",desc:"Every property that is able to undergo a transition will do so."},{name:"none",desc:"No property will transition."}]},{name:"-webkit-transition-delay",desc:"Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",browsers:"C,O12,S5",restriction:"time"},{name:"-webkit-transition-duration",desc:"Specifies how long the transition from the old value to the new value should take.",browsers:"C,O12,S5",restriction:"time"},{name:"-webkit-transition-property",desc:"Specifies the name of the CSS property to which the transition is applied.",browsers:"C,O12,S5",restriction:"property",values:[{name:"all",desc:"Every property that is able to undergo a transition will do so."},{name:"none",desc:"No property will transition."}]},{name:"-webkit-transition-timing-function",desc:"Describes how the intermediate values used during a transition will be calculated.",browsers:"C,O12,S5",restriction:"timing-function"},{name:"-webkit-user-drag",browsers:"S3",restriction:"enum",values:[{name:"auto"},{name:"element"},{name:"none"}]},{name:"-webkit-user-modify",desc:"Determines whether a user can edit the content of an element.",browsers:"C,S3",restriction:"enum",values:[{name:"read-only"},{name:"read-write"},{name:"read-write-plaintext-only"}]},{name:"-webkit-user-select",desc:"Controls the appearance of selection.",browsers:"C,S3",restriction:"enum",values:[{name:"auto"},{name:"none"},{name:"text"}]},{name:"white-space",desc:"Shorthand property for the 'white-space-collapsing' and 'text-wrap' properties.",restriction:"enum",values:[{name:"normal",desc:"Sets 'white-space-collapsing' to 'collapse' and 'text-wrap' to 'normal'."},{name:"nowrap",desc:"Sets 'white-space-collapsing' to 'collapse' and 'text-wrap' to 'none'."},{name:"pre"},{name:"pre-line"},{name:"pre-wrap"}]},{name:"widows",desc:"Specifies the minimum number of line boxes of a block container that must be left in a fragment after a break.",browsers:"C,IE8,O9.5,S1",restriction:"integer"},{name:"width",desc:"Specifies the width of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",restriction:"length, percentage",values:[{name:"auto",desc:"The width depends on the values of other properties."},{name:"fit-content",browsers:"C46,O33"},{name:"max-content",desc:"Use the max-content inline size or max-content block size, as appropriate to the writing mode.",browsers:"C46,O33"},{name:"min-content",desc:"Use the min-content inline size or min-content block size, as appropriate to the writing mode.",browsers:"C46,O33"}]},{name:"will-change",desc:"Provides a rendering hint to the user agent, stating what kinds of changes the author expects to perform on the element.",browsers:"C36,FF36,O24",restriction:"enum, identifier",values:[{name:"auto",desc:"Expresses no particular intent."},{name:"contents",desc:"Indicates that the author expects to animate or change something about the element’s contents in the near future."},{name:"scroll-position"}]},{name:"word-break",desc:"Specifies line break opportunities for non-CJK scripts.",browsers:"E,C,FF15,IE5,S3",restriction:"enum",values:[{name:"break-all"},{name:"keep-all",desc:"Block characters can no longer create implied break points."},{name:"normal",desc:"Breaks non-CJK scripts according to their own rules."}]},{name:"word-spacing",desc:"Specifies additional spacing between “words”.",restriction:"length, percentage",values:[{name:"normal",desc:"No additional spacing is applied. Computes to zero."}]},{name:"word-wrap",desc:"Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",restriction:"enum",values:[{name:"break-word",desc:"An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."},{name:"normal",desc:"Lines may break only at allowed break points."}]},{name:"writing-mode",desc:"This is a shorthand property for both 'direction' and 'block-progression'.",browsers:"E,FF41",restriction:"enum",values:[{name:"horizontal-tb"},{name:"sideways-lr",browsers:"FF43"},{name:"sideways-rl",browsers:"FF43"},{name:"vertical-lr"},{name:"vertical-rl"}]},{name:"z-index",desc:"For a positioned box, the 'z-index' property specifies the stack level of the box in the current stacking context and whether the box establishes a local stacking context.",restriction:"integer",values:[{name:"auto",desc:"The stack level of the generated box in the current stacking context is 0. The box does not establish a new stacking context unless it is the root element."}]},{name:"zoom",desc:"Non-standard. Specifies the magnification scale of the object. See 'transform: scale()' for a standards-based alternative.",browsers:"E,C,IE6,O15,S4",restriction:"enum, integer, number, percentage",values:[{name:"normal"}]}]},Vi={100:"Thin",200:"Extra Light (Ultra Light)",300:"Light",400:"Normal",500:"Medium",600:"Semi Bold (Demi Bold)",700:"Bold",800:"Extra Bold (Ultra Bold)",900:"Black (Heavy)","self-end":"The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis.","self-start":"The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis..",alternate:"The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.","alternate-reverse":"The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",backwards:"The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'.",forwards:"The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes.",paused:"A running animation will be paused.",running:"Resume playback of a paused animation.",multiply:"The source color is multiplied by the destination color and replaces the destination.",screen:"Multiplies the complements of the backdrop and source color values, then complements the result.",overlay:"Multiplies or screens the colors, depending on the backdrop color value.",darken:"Selects the darker of the backdrop and source colors.",lighten:"Selects the lighter of the backdrop and source colors.","color-dodge":"Brightens the backdrop color to reflect the source color.","color-burn":"Darkens the backdrop color to reflect the source color.","hard-light":"Multiplies or screens the colors, depending on the source color value.","soft-light":"Darkens or lightens the colors, depending on the source color value.",difference:"Subtracts the darker of the two constituent colors from the lighter color..",exclusion:"Produces an effect similar to that of the Difference mode but lower in contrast.",hue:"Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color.",saturation:"Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color.",color:"Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color.",luminosity:"Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color.",repeat:"The image is tiled (repeated) to fill the area.",clone:"Each box is independently wrapped with the border and padding.",slice:"The effect is as though the element were rendered with no breaks present, and then sliced by the breaks afterward.",inset:"Changes the drop shadow from an outer shadow (one that shadows the box onto the canvas, as if it were lifted above the canvas) to an inner shadow (one that shadows the canvas onto the box, as if the box were cut out of the canvas and shifted behind it).","border-box":"The specified width and height (and respective min/max properties) on this element determine the border box of the element.","content-box":"Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element.","rect()":"Specifies offsets from the edges of the border box.",evenodd:"Determines the ‘insideness’ of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses.",nonzero:"Determines the ‘insideness’ of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray.",linearRGB:"Color operations should occur in the linearized RGB color space.",sRGB:"Color operations should occur in the sRGB color space.",balance:"Balance content equally between columns, if possible.",size:"For properties that can have effects on more than just an element and its descendants, those effects don't escape the containing element.",layout:"Turns on layout containment for the element.",paint:"Turns on paint containment for the element.","attr()":"The attr(n) function returns as a string the value of attribute n for the subject of the selector.","counter(name)":"Counters are denoted by identifiers (see the 'counter-increment' and 'counter-reset' properties).",alias:"Indicates an alias of/shortcut to something is to be created. Often rendered as an arrow with a small curved arrow next to it.","all-scroll":"Indicates that the something can be scrolled in any direction. Often rendered as arrows pointing up, down, left, and right with a dot in the middle.",cell:"Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle.","col-resize":"Indicates that the item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.","context-menu":"A context menu is available for the object under the cursor. Often rendered as an arrow with a small menu-like graphic next to it.",copy:"Indicates something is to be copied. Often rendered as an arrow with a small plus sign next to it.",crosshair:"A simple crosshair (e.g., short line segments resembling a '+' sign). Often used to indicate a two dimensional bitmap selection mode.","e-resize":"Indicates that east edge is to be moved.","ew-resize":"Indicates a bidirectional east-west resize cursor.",grab:"Indicates that something can be grabbed.",grabbing:"Indicates that something is being grabbed.",help:"Help is available for the object under the cursor. Often rendered as a question mark or a balloon.",move:"Indicates something is to be moved.","-moz-grab":"Indicates that something can be grabbed.","-moz-grabbing":"Indicates that something is being grabbed.","-moz-zoom-in":"Indicates that something can be zoomed (magnified) in.","-moz-zoom-out":"Indicates that something can be zoomed (magnified) out.","ne-resize":"Indicates that movement starts from north-east corner.","nesw-resize":"Indicates a bidirectional north-east/south-west cursor.","no-drop":"Indicates that the dragged item cannot be dropped at the current cursor location. Often rendered as a hand or pointer with a small circle with a line through it.","not-allowed":"Indicates that the requested action will not be carried out. Often rendered as a circle with a line through it.","n-resize":"Indicates that north edge is to be moved.","ns-resize":"Indicates a bidirectional north-south cursor.","nw-resize":"Indicates that movement starts from north-west corner.","nwse-resize":"Indicates a bidirectional north-west/south-east cursor.",pointer:"The cursor is a pointer that indicates a link.",progress:"A progress indicator. The program is performing some processing, but is different from 'wait' in that the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.","row-resize":"Indicates that the item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.","se-resize":"Indicates that movement starts from south-east corner.","s-resize":"Indicates that south edge is to be moved.","sw-resize":"Indicates that movement starts from south-west corner.","vertical-text":"Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam.",wait:"Indicates that the program is busy and the user should wait. Often rendered as a watch or hourglass.","-webkit-grab":"Indicates that something can be grabbed.","-webkit-grabbing":"Indicates that something is being grabbed.","-webkit-zoom-in":"Indicates that something can be zoomed (magnified) in.","-webkit-zoom-out":"Indicates that something can be zoomed (magnified) out.","w-resize":"Indicates that west edge is to be moved.","zoom-in":"Indicates that something can be zoomed (magnified) in.","zoom-out":"Indicates that something can be zoomed (magnified) out.",ltr:"Left-to-right direction.",rtl:"Right-to-left direction.",block:"The element generates a block-level box",flex:"The element generates a principal flex container box and establishes a flex formatting context.",flexbox:"The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'.","flow-root":"The element generates a block container box, and lays out its contents using flow layout.",grid:"The element generates a principal grid container box, and establishes a grid formatting context.","inline-block":"A block box, which itself is flowed as a single inline box, similar to a replaced element. The inside of an inline-block is formatted as a block box, and the box itself is formatted as an inline box.","inline-flex":"Inline-level flex container.","inline-flexbox":"Inline-level flex container. Standardized as 'inline-flex'","inline-table":"Inline-level table wrapper box containing table box.","list-item":"One or more block boxes and one marker box.","-moz-box":"The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'.","-moz-inline-box":"Inline-level flex container. Standardized as 'inline-flex'","-ms-flexbox":"The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'.","-ms-grid":"The element generates a principal grid container box, and establishes a grid formatting context.","-ms-inline-flexbox":"Inline-level flex container. Standardized as 'inline-flex'","-ms-inline-grid":"Inline-level grid container.","run-in":"The element generates a run-in box. Run-in elements act like inlines or blocks, depending on the surrounding elements.",table:"The element generates a principal table wrapper box containing an additionally-generated table box, and establishes a table formatting context.","-webkit-box":"The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'.","-webkit-flex":"The element lays out its contents using flow layout (block-and-inline layout).","-webkit-inline-box":"Inline-level flex container. Standardized as 'inline-flex'","-webkit-inline-flex":"Inline-level flex container.",hide:"No borders or backgrounds are drawn around/behind empty cells.",show:"Borders and backgrounds are drawn around/behind empty cells (like normal cells).",accumulate:"If the ancestor container element has a property of new, then all graphics elements within the current container are rendered both on the parent's background image and onto the target.",new:"Create a new background image canvas. All children of the current container element can access the background, and they will be rendered onto both the parent's background image canvas in addition to the target device.","blur()":"Applies a Gaussian blur to the input image.","brightness()":"Applies a linear multiplier to input image, making it appear more or less bright.","contrast()":"Adjusts the contrast of the input.","drop-shadow()":"Applies a drop shadow effect to the input image.","grayscale()":"Converts the input image to grayscale.","hue-rotate()":"Applies a hue rotation on the input image. ","invert()":"Inverts the samples in the input image.","opacity()":"Applies transparency to the samples in the input image.","saturate()":"Saturates the input image.","sepia()":"Converts the input image to sepia.","column-reverse":"Same as 'column', except the main-start and main-end directions are swapped.","row-reverse":"Same as 'row', except the main-start and main-end directions are swapped.","wrap-reverse":"Same as 'wrap', except the cross-start and cross-end directions are swapped.","inline-end":"A keyword indicating that the element must float on the end side of its containing block. That is the right side with ltr scripts, and the left side with rtl scripts.","inline-start":"A keyword indicating that the element must float on the start side of its containing block. That is the left side with ltr scripts, and the right side with rtl scripts.",bold:"Same as 700",bolder:"Specifies the weight of the face bolder than the inherited value.",caption:"The font used for captioned controls (e.g., buttons, drop-downs, etc.).",lighter:"Specifies the weight of the face lighter than the inherited value.",menu:"The font used in menus (e.g., dropdown menus and menu lists).","message-box":"The font used in dialog boxes.","small-caption":"The font used for labeling small controls.","status-bar":"The font used in window status bars.",'"aalt"':"Access All Alternates.",'"abvf"':"Above-base Forms. Required in Khmer script.",'"abvm"':"Above-base Mark Positioning. Required in Indic scripts.",'"abvs"':"Above-base Substitutions. Required in Indic scripts.",'"afrc"':"Alternative Fractions.",'"akhn"':"Akhand. Required in most Indic scripts.",'"blwf"':"Below-base Form. Required in a number of Indic scripts.",'"blwm"':"Below-base Mark Positioning. Required in Indic scripts.",'"blws"':"Below-base Substitutions. Required in Indic scripts.",'"calt"':"Contextual Alternates.",'"case"':"Case-Sensitive Forms. Applies only to European scripts; particularly prominent in Spanish-language setting.",'"ccmp"':"Glyph Composition/Decomposition.",'"cfar"':"Conjunct Form After Ro. Required in Khmer scripts.",'"cjct"':"Conjunct Forms. Required in Indic scripts that show similarity to Devanagari.",'"clig"':"Contextual Ligatures.",'"cpct"':"Centered CJK Punctuation. Used primarily in Chinese fonts.",'"cpsp"':"Capital Spacing. Should not be used in connecting scripts (e.g. most Arabic).",'"cswh"':"Contextual Swash.",'"curs"':"Cursive Positioning. Can be used in any cursive script.",'"c2pc"':"Petite Capitals From Capitals. Applies only to bicameral scripts.",'"dist"':"Distances. Required in Indic scripts.",'"dnom"':"Denominators.",'"dtls"':"Dotless Forms. Applied to math formula layout.",'"expt"':"Expert Forms. Applies only to Japanese.",'"falt"':"Final Glyph on Line Alternates. Can be used in any cursive script.",'"fin2"':"Terminal Form #2. Used only with the Syriac script.",'"fin3"':"Terminal Form #3. Used only with the Syriac script.",'"fina"':"Terminal Forms. Can be used in any alphabetic script.",'"flac"':"Flattened ascent forms. Applied to math formula layout.",'"frac"':"Fractions.",'"fwid"':"Full Widths. Applies to any script which can use monospaced forms.",'"half"':"Half Forms. Required in Indic scripts that show similarity to Devanagari.",'"haln"':"Halant Forms. Required in Indic scripts.",'"halt"':"Alternate Half Widths. Used only in CJKV fonts.",'"hist"':"Historical Forms.",'"hkna"':"Horizontal Kana Alternates. Applies only to fonts that support kana (hiragana and katakana).",'"hlig"':"Historical Ligatures.",'"hngl"':"Hangul. Korean only.",'"hojo"':"Hojo Kanji Forms (JIS X 0212-1990 Kanji Forms). Used only with Kanji script.",'"hwid"':"Half Widths. Generally used only in CJKV fonts.",'"init"':"Initial Forms. Can be used in any alphabetic script.",'"isol"':"Isolated Forms. Can be used in any cursive script.",'"ital"':"Italics. Applies mostly to Latin; note that many non-Latin fonts contain Latin as well.",'"jalt"':"Justification Alternates. Can be used in any cursive script.",'"jp78"':"JIS78 Forms. Applies only to Japanese.",'"jp83"':"JIS83 Forms. Applies only to Japanese.",'"jp90"':"JIS90 Forms. Applies only to Japanese.",'"jp04"':"JIS2004 Forms. Applies only to Japanese.",'"lfbd"':"Left Bounds.",'"ljmo"':"Leading Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported.",'"locl"':"Localized Forms.",'"ltra"':"Left-to-right glyph alternates.",'"ltrm"':"Left-to-right mirrored forms.",'"mark"':"Mark Positioning.",'"med2"':"Medial Form #2. Used only with the Syriac script.",'"medi"':"Medial Forms.",'"mgrk"':"Mathematical Greek.",'"mkmk"':"Mark to Mark Positioning.",'"nalt"':"Alternate Annotation Forms.",'"nlck"':"NLC Kanji Forms. Used only with Kanji script.",'"nukt"':"Nukta Forms. Required in Indic scripts..",'"numr"':"Numerators.",'"opbd"':"Optical Bounds.",'"ordn"':"Ordinals. Applies mostly to Latin script.",'"ornm"':"Ornaments.",'"palt"':"Proportional Alternate Widths. Used mostly in CJKV fonts.",'"pcap"':"Petite Capitals.",'"pkna"':"Proportional Kana. Generally used only in Japanese fonts.",'"pnum"':"Proportional Figures.",'"pref"':"Pre-base Forms. Required in Khmer and Myanmar (Burmese) scripts and southern Indic scripts that may display a pre-base form of Ra.",'"pres"':"Pre-base Substitutions. Required in Indic scripts.",'"pstf"':"Post-base Forms. Required in scripts of south and southeast Asia that have post-base forms for consonants eg: Gurmukhi, Malayalam, Khmer.",'"psts"':"Post-base Substitutions.",'"pwid"':"Proportional Widths.",'"qwid"':"Quarter Widths. Generally used only in CJKV fonts.",'"rand"':"Randomize.",'"rclt"':"Required Contextual Alternates. May apply to any script, but is especially important for many styles of Arabic.",'"rlig"':"Required Ligatures. Applies to Arabic and Syriac. May apply to some other scripts.",'"rkrf"':"Rakar Forms. Required in Devanagari and Gujarati scripts.",'"rphf"':"Reph Form. Required in Indic scripts. E.g. Devanagari, Kannada.",'"rtbd"':"Right Bounds.",'"rtla"':"Right-to-left alternates.",'"rtlm"':"Right-to-left mirrored forms.",'"ruby"':"Ruby Notation Forms. Applies only to Japanese.",'"salt"':"Stylistic Alternates.",'"sinf"':"Scientific Inferiors.",'"size"':"Optical size.",'"smpl"':"Simplified Forms. Applies only to Chinese and Japanese.",'"ssty"':"Math script style alternates.",'"stch"':"Stretching Glyph Decomposition.",'"subs"':"Subscript.",'"sups"':"Superscript.",'"titl"':"Titling.",'"tjmo"':"Trailing Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported.",'"tnam"':"Traditional Name Forms. Applies only to Japanese.",'"trad"':"Traditional Forms. Applies only to Chinese and Japanese.",'"twid"':"Third Widths. Generally used only in CJKV fonts.",'"unic"':"Unicase.",'"valt"':"Alternate Vertical Metrics. Applies only to scripts with vertical writing modes.",'"vatu"':"Vattu Variants. Used for Indic scripts. E.g. Devanagari.",'"vert"':"Vertical Alternates. Applies only to scripts with vertical writing modes.",'"vhal"':"Alternate Vertical Half Metrics. Used only in CJKV fonts.",'"vjmo"':"Vowel Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported.",'"vkna"':"Vertical Kana Alternates. Applies only to fonts that support kana (hiragana and katakana).",'"vkrn"':"Vertical Kerning.",'"vpal"':"Proportional Alternate Vertical Metrics. Used mostly in CJKV fonts.",'"vrt2"':"Vertical Alternates and Rotation. Applies only to scripts with vertical writing modes.",'"zero"':"Slashed Zero.",narrower:"Indicates a narrower value relative to the width of the parent element.",wider:"Indicates a wider value relative to the width of the parent element.",weight:"Allow synthetic bold faces.","annotation()":"Enables display of alternate annotation forms.","character-variant()":"Enables display of specific character variants.","historical-forms":"Enables display of historical forms.","ornaments()":"Enables replacement of default glyphs with ornaments, if provided in the font.","styleset()":"Enables display with stylistic sets.","stylistic()":"Enables display of stylistic alternates.","swash()":"Enables display of swash glyphs.","all-petite-caps":"Enables display of petite capitals for both upper and lowercase letters.","all-small-caps":"Enables display of small capitals for both upper and lowercase letters.","petite-caps":"Enables display of petite capitals.","titling-caps":"Enables display of titling capitals.",unicase:"Enables display of mixture of small capitals for uppercase letters with normal lowercase letters.","full-width":"Enables rendering of full-width variants.",jis04:"Enables rendering of JIS04 forms.",jis78:"Enables rendering of JIS78 forms.",jis83:"Enables rendering of JIS83 forms.",jis90:"Enables rendering of JIS90 forms.","proportional-width":"Enables rendering of proportionally-spaced variants.",simplified:"Enables rendering of simplified forms.",traditional:"Enables rendering of traditional forms.","additional-ligatures":"Enables display of additional ligatures.","common-ligatures":"Enables display of common ligatures.",contextual:"Enables display of contextual alternates.","discretionary-ligatures":"Enables display of discretionary ligatures.","historical-ligatures":"Enables display of historical ligatures.","no-additional-ligatures":"Disables display of additional ligatures.","no-common-ligatures":"Disables display of common ligatures.","no-contextual":"Disables display of contextual alternates.","no-discretionary-ligatures":"Disables display of discretionary ligatures.","no-historical-ligatures":"Disables display of historical ligatures.","diagonal-fractions":"Enables display of lining diagonal fractions.","lining-nums":"Enables display of lining numerals.","oldstyle-nums":"Enables display of old-style numerals.",ordinal:"Enables display of letter forms used with ordinal numbers.","proportional-nums":"Enables display of proportional numerals.","slashed-zero":"Enables display of slashed zeros.","stacked-fractions":"Enables display of lining stacked fractions.","tabular-nums":"Enables display of tabular numerals.",span:"Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge.","minmax()":"Defines a size range greater than or equal to min and less than or equal to max.",dense:"If specified, the auto-placement algorithm uses a “dense” packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later.","fit-content":"Use the fit-content inline size or fit-content block size, as appropriate to the writing mode.",manual:"Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities",flip:"After rotating by the precededing angle, the image is flipped horizontally. Defaults to 0deg if the angle is ommitted.","from-image":"If the image has an orientation specified in its metadata, such as EXIF, this value computes to the angle that the metadata specifies is necessary to correctly orient the image.","crisp-edges":"The image must be scaled with an algorithm that preserves contrast and edges in the image, and which does not smooth colors or introduce blur to the image in the process.",optimizeQuality:"Deprecated.",pixelated:"When scaling the image up, the 'nearest neighbor' or similar algorithm must be used, so that the image appears to be simply composed of very large pixels.",active:"The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it.",disabled:"The input method editor is disabled and may not be activated by the user.",inactive:"The input method editor is initially inactive, but the user may activate it if they wish.",safe:"If the size of the item overflows the alignment container, the item is instead aligned as if the alignment mode were start.",unsafe:"Regardless of the relative sizes of the item and alignment container, the given alignment value is honored.","space-evenly":"The items are evenly distributed within the alignment container along the main axis.",circle:"A hollow circle.",disc:"A filled circle.",inside:"The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below.",outside:"The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element's content flows.","symbols()":"Allows a counter style to be defined inline.","path()":"Defines an SVG path as a string, with optional 'fill-rule' as the first argument.","block-axis":"Elements are oriented along the box's axis.","inline-axis":"Elements are oriented vertically.","padding-box":"The specified width and height (and respective min/max properties) on this element determine the padding box of the element.","line-through":"Each line of text has a line through the middle.",overline:"Each line of text has a line above it.",underline:"Each line of text is underlined.",dashed:"Produces a dashed line style.",dotted:"Produces a dotted line.",double:"Produces a double line.",solid:"Produces a solid line.",wavy:"Produces a wavy line.","matrix()":"Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]","matrix3d()":"Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order.",perspective:"Specifies a perspective projection matrix.","rotate()":"Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property.","rotate3d()":"Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters.","rotateX('angle')":"Specifies a clockwise rotation by the given angle about the X axis.","rotateY('angle')":"Specifies a clockwise rotation by the given angle about the Y axis.","rotateZ('angle')":"Specifies a clockwise rotation by the given angle about the Z axis.","scale()":"Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first.","scale3d()":"Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters.","scaleX()":"Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter.","scaleY()":"Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter.","scaleZ()":"Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter.","skew()":"Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis).","skewX()":"Specifies a skew transformation along the X axis by the given angle.","skewY()":"Specifies a skew transformation along the Y axis by the given angle.","translate()":"Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter.","translate3d()":"Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively.","translateX()":"Specifies a translation by the given amount in the X direction.","translateY()":"Specifies a translation by the given amount in the Y direction.","translateZ()":"Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0.",false:"The element does not contain an accelerator key sequence.",true:"The element contains an accelerator key sequence.",bt:"Bottom-to-top block flow. Layout is horizontal.",lr:"Left-to-right direction. The flow orientation is vertical.",rl:"Right-to-left direction. The flow orientation is vertical.",tb:"Top-to-bottom direction. The flow orientation is horizontal.",zoom:"The element is zoomable.","no-limit":"There is no limit.",mode:"Any of the range of mode values available to the -ms-layout-grid-mode property.",type:"Any of the range of type values available to the -ms-layout-grid-type property.","-ms-autohiding-scrollbar":"Indicates the element displays auto-hiding scrollbars during mouse interactions and panning indicators during touch and keyboard interactions.",scrollbar:'Scrollbars are typically narrow strips inserted on one or two edges of an element and which often have arrows to click on and a "thumb" to drag up and down (or left and right) to move the contents of the element.',"ideograph-alpha":"Creates 1/4em extra spacing between runs of ideographic letters and non-ideographic letters, such as Latin-based, Cyrillic, Greek, Arabic or Hebrew.","ideograph-numeric":"Creates 1/4em extra spacing between runs of ideographic letters and numeric glyphs.","ideograph-parenthesis":"Creates extra spacing between normal (non wide) parenthesis and ideographs.","ideograph-space":"Extends the width of the space character while surrounded by ideographs.",punctuation:"Creates extra non-breaking spacing around punctuation as required by language-specific typographic conventions.",digits:"Attempt to typeset horizontally each maximal sequence of consecutive ASCII digits (U+0030–U+0039) that has as many or fewer characters than the specified integer such that it takes up the space of a single character within the vertical line box.","inter-cluster":"Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai.","inter-ideograph":"Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages.","inter-word":"Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean.",kashida:"Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation.",clip:"Clip inline content that overflows. Characters may be only partially rendered.",ellipsis:"Render an ellipsis character (U+2026) to represent clipped inline content.",over:"The underline is aligned with the 'top' (right in vertical writing) edge of the element's em-box. In this mode, an overline also switches sides.",under:"The underline is aligned with the 'bottom' (left in vertical writing) edge of the element's em-box. In this case the underline usually does not cross the descenders. This is sometimes called 'accounting' underline.",grippers:"Grippers are always on.","break-all":"Lines may break between any two grapheme clusters for non-CJK scripts.",clear:"Inline flow content can only wrap on top and bottom of the exclusion and must leave the areas to the start and end edges of the exclusion box empty.",maximum:"Inline flow content can wrap on the side of the exclusion with the largest available space for the given line, and must leave the other side of the exclusion empty.",minimum:"Inline flow content can flow around the edge of the exclusion with the smallest available space within the flow content’s containing block, and must leave the other edge of the exclusion empty.",current:"Indicates that the user agent should target the frame that the element is in.",root:"Indicates that the user agent should target the full window.","scale-down":"Size the content as if ‘none’ or ‘contain’ were specified, whichever would result in a smaller concrete object size.",invert:"Performs a color inversion on the pixels on the screen.","-moz-hidden-unscrollable":"Same as the standardized 'clip', except doesn’t establish a block formatting context.",painted:'The given element can be the target element for pointer events when the pointer is over a "painted" area. ',visibleFill:"The given element can be the target element for pointer events when the ‘visibility’ property is set to visible and when the pointer is over the interior of the element.",visiblePainted:"The given element can be the target element for pointer events when the ‘visibility’ property is set to visible and when the pointer is over a ‘painted’ area.",visibleStroke:"The given element can be the target element for pointer events when the ‘visibility’ property is set to visible and when the pointer is over the perimeter of the element.",absolute:"The box's position (and possibly size) is specified with the 'top', 'right', 'bottom', and 'left' properties. These properties specify offsets with respect to the box's 'containing block'.","-ms-page":"The box's position is calculated according to the 'absolute' model.",relative:"The box's position is calculated according to the normal flow (this is called the position in normal flow). Then the box is offset relative to its normal position.",static:"The box is a normal box, laid out according to the normal flow. The 'top', 'right', 'bottom', and 'left' properties do not apply.",sticky:"The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes.","-webkit-sticky":"The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes.","distribute-letter":"If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with the first and last ruby text glyphs lining up with the corresponding first and last base glyphs. If the width of the ruby text is at least the width of the base, then the letters of the base are evenly distributed across the width of the ruby text.","distribute-space":"If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with a certain amount of white space preceding the first and following the last character in the ruby text. That amount of white space is normally equal to half the amount of inter-character space of the ruby text.","line-edge":"If the ruby text is not adjacent to a line edge, it is aligned as in 'auto'. If it is adjacent to a line edge, then it is still aligned as in auto, but the side of the ruby text that touches the end of the line is lined up with the corresponding edge of the base.",after:"The ruby text appears after the base. This is a relatively rare setting used in ideographic East Asian writing systems, most easily found in educational text.",before:"The ruby text appears before the base. This is the most common setting used in ideographic East Asian writing systems.","attr(x)":"The value of attribute 'x' is a string value. The string value is evaluated as a <number> to determine the number of ruby base elements to be spanned by the annotation element.",smooth:"Scrolls in a smooth fashion using a user-agent-defined timing function and time period.","margin-box":"The background is painted within (clipped to) the margin box.",crispEdges:"Emphasize the contrast between clean edges of artwork over rendering speed and geometric precision.","format()":"Optional hint describing the format of the font resource.","local()":"Format-specific string that identifies a locally available copy of a given font.",butt:"Indicates that the stroke for each subpath does not extend beyond its two endpoints.",bevel:"Indicates that a bevelled corner is to be used to join path segments.",miter:"Indicates that a sharp corner is to be used to join path segments.",additive:"Represents “sign-value” numbering systems, which, rather than using reusing digits in different positions to change their value, define additional digits with much larger values, so that the value of the number can be obtained by adding all the digits together.",cyclic:"Cycles repeatedly through its provided symbols, looping back to the beginning when it reaches the end of the list.",extends:"Use the algorithm of another counter style, but alter other aspects.",numeric:"interprets the list of counter symbols as digits to a \"place-value\" numbering system, similar to the default 'decimal' counter style.",symbolic:"Cycles repeatedly through its provided symbols, doubling, tripling, etc. the symbols on each successive pass through the list.",sideways:"This value is equivalent to 'sideways-right' in 'vertical-rl' writing mode and equivalent to 'sideways-left' in 'vertical-lr' writing mode.","sideways-right":"In vertical writing modes, this causes text to be set as if in a horizontal layout, but rotated 90° clockwise.",upright:"In vertical writing modes, characters from horizontal-only scripts are rendered upright, i.e. in their standard horizontal orientation.",optimizeLegibility:"Indicates that the user agent shall emphasize legibility over rendering speed and geometric precision.",capitalize:"Puts the first typographic letter unit of each word in titlecase.",lowercase:"Puts all letters in lowercase.",uppercase:"Puts all letters in uppercase.","perspective()":"Specifies a perspective projection matrix.",flat:"All children of this element are rendered flattened into the 2D plane of the element.","preserve-3d":"Flattening is not performed, so children maintain their position in 3D space.","bidi-override":"Inside the element, reordering is strictly in sequence according to the 'direction' property; the implicit part of the bidirectional algorithm is ignored.",embed:"If the element is inline-level, this value opens an additional level of embedding with respect to the bidirectional algorithm. The direction of this embedding level is given by the 'direction' property.","isolate-override":"This combines the isolation behavior of 'isolate' with the directional override behavior of 'bidi-override'",plaintext:"For the purposes of the Unicode bidirectional algorithm, the base directionality of each bidi paragraph for which the element forms the containing block is determined not by the element's computed 'direction'.","U+26":"Ampersand.","U+20-24F, U+2B0-2FF, U+370-4FF, U+1E00-1EFF, U+2000-20CF, U+2100-23FF, U+2500-26FF, U+E000-F8FF, U+FB00–FB4F":"WGL4 character set (Pan-European).","U+20-17F, U+2B0-2FF, U+2000-206F, U+20A0-20CF, U+2100-21FF, U+2600-26FF":"The Multilingual European Subset No. 1. Latin. Covers ~44 languages.","U+20-2FF, U+370-4FF, U+1E00-20CF, U+2100-23FF, U+2500-26FF, U+FB00-FB4F, U+FFF0-FFFD":"The Multilingual European Subset No. 2. Latin, Greek, and Cyrillic. Covers ~128 language.","U+20-4FF, U+530-58F, U+10D0-10FF, U+1E00-23FF, U+2440-245F, U+2500-26FF, U+FB00-FB4F, U+FE20-FE2F, U+FFF0-FFFD":"The Multilingual European Subset No. 3. Covers all characters belonging to European scripts.","U+00-7F":"Basic Latin (ASCII).","U+80-FF":"Latin-1 Supplement. Accented characters for Western European languages, common punctuation characters, multiplication and division signs.","U+100-17F":"Latin Extended-A. Accented characters for for Czech, Dutch, Polish, and Turkish.","U+180-24F":"Latin Extended-B. Croatian, Slovenian, Romanian, Non-European and historic latin, Khoisan, Pinyin, Livonian, Sinology.","U+1E00-1EFF":"Latin Extended Additional. Vietnamese, German captial sharp s, Medievalist, Latin general use.","U+250-2AF":"International Phonetic Alphabet Extensions.","U+370-3FF":"Greek and Coptic.","U+1F00-1FFF":"Greek Extended. Accented characters for polytonic Greek.","U+400-4FF":"Cyrillic.","U+500-52F":"Cyrillic Supplement. Extra letters for Komi, Khanty, Chukchi, Mordvin, Kurdish, Aleut, Chuvash, Abkhaz, Azerbaijani, and Orok.","U+00-52F, U+1E00-1FFF, U+2200–22FF":"Latin, Greek, Cyrillic, some punctuation and symbols.","U+530–58F":"Armenian.","U+590–5FF":"Hebrew.","U+600–6FF":"Arabic.","U+750–77F":"Arabic Supplement. Additional letters for African languages, Khowar, Torwali, Burushaski, and early Persian.","U+8A0–8FF":"Arabic Extended-A. Additional letters for African languages, European and Central Asian languages, Rohingya, Tamazight, Arwi, and Koranic annotation signs.","U+700–74F":"Syriac.","U+900–97F":"Devanagari.","U+980–9FF":"Bengali.","U+A00–A7F":"Gurmukhi.","U+A80–AFF":"Gujarati.","U+B00–B7F":"Oriya.","U+B80–BFF":"Tamil.","U+C00–C7F":"Telugu.","U+C80–CFF":"Kannada.","U+D00–D7F":"Malayalam.","U+D80–DFF":"Sinhala.","U+118A0–118FF":"Warang Citi.","U+E00–E7F":"Thai.","U+1A20–1AAF":"Tai Tham.","U+AA80–AADF":"Tai Viet.","U+E80–EFF":"Lao.","U+F00–FFF":"Tibetan.","U+1000–109F":"Myanmar (Burmese).","U+10A0–10FF":"Georgian.","U+1200–137F":"Ethiopic.","U+1380–139F":"Ethiopic Supplement. Extra Syllables for Sebatbeit, and Tonal marks","U+2D80–2DDF":"Ethiopic Extended. Extra Syllables for Me'en, Blin, and Sebatbeit.","U+AB00–AB2F":"Ethiopic Extended-A. Extra characters for Gamo-Gofa-Dawro, Basketo, and Gumuz.","U+1780–17FF":"Khmer.","U+1800–18AF":"Mongolian.","U+1B80–1BBF":"Sundanese.","U+1CC0–1CCF":"Sundanese Supplement. Punctuation.","U+4E00–9FD5":"CJK (Chinese, Japanese, Korean) Unified Ideographs. Most common ideographs for modern Chinese and Japanese.","U+3400–4DB5":"CJK Unified Ideographs Extension A. Rare ideographs.","U+2F00–2FDF":"Kangxi Radicals.","U+2E80–2EFF":"CJK Radicals Supplement. Alternative forms of Kangxi Radicals.","U+1100–11FF":"Hangul Jamo.","U+AC00–D7AF":"Hangul Syllables.","U+3040–309F":"Hiragana.","U+30A0–30FF":"Katakana.","U+A5, U+4E00-9FFF, U+30??, U+FF00-FF9F":"Japanese Kanji, Hiragana and Katakana characters plus Yen/Yuan symbol.","U+A4D0–A4FF":"Lisu.","U+A000–A48F":"Yi Syllables.","U+A490–A4CF":"Yi Radicals.","U+2000-206F":"General Punctuation.","U+3000–303F":"CJK Symbols and Punctuation.","U+2070–209F":"Superscripts and Subscripts.","U+20A0–20CF":"Currency Symbols.","U+2100–214F":"Letterlike Symbols.","U+2150–218F":"Number Forms.","U+2190–21FF":"Arrows.","U+2200–22FF":"Mathematical Operators.","U+2300–23FF":"Miscellaneous Technical.","U+E000-F8FF":"Private Use Area.","U+FB00–FB4F":"Alphabetic Presentation Forms. Ligatures for latin, Armenian, and Hebrew.","U+FB50–FDFF":"Arabic Presentation Forms-A. Contextual forms / ligatures for Persian, Urdu, Sindhi, Central Asian languages, etc, Arabic pedagogical symbols, word ligatures.","U+1F600–1F64F":"Emoji: Emoticons.","U+2600–26FF":"Emoji: Miscellaneous Symbols.","U+1F300–1F5FF":"Emoji: Miscellaneous Symbols and Pictographs.","U+1F900–1F9FF":"Emoji: Supplemental Symbols and Pictographs.","U+1F680–1F6FF":"Emoji: Transport and Map Symbols.","text-bottom":"Align the bottom of the box with the after-edge of the parent element's font.","text-top":"Align the top of the box with the before-edge of the parent element's font.",break:"If the content fits within the CSS Region, then this property has no effect.",pre:"Sets 'white-space-collapsing' to 'preserve' and 'text-wrap' to 'none'.","pre-line":"Sets 'white-space-collapsing' to 'preserve-breaks' and 'text-wrap' to 'normal'.","pre-wrap":"Sets 'white-space-collapsing' to 'preserve' and 'text-wrap' to 'normal'.","scroll-position":"Indicates that the author expects to animate or change the scroll position of the element in the near future.","horizontal-tb":"Top-to-bottom block flow direction. The writing mode is horizontal.","sideways-lr":"Left-to-right block flow direction. The writing mode is vertical, while the typographic mode is horizontal.","sideways-rl":"Right-to-left block flow direction. The writing mode is vertical, while the typographic mode is horizontal.","vertical-lr":"Left-to-right block flow direction. The writing mode is vertical.","vertical-rl":"Right-to-left block flow direction. The writing mode is vertical."},Bi=Ri(),Ki={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rebeccapurple:"#663399",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},qi={currentColor:"The value of the 'color' property. The computed value of the 'currentColor' keyword is the computed value of the 'color' property. If the 'currentColor' keyword is set on the 'color' property itself, it is treated as 'color:inherit' at parse time.",transparent:"Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value."},Wi={bottom:"Computes to ‘100%’ for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.",center:"Computes to ‘50%’ (‘left 50%’) for the horizontal position if the horizontal position is not otherwise specified, or ‘50%’ (‘top 50%’) for the vertical position if it is.",left:"Computes to ‘0%’ for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.",right:"Computes to ‘100%’ for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.",top:"Computes to ‘0%’ for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset."},$i={"no-repeat":"Placed once and not repeated in this direction.",repeat:"Repeated in this direction as often as needed to cover the background painting area.","repeat-x":"Computes to ‘repeat no-repeat’.","repeat-y":"Computes to ‘no-repeat repeat’.",round:"Repeated as often as will fit within the background positioning area. If it doesn’t fit a whole number of times, it is rescaled so that it does.",space:"Repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area."},Gi={dashed:"A series of square-ended dashes.",dotted:"A series of round dots.",double:"Two parallel solid lines with some space between them.",groove:"Looks as if it were carved in the canvas.",hidden:"Same as ‘none’, but has different behavior in the border conflict resolution rules for border-collapsed tables.",inset:"Looks as if the content on the inside of the border is sunken into the canvas.",none:"No border. Color and width are ignored.",outset:"Looks as if the content on the inside of the border is coming out of the canvas.",ridge:"Looks as if it were coming out of the canvas.",solid:"A single line segment."},Hi=["medium","thick","thin"],Ji={"border-box":"The background is painted within (clipped to) the border box.","content-box":"The background is painted within (clipped to) the content box.","padding-box":"The background is painted within (clipped to) the padding box."},Yi={"margin-box":"Uses the margin box as reference box.","fill-box":"Uses the object bounding box as reference box.","stroke-box":"Uses the stroke bounding box as reference box.","view-box":"Uses the nearest SVG viewport as reference box."},Xi={initial:"Represents the value specified as the property’s initial value.",inherit:"Represents the computed value of the property on the element’s parent.",unset:"Acts as either `inherit` or `initial`, depending on whether the property is inherited or not."},Qi=[{func:"rgb($red, $green, $blue)",desc:Bi("css.builtin.rgb","Creates a Color from red, green, and blue values.")},{func:"rgba($red, $green, $blue, $alpha)",desc:Bi("css.builtin.rgba","Creates a Color from red, green, blue, and alpha values.")},{func:"hsl($hue, $saturation, $lightness)",desc:Bi("css.builtin.hsl","Creates a Color from hue, saturation, and lightness values.")},{func:"hsla($hue, $saturation, $lightness, $alpha)",desc:Bi("css.builtin.hsla","Creates a Color from hue, saturation, lightness, and alpha values.")}],Zi={"url()":"Reference an image file by URL","image()":"Provide image fallbacks and annotations.","-webkit-image-set()":"Provide multiple resolutions. Remember to use unprefixed image-set() in addition.","image-set()":"Provide multiple resolutions of an image and let the UA decide which is most appropriate in a given situation.","-moz-element()":"Use an element in the document as an image. Remember to use unprefixed element() in addition.","element()":"Use an element in the document as an image.","cross-fade()":"Indicates the two images to be combined and how far along in the transition the combination is.","-webkit-gradient()":"Deprecated. Use modern linear-gradient() or radial-gradient() instead.","-webkit-linear-gradient()":"Linear gradient. Remember to use unprefixed version in addition.","-moz-linear-gradient()":"Linear gradient. Remember to use unprefixed version in addition.","-o-linear-gradient()":"Linear gradient. Remember to use unprefixed version in addition.","linear-gradient()":"A linear gradient is created by specifying a straight gradient line, and then several colors placed along that line.","-webkit-repeating-linear-gradient()":"Repeating Linear gradient. Remember to use unprefixed version in addition.","-moz-repeating-linear-gradient()":"Repeating Linear gradient. Remember to use unprefixed version in addition.","-o-repeating-linear-gradient()":"RepeatingLinear gradient. Remember to use unprefixed version in addition.","repeating-linear-gradient()":"Same as linear-gradient, except the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position.","-webkit-radial-gradient()":"Radial gradient. Remember to use unprefixed version in addition.","-moz-radial-gradient()":"Radial gradient. Remember to use unprefixed version in addition.","radial-gradient()":"Colors emerge from a single point and smoothly spread outward in a circular or elliptical shape.","-webkit-repeating-radial-gradient()":"Repeating radial gradient. Remember to use unprefixed version in addition.","-moz-repeating-radial-gradient()":"Repeating radial gradient. Remember to use unprefixed version in addition.","repeating-radial-gradient()":"Same as radial-gradient, except the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position."},er={ease:"Equivalent to cubic-bezier(0.25, 0.1, 0.25, 1.0).","ease-in":"Equivalent to cubic-bezier(0.42, 0, 1.0, 1.0).","ease-in-out":"Equivalent to cubic-bezier(0.42, 0, 0.58, 1.0).","ease-out":"Equivalent to cubic-bezier(0, 0, 0.58, 1.0).",linear:"Equivalent to cubic-bezier(0.0, 0.0, 1.0, 1.0).","step-end":"Equivalent to steps(1, end).","step-start":"Equivalent to steps(1, start).","steps()":"The first parameter specifies the number of intervals in the function. The second parameter, which is optional, is either the value “start” or “end”.","cubic-bezier()":"Specifies a cubic-bezier curve. The four values specify points P1 and P2  of the curve as (x1, y1, x2, y2).","cubic-bezier(0.6, -0.28, 0.735, 0.045)":"Ease-in Back. Overshoots.","cubic-bezier(0.68, -0.55, 0.265, 1.55)":"Ease-in-out Back. Overshoots.","cubic-bezier(0.175, 0.885, 0.32, 1.275)":"Ease-out Back. Overshoots.","cubic-bezier(0.6, 0.04, 0.98, 0.335)":"Ease-in Circular. Based on half circle.","cubic-bezier(0.785, 0.135, 0.15, 0.86)":"Ease-in-out Circular. Based on half circle.","cubic-bezier(0.075, 0.82, 0.165, 1)":"Ease-out Circular. Based on half circle.","cubic-bezier(0.55, 0.055, 0.675, 0.19)":"Ease-in Cubic. Based on power of three.","cubic-bezier(0.645, 0.045, 0.355, 1)":"Ease-in-out Cubic. Based on power of three.","cubic-bezier(0.215, 0.610, 0.355, 1)":"Ease-out Cubic. Based on power of three.","cubic-bezier(0.95, 0.05, 0.795, 0.035)":"Ease-in Exponential. Based on two to the power ten.","cubic-bezier(1, 0, 0, 1)":"Ease-in-out Exponential. Based on two to the power ten.","cubic-bezier(0.19, 1, 0.22, 1)":"Ease-out Exponential. Based on two to the power ten.","cubic-bezier(0.47, 0, 0.745, 0.715)":"Ease-in Sine.","cubic-bezier(0.445, 0.05, 0.55, 0.95)":"Ease-in-out Sine.","cubic-bezier(0.39, 0.575, 0.565, 1)":"Ease-out Sine.","cubic-bezier(0.55, 0.085, 0.68, 0.53)":"Ease-in Quadratic. Based on power of two.","cubic-bezier(0.455, 0.03, 0.515, 0.955)":"Ease-in-out Quadratic. Based on power of two.","cubic-bezier(0.25, 0.46, 0.45, 0.94)":"Ease-out Quadratic. Based on power of two.","cubic-bezier(0.895, 0.03, 0.685, 0.22)":"Ease-in Quartic. Based on power of four.","cubic-bezier(0.77, 0, 0.175, 1)":"Ease-in-out Quartic. Based on power of four.","cubic-bezier(0.165, 0.84, 0.44, 1)":"Ease-out Quartic. Based on power of four.","cubic-bezier(0.755, 0.05, 0.855, 0.06)":"Ease-in Quintic. Based on power of five.","cubic-bezier(0.86, 0, 0.07, 1)":"Ease-in-out Quintic. Based on power of five.","cubic-bezier(0.23, 1, 0.320, 1)":"Ease-out Quintic. Based on power of five."},tr={"circle()":"Defines a circle.","ellipse()":"Defines an ellipse.","inset()":"Defines an inset rectangle.","polygon()":"Defines a polygon."},nr={length:["em","rem","ex","px","cm","mm","in","pt","pc","ch","vw","vh","vmin","vmax"],angle:["deg","rad","grad","turn"],time:["ms","s"],frequency:["Hz","kHz"],resolution:["dpi","dpcm","dppx"],percentage:["%"]},ir=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","let","video","wbr"],rr=["circle","clipPath","cursor","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","foreignObject","g","hatch","hatchpath","image","line","linearGradient","marker","mask","mesh","meshpatch","meshrow","metadata","mpath","path","pattern","polygon","polyline","radialGradient","rect","set","solidcolor","stop","svg","switch","symbol","text","textPath","tspan","use","view"];var or=48,sr=57,ar=65,lr=97,cr=102;function hr(e){return e<or?0:e<=sr?e-or:(e<lr&&(e+=lr-ar),e>=lr&&e<=cr?e-lr+10:0)}function dr(e){if("#"!==e[0])return null;switch(e.length){case 4:return{red:17*hr(e.charCodeAt(1))/255,green:17*hr(e.charCodeAt(2))/255,blue:17*hr(e.charCodeAt(3))/255,alpha:1};case 5:return{red:17*hr(e.charCodeAt(1))/255,green:17*hr(e.charCodeAt(2))/255,blue:17*hr(e.charCodeAt(3))/255,alpha:17*hr(e.charCodeAt(4))/255};case 7:return{red:(16*hr(e.charCodeAt(1))+hr(e.charCodeAt(2)))/255,green:(16*hr(e.charCodeAt(3))+hr(e.charCodeAt(4)))/255,blue:(16*hr(e.charCodeAt(5))+hr(e.charCodeAt(6)))/255,alpha:1};case 9:return{red:(16*hr(e.charCodeAt(1))+hr(e.charCodeAt(2)))/255,green:(16*hr(e.charCodeAt(3))+hr(e.charCodeAt(4)))/255,blue:(16*hr(e.charCodeAt(5))+hr(e.charCodeAt(6)))/255,alpha:(16*hr(e.charCodeAt(7))+hr(e.charCodeAt(8)))/255}}return null}function ur(e){if(e.type===En.HexColorValue)return dr(e.getText());if(e.type===En.Function){var t=e,n=t.getName(),i=t.getArguments().getChildren();if(!n||i.length<3||i.length>4)return null;try{var r=4===i.length?mr(i[3],1):1;if("rgb"===n||"rgba"===n)return{red:mr(i[0],255),green:mr(i[1],255),blue:mr(i[2],255),alpha:r};if("hsl"===n||"hsla"===n)return function(e,t,n,i){if(void 0===i&&(i=1),e/=60,0===t)return{red:n,green:n,blue:n,alpha:i};var r=function(e,t,n){for(;n<0;)n+=6;for(;n>=6;)n-=6;return n<1?(t-e)*n+e:n<3?t:n<4?(t-e)*(4-n)+e:e},o=n<=.5?n*(t+1):n+t-n*t,s=2*n-o;return{red:r(s,o,e+2),green:r(s,o,e),blue:r(s,o,e-2),alpha:i}}(function(e){var t=e.getText();if(t.match(/^([-+]?[0-9]*\.?[0-9]+)(deg)?$/))return parseFloat(t)%360;throw new Error}(i[0]),mr(i[1],100),mr(i[2],100),r)}catch(e){return null}}else if(e.type===En.Identifier){if(e.parent&&e.parent.type!==En.Term)return null;var o=e.getText().toLowerCase();if("none"===o)return null;var s=Ki[o];if(s)return dr(s)}return null}function mr(e,t){var n=e.getText().match(/^([-+]?[0-9]*\.?[0-9]+)(%?)$/);if(n){n[2]&&(t=100);var i=parseFloat(n[1])/t;if(i>=0&&i<=1)return i}throw new Error}function pr(e){return!!e&&(e=e.toLowerCase(),Cr().hasOwnProperty(e))}function fr(e){return e.browsers.count>1}function gr(e){var t=e.description||"",n=this.getBrowserLabel(e.browsers);return n&&(t&&(t+="\n"),t=t+"("+n+")"),t}function br(e){var t="";if(!e||e.all||0===e.count)return null;for(var n in Pr)if("string"==typeof e[n]){t.length>0&&(t+=", "),t+=Pr[n];var i=e[n];i.length>0&&(t=t+" "+i)}return t}function yr(e){var t={all:!1,count:0,onCodeComplete:!1},n=0;if(e)for(var i=0,r=e.split(",");i<r.length;i++){var o=r[i];if("all"===(o=o.trim()))t.all=!0,n=Number.MAX_VALUE;else if("none"!==o)for(var s in Pr)0===o.indexOf(s)&&(t[s]=o.substring(s.length).trim(),n++)}else t.all=!0,n=Number.MAX_VALUE;return t.count=n,t.onCodeComplete=n>0,t}var vr,wr=function(){function e(e){this.data=e}return Object.defineProperty(e.prototype,"name",{get:function(){return this.data.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"description",{get:function(){return this.data.desc||Vi[this.data.name]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"browsers",{get:function(){return this.browserEntry||(this.browserEntry=yr(this.data.browsers)),this.browserEntry},enumerable:!0,configurable:!0}),e}(),xr=function(){function e(e){this.data=e}return Object.defineProperty(e.prototype,"name",{get:function(){return this.data.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"description",{get:function(){return this.data.desc||Vi[this.data.name]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"browsers",{get:function(){return this.browserEntry||(this.browserEntry=yr(this.data.browsers)),this.browserEntry},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"restrictions",{get:function(){return this.data.restriction?this.data.restriction.split(",").map(function(e){return e.trim()}):[]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this.data.values?Array.isArray(this.data.values)?this.data.values.map(function(e){return new wr(e)}):[new wr(this.data.values.value)]:[]},enumerable:!0,configurable:!0}),e}(),kr=ji.properties;function Cr(){if(!vr){vr={};for(var e=0,t=kr.length;e<t;e++){var n=kr[e];vr[n.name]=new xr(n)}}return vr}var Sr,_r=ji.atdirectives;var Fr,Er=ji.pseudoelements;var Ir,Ar=ji.pseudoclasses;var Pr={E:"Edge",FF:"Firefox",S:"Safari",C:"Chrome",IE:"IE",O:"Opera"},Tr=function(){function e(e){void 0===e&&(e=new An),this.keyframeRegex=/^@(\-(webkit|ms|moz|o)\-)?keyframes$/i,this.scanner=e,this.token=null,this.prevToken=null}return e.prototype.peekIdent=function(e){return Dt.Ident===this.token.type&&e.length===this.token.text.length&&e===this.token.text.toLowerCase()},e.prototype.peekKeyword=function(e){return Dt.AtKeyword===this.token.type&&e.length===this.token.text.length&&e===this.token.text.toLowerCase()},e.prototype.peekDelim=function(e){return Dt.Delim===this.token.type&&e===this.token.text},e.prototype.peek=function(e){return e===this.token.type},e.prototype.peekRegExp=function(e,t){return e===this.token.type&&t.test(this.token.text)},e.prototype.hasWhitespace=function(){return this.prevToken&&this.prevToken.offset+this.prevToken.len!==this.token.offset},e.prototype.consumeToken=function(){this.prevToken=this.token,this.token=this.scanner.scan()},e.prototype.mark=function(){return{prev:this.prevToken,curr:this.token,pos:this.scanner.pos()}},e.prototype.restoreAtMark=function(e){this.prevToken=e.prev,this.token=e.curr,this.scanner.goBackTo(e.pos)},e.prototype.try=function(e){var t=this.mark(),n=e();return n||(this.restoreAtMark(t),null)},e.prototype.acceptOneKeyword=function(e){if(Dt.AtKeyword===this.token.type)for(var t=0,n=e;t<n.length;t++){var i=n[t];if(i.length===this.token.text.length&&i===this.token.text.toLowerCase())return this.consumeToken(),!0}return!1},e.prototype.accept=function(e){return e===this.token.type&&(this.consumeToken(),!0)},e.prototype.acceptIdent=function(e){return!!this.peekIdent(e)&&(this.consumeToken(),!0)},e.prototype.acceptKeyword=function(e){return!!this.peekKeyword(e)&&(this.consumeToken(),!0)},e.prototype.acceptDelim=function(e){return!!this.peekDelim(e)&&(this.consumeToken(),!0)},e.prototype.acceptUnquotedString=function(){var e=this.scanner.pos();this.scanner.goBackTo(this.token.offset);var t=this.scanner.scanUnquotedString();return t?(this.token=t,this.consumeToken(),!0):(this.scanner.goBackTo(e),!1)},e.prototype.resync=function(e,t){for(;;){if(e&&-1!==e.indexOf(this.token.type))return this.consumeToken(),!0;if(t&&-1!==t.indexOf(this.token.type))return!0;if(this.token.type===Dt.EOF)return!1;this.token=this.scanner.scan()}},e.prototype.createNode=function(e){return new Dn(this.token.offset,this.token.len,e)},e.prototype.create=function(e){var t=Object.create(e.prototype);return e.apply(t,[this.token.offset,this.token.len]),t},e.prototype.finish=function(e,t,n,i){if(!(e instanceof Ln)&&(t&&this.markError(e,t,n,i),null!==this.prevToken)){var r=this.prevToken.offset+this.prevToken.len;e.length=r>e.offset?r-e.offset:0}return e},e.prototype.markError=function(e,t,n,i){this.token!==this.lastErrorToken&&(e.addIssue(new Ni(e,t,Nn.Error,null,this.token.offset,this.token.len)),this.lastErrorToken=this.token),(n||i)&&this.resync(n,i)},e.prototype.parseStylesheet=function(e){var t=e.version;return this.internalParse(e.getText(),this._parseStylesheet,function(n,i){if(e.version!==t)throw new Error("Underlying model has changed, AST is no longer valid");return e.getText().substr(n,i)})},e.prototype.internalParse=function(e,t,n){this.scanner.setSource(e),this.token=this.scanner.scan();var i=t.bind(this)();return i&&(i.textProvider=n||function(t,n){return e.substr(t,n)}),i},e.prototype._parseStylesheet=function(){var e=this.create(zn);e.addChild(this._parseCharset());var t=!1;do{var n=!1;do{n=!1;var i=this._parseStylesheetStatement();for(i&&(e.addChild(i),n=!0,t=!1,this.peek(Dt.EOF)||!this._needsSemicolonAfter(i)||this.accept(Dt.SemiColon)||this.markError(e,Ui.SemiColonExpected));this.accept(Dt.SemiColon)||this.accept(Dt.CDO)||this.accept(Dt.CDC);)n=!0,t=!1}while(n);if(this.peek(Dt.EOF))break;t||(this.peek(Dt.AtKeyword)?this.markError(e,Ui.UnknownAtRule):this.markError(e,Ui.RuleOrSelectorExpected),t=!0),this.consumeToken()}while(!this.peek(Dt.EOF));return this.finish(e)},e.prototype._parseStylesheetStatement=function(){return this.peek(Dt.AtKeyword)?this._parseImport()||this._parseMedia()||this._parsePage()||this._parseFontFace()||this._parseKeyframe()||this._parseSupports()||this._parseViewPort()||this._parseNamespace()||this._parseDocument():this._parseRuleset(!1)},e.prototype._tryParseRuleset=function(e){var t=this.mark();if(this._parseSelector(e)){for(;this.accept(Dt.Comma)&&this._parseSelector(e););if(this.accept(Dt.CurlyL))return this.restoreAtMark(t),this._parseRuleset(e)}return this.restoreAtMark(t),null},e.prototype._parseRuleset=function(e){void 0===e&&(e=!1);var t=this.create(jn);if(!t.getSelectors().addChild(this._parseSelector(e)))return null;for(;this.accept(Dt.Comma)&&t.getSelectors().addChild(this._parseSelector(e)););return this._parseBody(t,this._parseRuleSetDeclaration.bind(this))},e.prototype._parseRuleSetDeclaration=function(){return this._parseAtApply()||this._tryParseCustomPropertyDeclaration()||this._parseDeclaration()},e.prototype._parseAtApply=function(){if(!this.peekKeyword("@apply"))return null;var e=this.create(Kn);return this.consumeToken(),e.setIdentifier(this._parseIdent([In.Variable]))?this.finish(e):this.finish(e,Ui.IdentifierExpected)},e.prototype._needsSemicolonAfter=function(e){switch(e.type){case En.Keyframe:case En.ViewPort:case En.Media:case En.Ruleset:case En.Namespace:case En.If:case En.For:case En.Each:case En.While:case En.MixinDeclaration:case En.FunctionDeclaration:return!1;case En.VariableDeclaration:case En.ExtendsReference:case En.MixinContent:case En.ReturnStatement:case En.MediaQuery:case En.Debug:case En.Import:case En.AtApplyRule:case En.CustomPropertyDeclaration:return!0;case En.MixinReference:return!e.getContent();case En.Declaration:return!e.getNestedProperties()}return!1},e.prototype._parseDeclarations=function(e){var t=this.create(Mn);if(!this.accept(Dt.CurlyL))return null;for(var n=e();t.addChild(n)&&!this.peek(Dt.CurlyR);){if(this._needsSemicolonAfter(n)&&!this.accept(Dt.SemiColon))return this.finish(t,Ui.SemiColonExpected,[Dt.SemiColon,Dt.CurlyR]);for(;this.accept(Dt.SemiColon););n=e()}return this.accept(Dt.CurlyR)?this.finish(t):this.finish(t,Ui.RightCurlyExpected,[Dt.CurlyR,Dt.SemiColon])},e.prototype._parseBody=function(e,t){return e.setDeclarations(this._parseDeclarations(t))?this.finish(e):this.finish(e,Ui.LeftCurlyExpected,[Dt.CurlyR,Dt.SemiColon])},e.prototype._parseSelector=function(e){var t=this.create(Vn),n=!1;for(e&&(n=t.addChild(this._parseCombinator()));t.addChild(this._parseSimpleSelector());)n=!0,t.addChild(this._parseCombinator());return n?this.finish(t):null},e.prototype._parseDeclaration=function(e){var t=this.create(Gn);return t.setProperty(this._parseProperty())?this.accept(Dt.Colon)?(t.colonPosition=this.prevToken.offset,t.setValue(this._parseExpr())?(t.addChild(this._parsePrio()),this.peek(Dt.SemiColon)&&(t.semicolonPosition=this.token.offset),this.finish(t)):this.finish(t,Ui.PropertyValueExpected)):this.finish(t,Ui.ColonExpected,[Dt.Colon],e):null},e.prototype._tryParseCustomPropertyDeclaration=function(){if(!this.peekRegExp(Dt.Ident,/^--/))return null;var e=this.create(Wn);if(!e.setProperty(this._parseProperty()))return null;if(!this.accept(Dt.Colon))return this.finish(e,Ui.ColonExpected,[Dt.Colon]);e.colonPosition=this.prevToken.offset;var t=this.mark();if(this.peek(Dt.CurlyL)){var n=this.create($n),i=this._parseDeclarations(this._parseRuleSetDeclaration.bind(this));if(n.setDeclarations(i)&&!i.isErroneous(!0)&&(n.addChild(this._parsePrio()),this.peek(Dt.SemiColon)))return this.finish(n),e.setPropertySet(n),e.semicolonPosition=this.token.offset,this.finish(e);this.restoreAtMark(t)}var r=this._parseExpr();return r&&!r.isErroneous(!0)&&(this._parsePrio(),this.peek(Dt.SemiColon))?(e.setValue(r),e.semicolonPosition=this.token.offset,this.finish(e)):(this.restoreAtMark(t),e.addChild(this._parseCustomPropertyValue()),e.addChild(this._parsePrio()),this.token.offset===e.colonPosition+1?this.finish(e,Ui.PropertyValueExpected):this.finish(e))},e.prototype._parseCustomPropertyValue=function(){var e=this.create(Dn),t=function(){return 0===n&&0===i&&0===r},n=0,i=0,r=0;e:for(;;){switch(this.token.type){case Dt.SemiColon:case Dt.Exclamation:if(t())break e;break;case Dt.CurlyL:n++;break;case Dt.CurlyR:if(--n<0){if(0===i&&0===r)break e;return this.finish(e,Ui.LeftCurlyExpected)}break;case Dt.ParenthesisL:i++;break;case Dt.ParenthesisR:if(--i<0)return this.finish(e,Ui.LeftParenthesisExpected);break;case Dt.BracketL:r++;break;case Dt.BracketR:if(--r<0)return this.finish(e,Ui.LeftSquareBracketExpected);break;case Dt.BadString:break e;case Dt.EOF:var o=Ui.RightCurlyExpected;return r>0?o=Ui.RightSquareBracketExpected:i>0&&(o=Ui.RightParenthesisExpected),this.finish(e,o)}this.consumeToken()}return this.finish(e)},e.prototype._tryToParseDeclaration=function(){var e=this.mark();return this._parseProperty()&&this.accept(Dt.Colon)?(this.restoreAtMark(e),this._parseDeclaration()):(this.restoreAtMark(e),null)},e.prototype._parseProperty=function(){var e=this.create(Hn),t=this.mark();return(this.acceptDelim("*")||this.acceptDelim("_"))&&this.hasWhitespace()?(this.restoreAtMark(t),null):e.setIdentifier(this._parsePropertyIdentifier())?this.finish(e):null},e.prototype._parsePropertyIdentifier=function(){return this._parseIdent()},e.prototype._parseCharset=function(){if(!this.peek(Dt.Charset))return null;var e=this.create(Dn);return this.consumeToken(),this.accept(Dt.String)?this.accept(Dt.SemiColon)?this.finish(e):this.finish(e,Ui.SemiColonExpected):this.finish(e,Ui.IdentifierExpected)},e.prototype._parseImport=function(){if(!this.peekKeyword("@import"))return null;var e=this.create(ci);return this.consumeToken(),e.addChild(this._parseURILiteral())||e.addChild(this._parseStringLiteral())?(this.peek(Dt.SemiColon)||this.peek(Dt.EOF)||e.setMedialist(this._parseMediaQueryList()),this.finish(e)):this.finish(e,Ui.URIOrStringExpected)},e.prototype._parseNamespace=function(){if(!this.peekKeyword("@namespace"))return null;var e=this.create(hi);return this.consumeToken(),e.addChild(this._parseURILiteral())||(e.addChild(this._parseIdent()),e.addChild(this._parseURILiteral())||e.addChild(this._parseStringLiteral()))?this.accept(Dt.SemiColon)?this.finish(e):this.finish(e,Ui.SemiColonExpected):this.finish(e,Ui.URIExpected,[Dt.SemiColon])},e.prototype._parseFontFace=function(){if(!this.peekKeyword("@font-face"))return null;var e=this.create(oi);return this.consumeToken(),this._parseBody(e,this._parseRuleSetDeclaration.bind(this))},e.prototype._parseViewPort=function(){if(!this.peekKeyword("@-ms-viewport")&&!this.peekKeyword("@-o-viewport")&&!this.peekKeyword("@viewport"))return null;var e=this.create(ri);return this.consumeToken(),this._parseBody(e,this._parseRuleSetDeclaration.bind(this))},e.prototype._parseKeyframe=function(){if(!this.peekRegExp(Dt.AtKeyword,this.keyframeRegex))return null;var e=this.create(ai),t=this.create(Dn);return this.consumeToken(),e.setKeyword(this.finish(t)),"@-ms-keyframes"===t.getText()&&this.markError(t,Ui.UnknownKeyword),e.setIdentifier(this._parseKeyframeIdent())?this._parseBody(e,this._parseKeyframeSelector.bind(this)):this.finish(e,Ui.IdentifierExpected,[Dt.CurlyR])},e.prototype._parseKeyframeIdent=function(){return this._parseIdent([In.Keyframe])},e.prototype._parseKeyframeSelector=function(){var e=this.create(li);if(!e.addChild(this._parseIdent())&&!this.accept(Dt.Percentage))return null;for(;this.accept(Dt.Comma);)if(!e.addChild(this._parseIdent())&&!this.accept(Dt.Percentage))return this.finish(e,Ui.PercentageExpected);return this._parseBody(e,this._parseRuleSetDeclaration.bind(this))},e.prototype._tryParseKeyframeSelector=function(){var e=this.create(li),t=this.mark();if(!e.addChild(this._parseIdent())&&!this.accept(Dt.Percentage))return null;for(;this.accept(Dt.Comma);)if(!e.addChild(this._parseIdent())&&!this.accept(Dt.Percentage))return this.restoreAtMark(t),null;return this.peek(Dt.CurlyL)?this._parseBody(e,this._parseRuleSetDeclaration.bind(this)):(this.restoreAtMark(t),null)},e.prototype._parseSupports=function(e){if(void 0===e&&(e=!1),!this.peekKeyword("@supports"))return null;var t=this.create(ui);return this.consumeToken(),t.addChild(this._parseSupportsCondition()),this._parseBody(t,this._parseSupportsDeclaration.bind(this,e))},e.prototype._parseSupportsDeclaration=function(e){return void 0===e&&(e=!1),e&&(this._tryParseRuleset(e)||this._tryToParseDeclaration())||this._parseStylesheetStatement()},e.prototype._parseSupportsCondition=function(){var e=this.create(gi);if(this.acceptIdent("not"))e.addChild(this._parseSupportsConditionInParens());else if(e.addChild(this._parseSupportsConditionInParens()),this.peekRegExp(Dt.Ident,/^(and|or)$/i))for(var t=this.token.text;this.acceptIdent(t);)e.addChild(this._parseSupportsConditionInParens());return this.finish(e)},e.prototype._parseSupportsConditionInParens=function(){var e=this.create(gi);if(this.accept(Dt.ParenthesisL))return e.lParent=this.prevToken.offset,e.addChild(this._tryToParseDeclaration())||this._parseSupportsCondition()?this.accept(Dt.ParenthesisR)?(e.rParent=this.prevToken.offset,this.finish(e)):this.finish(e,Ui.RightParenthesisExpected,[Dt.ParenthesisR],[]):this.finish(e,Ui.ConditionExpected);if(this.peek(Dt.Ident)){var t=this.mark();if(this.consumeToken(),!this.hasWhitespace()&&this.accept(Dt.ParenthesisL)){for(var n=1;this.token.type!==Dt.EOF&&0!==n;)this.token.type===Dt.ParenthesisL?n++:this.token.type===Dt.ParenthesisR&&n--,this.consumeToken();return this.finish(e)}this.restoreAtMark(t)}return this.finish(e,Ui.LeftParenthesisExpected,[],[Dt.ParenthesisL])},e.prototype._parseMediaDeclaration=function(e){return void 0===e&&(e=!1),this._tryParseRuleset(e)||this._tryToParseDeclaration()||this._parseStylesheetStatement()},e.prototype._parseMedia=function(e){if(void 0===e&&(e=!1),!this.peekKeyword("@media"))return null;var t=this.create(di);return this.consumeToken(),t.addChild(this._parseMediaQueryList())?this._parseBody(t,this._parseMediaDeclaration.bind(this,e)):this.finish(t,Ui.MediaQueryExpected)},e.prototype._parseMediaQueryList=function(){var e=this.create(pi);if(!e.addChild(this._parseMediaQuery([Dt.CurlyL])))return this.finish(e,Ui.MediaQueryExpected);for(;this.accept(Dt.Comma);)if(!e.addChild(this._parseMediaQuery([Dt.CurlyL])))return this.finish(e,Ui.MediaQueryExpected);return this.finish(e)},e.prototype._parseMediaQuery=function(e){var t=this.create(fi),n=!0,i=!1;if(!this.peek(Dt.ParenthesisL)){if(this.acceptIdent("only")||this.acceptIdent("not"),!t.addChild(this._parseIdent()))return null;i=!0,n=this.acceptIdent("and")}for(;n;){if(!this.accept(Dt.ParenthesisL))return i?this.finish(t,Ui.LeftParenthesisExpected,[],e):null;if(!t.addChild(this._parseMediaFeatureName()))return this.finish(t,Ui.IdentifierExpected,[],e);if(this.accept(Dt.Colon)&&!t.addChild(this._parseExpr()))return this.finish(t,Ui.TermExpected,[],e);if(!this.accept(Dt.ParenthesisR))return this.finish(t,Ui.RightParenthesisExpected,[],e);n=this.acceptIdent("and")}return this.finish(t)},e.prototype._parseMediaFeatureName=function(){return this._parseIdent()},e.prototype._parseMedium=function(){var e=this.create(Dn);return e.addChild(this._parseIdent())?this.finish(e):null},e.prototype._parsePageDeclaration=function(){return this._parsePageMarginBox()||this._parseRuleSetDeclaration()},e.prototype._parsePage=function(){if(!this.peekKeyword("@page"))return null;var e=this.create(bi);if(this.consumeToken(),e.addChild(this._parsePageSelector()))for(;this.accept(Dt.Comma);)if(!e.addChild(this._parsePageSelector()))return this.finish(e,Ui.IdentifierExpected);return this._parseBody(e,this._parsePageDeclaration.bind(this))},e.prototype._parsePageMarginBox=function(){if(!this.peek(Dt.AtKeyword))return null;var e=this.create(yi);return this.acceptOneKeyword(["@bottom-center","@bottom-left","@bottom-left-corner","@bottom-right","@bottom-right-corner","@left-bottom","@left-middle","@left-top","@right-bottom","@right-middle","@right-top","@top-center","@top-left","@top-left-corner","@top-right","@top-right-corner"])||this.markError(e,Ui.UnknownAtRule,[],[Dt.CurlyL]),this._parseBody(e,this._parseRuleSetDeclaration.bind(this))},e.prototype._parsePageSelector=function(){if(!this.peek(Dt.Ident)&&!this.peek(Dt.Colon))return null;var e=this.create(Dn);return e.addChild(this._parseIdent()),this.accept(Dt.Colon)&&!e.addChild(this._parseIdent())?this.finish(e,Ui.IdentifierExpected):this.finish(e)},e.prototype._parseDocument=function(){if(!this.peekKeyword("@-moz-document"))return null;var e=this.create(mi);return this.consumeToken(),this.resync([],[Dt.CurlyL]),this._parseBody(e,this._parseStylesheetStatement.bind(this))},e.prototype._parseOperator=function(){if(this.peekDelim("/")||this.peekDelim("*")||this.peekDelim("+")||this.peekDelim("-")||this.peek(Dt.Dashmatch)||this.peek(Dt.Includes)||this.peek(Dt.SubstringOperator)||this.peek(Dt.PrefixOperator)||this.peek(Dt.SuffixOperator)||this.peekDelim("=")){var e=this.createNode(En.Operator);return this.consumeToken(),this.finish(e)}return null},e.prototype._parseUnaryOperator=function(){if(!this.peekDelim("+")&&!this.peekDelim("-"))return null;var e=this.create(Dn);return this.consumeToken(),this.finish(e)},e.prototype._parseCombinator=function(){if(this.peekDelim(">")){var e=this.create(Dn);this.consumeToken();var t=this.mark();if(!this.hasWhitespace()&&this.acceptDelim(">")){if(!this.hasWhitespace()&&this.acceptDelim(">"))return e.type=En.SelectorCombinatorShadowPiercingDescendant,this.finish(e);this.restoreAtMark(t)}return e.type=En.SelectorCombinatorParent,this.finish(e)}if(this.peekDelim("+")){e=this.create(Dn);return this.consumeToken(),e.type=En.SelectorCombinatorSibling,this.finish(e)}if(this.peekDelim("~")){e=this.create(Dn);return this.consumeToken(),e.type=En.SelectorCombinatorAllSiblings,this.finish(e)}if(!this.peekDelim("/"))return null;e=this.create(Dn);this.consumeToken();t=this.mark();if(!this.hasWhitespace()&&this.acceptIdent("deep")&&!this.hasWhitespace()&&this.acceptDelim("/"))return e.type=En.SelectorCombinatorShadowPiercingDescendant,this.finish(e);this.restoreAtMark(t)},e.prototype._parseSimpleSelector=function(){var e=this.create(Bn),t=0;for(e.addChild(this._parseElementName())&&t++;(0===t||!this.hasWhitespace())&&e.addChild(this._parseSimpleSelectorBody());)t++;return t>0?this.finish(e):null},e.prototype._parseSimpleSelectorBody=function(){return this._parsePseudo()||this._parseHash()||this._parseClass()||this._parseAttrib()},e.prototype._parseSelectorIdent=function(){return this._parseIdent()},e.prototype._parseHash=function(){if(!this.peek(Dt.Hash)&&!this.peekDelim("#"))return null;var e=this.createNode(En.IdentifierSelector);if(this.acceptDelim("#")){if(this.hasWhitespace()||!e.addChild(this._parseSelectorIdent()))return this.finish(e,Ui.IdentifierExpected)}else this.consumeToken();return this.finish(e)},e.prototype._parseClass=function(){if(!this.peekDelim("."))return null;var e=this.createNode(En.ClassSelector);return this.consumeToken(),this.hasWhitespace()||!e.addChild(this._parseSelectorIdent())?this.finish(e,Ui.IdentifierExpected):this.finish(e)},e.prototype._parseElementName=function(){var e=this.mark(),t=this.createNode(En.ElementNameSelector);return t.addChild(this._parseNamespacePrefix()),t.addChild(this._parseSelectorIdent())||this.acceptDelim("*")?this.finish(t):(this.restoreAtMark(e),null)},e.prototype._parseNamespacePrefix=function(){var e=this.mark(),t=this.createNode(En.NamespacePrefix);return!t.addChild(this._parseIdent())&&this.acceptDelim("*"),this.acceptDelim("|")?this.finish(t):(this.restoreAtMark(e),null)},e.prototype._parseAttrib=function(){if(!this.peek(Dt.BracketL))return null;var e=this.create(ki);return this.consumeToken(),e.setNamespacePrefix(this._parseNamespacePrefix()),e.setExpression(this._parseBinaryExpr()),this.accept(Dt.BracketR)?this.finish(e):this.finish(e,Ui.RightSquareBracketExpected)},e.prototype._parsePseudo=function(){var e=this;if(!this.peek(Dt.Colon))return null;var t=this.mark(),n=this.createNode(En.PseudoSelector);if(this.consumeToken(),!this.hasWhitespace()){if(this.accept(Dt.Colon)&&this.hasWhitespace())return this.finish(n,Ui.IdentifierExpected);if(!n.addChild(this._parseIdent()))return this.finish(n,Ui.IdentifierExpected);if(!this.hasWhitespace()&&this.accept(Dt.ParenthesisL)){if(n.addChild(this.try(function(){var t=e._parseSimpleSelector();return t&&e.peek(Dt.ParenthesisR)?t:null})||this._parseBinaryExpr()),!this.accept(Dt.ParenthesisR))return this.finish(n,Ui.RightParenthesisExpected)}return this.finish(n)}return this.restoreAtMark(t),null},e.prototype._tryParsePrio=function(){var e=this.mark(),t=this._parsePrio();return t||(this.restoreAtMark(e),null)},e.prototype._parsePrio=function(){if(!this.peek(Dt.Exclamation))return null;var e=this.createNode(En.Prio);return this.accept(Dt.Exclamation)&&this.acceptIdent("important")?this.finish(e):null},e.prototype._parseExpr=function(e){void 0===e&&(e=!1);var t=this.create(vi);if(!t.addChild(this._parseNamedLine()||this._parseBinaryExpr()))return null;for(;;){if(this.peek(Dt.Comma)){if(e)return this.finish(t);this.consumeToken()}if(!t.addChild(this._parseNamedLine()||this._parseBinaryExpr()))break}return this.finish(t)},e.prototype._parseNamedLine=function(){if(!this.peek(Dt.BracketL))return null;var e=this.createNode(En.GridLine);for(this.consumeToken();e.addChild(this._parseIdent()););return this.accept(Dt.BracketR)?this.finish(e):this.finish(e,Ui.RightSquareBracketExpected)},e.prototype._parseBinaryExpr=function(e,t){var n=this.create(wi);if(!n.setLeft(e||this._parseTerm()))return null;if(!n.setOperator(t||this._parseOperator()))return this.finish(n);if(!n.setRight(this._parseTerm()))return this.finish(n,Ui.TermExpected);n=this.finish(n);var i=this._parseOperator();return i&&(n=this._parseBinaryExpr(n,i)),this.finish(n)},e.prototype._parseTerm=function(){var e=this.create(xi);return e.setOperator(this._parseUnaryOperator()),e.setExpression(this._parseURILiteral())||e.setExpression(this._parseFunction())||e.setExpression(this._parseIdent())||e.setExpression(this._parseStringLiteral())||e.setExpression(this._parseNumeric())||e.setExpression(this._parseHexColor())||e.setExpression(this._parseOperation())?this.finish(e):null},e.prototype._parseOperation=function(){if(!this.peek(Dt.ParenthesisL))return null;var e=this.create(Dn);return this.consumeToken(),e.addChild(this._parseExpr()),this.accept(Dt.ParenthesisR)?this.finish(e):this.finish(e,Ui.RightParenthesisExpected)},e.prototype._parseNumeric=function(){if(this.peek(Dt.Num)||this.peek(Dt.Percentage)||this.peek(Dt.Resolution)||this.peek(Dt.Length)||this.peek(Dt.EMS)||this.peek(Dt.EXS)||this.peek(Dt.Angle)||this.peek(Dt.Time)||this.peek(Dt.Dimension)||this.peek(Dt.Freq)){var e=this.create(Si);return this.consumeToken(),this.finish(e)}return null},e.prototype._parseStringLiteral=function(){if(!this.peek(Dt.String)&&!this.peek(Dt.BadString))return null;var e=this.createNode(En.StringLiteral);return this.consumeToken(),this.finish(e)},e.prototype._parseURILiteral=function(){if(!this.peekRegExp(Dt.Ident,/^url(-prefix)?$/i))return null;var e=this.mark(),t=this.createNode(En.URILiteral);return this.accept(Dt.Ident),this.hasWhitespace()||!this.peek(Dt.ParenthesisL)?(this.restoreAtMark(e),null):(this.scanner.inURL=!0,this.consumeToken(),t.addChild(this._parseURLArgument()),this.scanner.inURL=!1,this.accept(Dt.ParenthesisR)?this.finish(t):this.finish(t,Ui.RightParenthesisExpected))},e.prototype._parseURLArgument=function(){var e=this.create(Dn);return this.accept(Dt.String)||this.accept(Dt.BadString)||this.acceptUnquotedString()?this.finish(e):null},e.prototype._parseIdent=function(e){if(!this.peek(Dt.Ident))return null;var t=this.create(Rn);return e&&(t.referenceTypes=e),t.isCustomProperty=this.peekRegExp(Dt.Ident,/^--/),this.consumeToken(),this.finish(t)},e.prototype._parseFunction=function(){var e=this.mark(),t=this.create(Jn);if(!t.setIdentifier(this._parseFunctionIdentifier()))return null;if(this.hasWhitespace()||!this.accept(Dt.ParenthesisL))return this.restoreAtMark(e),null;if(t.getArguments().addChild(this._parseFunctionArgument()))for(;this.accept(Dt.Comma);)t.getArguments().addChild(this._parseFunctionArgument())||this.markError(t,Ui.ExpressionExpected);return this.accept(Dt.ParenthesisR)?this.finish(t):this.finish(t,Ui.RightParenthesisExpected)},e.prototype._parseFunctionIdentifier=function(){if(!this.peek(Dt.Ident))return null;var e=this.create(Rn);if(e.referenceTypes=[In.Function],this.acceptIdent("progid")){if(this.accept(Dt.Colon))for(;this.accept(Dt.Ident)&&this.acceptDelim("."););return this.finish(e)}return this.consumeToken(),this.finish(e)},e.prototype._parseFunctionArgument=function(){var e=this.create(Xn);return e.setValue(this._parseExpr(!0))?this.finish(e):null},e.prototype._parseHexColor=function(){if(this.peekRegExp(Dt.Hash,/^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{4}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$/g)){var e=this.create(Ci);return this.consumeToken(),this.finish(e)}return null},e}();var Or=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Nr=function(){function e(e,t){this.offset=e,this.length=t,this.symbols=[],this.parent=null,this.children=[]}return e.prototype.addChild=function(e){this.children.push(e),e.setParent(this)},e.prototype.setParent=function(e){this.parent=e},e.prototype.findScope=function(e,t){return void 0===t&&(t=0),this.offset<=e&&this.offset+this.length>e+t||this.offset===e&&this.length===t?this.findInScope(e,t):null},e.prototype.findInScope=function(e,t){void 0===t&&(t=0);var n=e+t,i=function(e,t){var n=0,i=e.length;if(0===i)return 0;for(;n<i;){var r=Math.floor((n+i)/2);t(e[r])?i=r:n=r+1}return n}(this.children,function(e){return e.offset>n});if(0===i)return this;var r=this.children[i-1];return r.offset<=e&&r.offset+r.length>=e+t?r.findInScope(e,t):this},e.prototype.addSymbol=function(e){this.symbols.push(e)},e.prototype.getSymbol=function(e,t){for(var n=0;n<this.symbols.length;n++){var i=this.symbols[n];if(i.name===e&&i.type===t)return i}return null},e.prototype.getSymbols=function(){return this.symbols},e}(),Dr=function(e){function t(){return e.call(this,0,Number.MAX_VALUE)||this}return Or(t,e),t}(Nr),Lr=function(){return function(e,t,n,i){this.name=e,this.value=t,this.node=n,this.type=i}}(),Rr=function(){function e(e){this.scope=e}return e.prototype.addSymbol=function(e,t,n,i){-1!==e.offset&&this.scope.findScope(e.offset,e.length).addSymbol(new Lr(t,n,e,i))},e.prototype.addScope=function(e){if(-1!==e.offset){var t=this.scope.findScope(e.offset,e.length);if(t.offset!==e.offset||t.length!==e.length){var n=new Nr(e.offset,e.length);return t.addChild(n),n}return t}return null},e.prototype.addSymbolToChildScope=function(e,t,n,i,r){e&&-1!==e.offset&&this.addScope(e).addSymbol(new Lr(n,i,t,r))},e.prototype.visitNode=function(e){switch(e.type){case En.Keyframe:return this.addSymbol(e,e.getName(),null,In.Keyframe),!0;case En.CustomPropertyDeclaration:return this.visitCustomPropertyDeclarationNode(e);case En.VariableDeclaration:return this.visitVariableDeclarationNode(e);case En.Ruleset:return this.visitRuleSet(e);case En.MixinDeclaration:return this.addSymbol(e,e.getName(),null,In.Mixin),!0;case En.FunctionDeclaration:return this.addSymbol(e,e.getName(),null,In.Function),!0;case En.FunctionParameter:return this.visitFunctionParameterNode(e);case En.Declarations:return this.addScope(e),!0;case En.For:var t=e,n=t.getDeclarations();return n&&this.addSymbolToChildScope(n,t.variable,t.variable.getName(),null,In.Variable),!0;case En.Each:var i=e,r=i.getDeclarations();if(r)for(var o=0,s=i.getVariables().getChildren();o<s.length;o++){var a=s[o];this.addSymbolToChildScope(r,a,a.getName(),null,In.Variable)}return!0}return!0},e.prototype.visitRuleSet=function(e){for(var t=this.scope.findScope(e.offset,e.length),n=0,i=e.getSelectors().getChildren();n<i.length;n++){var r=i[n];r instanceof Vn&&1===r.getChildren().length&&t.addSymbol(new Lr(r.getChild(0).getText(),null,r,In.Rule))}return!0},e.prototype.visitVariableDeclarationNode=function(e){var t=e.getValue()?e.getValue().getText():null;return this.addSymbol(e,e.getName(),t,In.Variable),!0},e.prototype.visitFunctionParameterNode=function(e){var t=e.getParent().getDeclarations();if(t){var n=e.getDefaultValue(),i=n?n.getText():null;this.addSymbolToChildScope(t,e,e.getName(),i,In.Variable)}return!0},e.prototype.visitCustomPropertyDeclarationNode=function(e){var t=e.getValue()?e.getValue().getText():"";return this.addCSSVariable(e.getProperty(),e.getProperty().getName(),t,In.Variable),!0},e.prototype.addCSSVariable=function(e,t,n,i){-1!==e.offset&&this.getGlobalScope(e,t,i).addSymbol(new Lr(t,n,e,i))},e.prototype.getGlobalScope=function(e,t,n){for(var i=this.scope.findScope(e.offset,e.length);null!==i.parent;)i=i.parent;return i},e}(),zr=function(){function e(e){this.global=new Dr,e.acceptVisitor(new Rr(this.global))}return e.prototype.findSymbolsAtOffset=function(e,t){for(var n=this.global.findScope(e,0),i=[],r={};n;){for(var o=n.getSymbols(),s=0;s<o.length;s++){var a=o[s];a.type!==t||r[a.name]||(i.push(a),r[a.name]=!0)}n=n.parent}return i},e.prototype.internalFindSymbol=function(e,t){var n=e;if(e.parent instanceof Yn&&e.parent.getParent()instanceof Un&&(n=e.parent.getParent().getDeclarations()),e.parent instanceof Xn&&e.parent.getParent()instanceof Jn){var i=e.parent.getParent().getIdentifier();if(i){var r=this.internalFindSymbol(i,[In.Function]);r&&(n=r.node.getDeclarations())}}if(!n)return null;for(var o=e.getText(),s=this.global.findScope(n.offset,n.length);s;){for(var a=0;a<t.length;a++){var l=t[a],c=s.getSymbol(o,l);if(c)return c}s=s.parent}return null},e.prototype.evaluateReferenceTypes=function(e){if(e instanceof Rn){var t=e.referenceTypes;if(t)return t;if(e.isCustomProperty)return[In.Variable];var n=function(e){var t=e.findParent(En.Declaration);return t&&t.getValue()&&t.getValue().encloses(e)?t:null}(e);if(n){var i=n.getNonPrefixedPropertyName();if(("animation"===i||"animation-name"===i)&&n.getValue()&&n.getValue().offset===e.offset)return[In.Keyframe]}}else if(e instanceof Ei)return[In.Variable];return e.findParent(En.Selector)?[In.Rule]:e.findParent(En.ExtendsReference)?[In.Rule]:null},e.prototype.findSymbolFromNode=function(e){if(!e)return null;for(;e.type===En.Interpolation;)e=e.getParent();var t=this.evaluateReferenceTypes(e);return t?this.internalFindSymbol(e,t):null},e.prototype.matchesSymbol=function(e,t){if(!e)return null;for(;e.type===En.Interpolation;)e=e.getParent();if(t.name.length!==e.length||t.name!==e.getText())return!1;var n=this.evaluateReferenceTypes(e);return!(!n||-1===n.indexOf(t.type))&&this.internalFindSymbol(e,n)===t},e.prototype.findSymbol=function(e,t,n){for(var i=this.global.findScope(n);i;){var r=i.getSymbol(e,t);if(r)return r;i=i.parent}return null},e}();function Mr(e,t){if(e.length<t.length)return!1;for(var n=0;n<t.length;n++)if(e[n]!==t[n])return!1;return!0}function Ur(e,t,n){void 0===n&&(n=4);var i=Math.abs(e.length-t.length);if(i>n)return 0;var r,o,s=[],a=[];for(r=0;r<t.length+1;++r)a.push(0);for(r=0;r<e.length+1;++r)s.push(a);for(r=1;r<e.length+1;++r)for(o=1;o<t.length+1;++o)e[r-1]===t[o-1]?s[r][o]=s[r-1][o-1]+1:s[r][o]=Math.max(s[r-1][o],s[r][o-1]);return s[e.length][t.length]-Math.sqrt(i)}function jr(e,t){return void 0===t&&(t=!0),e?e.length<140?e:e.slice(0,140)+(t?"…":""):""}var Vr=Ri(),Br=gt.Snippet,Kr=function(){function e(e){void 0===e&&(e=null),this.completionParticipants=[],this.valueTypes=[En.Identifier,En.Value,En.StringLiteral,En.URILiteral,En.NumericValue,En.HexColorValue,En.VariableName,En.Prio],this.variablePrefix=e}return e.prototype.getSymbolContext=function(){return this.symbolContext||(this.symbolContext=new zr(this.styleSheet)),this.symbolContext},e.prototype.setCompletionParticipants=function(e){this.completionParticipants=e||[]},e.prototype.doComplete=function(e,t,n){this.offset=e.offsetAt(t),this.position=t,this.currentWord=function(e,t){var n=t-1,i=e.getText();for(;n>=0&&-1===' \t\n\r":{[()]},*>+'.indexOf(i.charAt(n));)n--;return i.substring(n+1,t)}(e,this.offset),this.defaultReplaceRange=nt.create(tt.create(this.position.line,this.position.character-this.currentWord.length),this.position),this.textDocument=e,this.styleSheet=n;try{var i={isIncomplete:!1,items:[]};this.nodePath=On(this.styleSheet,this.offset);for(var r=this.nodePath.length-1;r>=0;r--){var o=this.nodePath[r];if(o instanceof Hn)this.getCompletionsForDeclarationProperty(o.getParent(),i);else if(o instanceof vi)this.getCompletionsForExpression(o,i);else if(o instanceof Bn){var s=o.findParent(En.ExtendsReference);if(s)this.getCompletionsForExtendsReference(s,o,i);else{var a=o.findParent(En.Ruleset);this.getCompletionsForSelector(a,a&&a.isNested(),i)}}else o instanceof Xn?this.getCompletionsForFunctionArgument(o,o.getParent(),i):o instanceof Mn?this.getCompletionsForDeclarations(o,i):o instanceof _i?this.getCompletionsForVariableDeclaration(o,i):o instanceof jn?this.getCompletionsForRuleSet(o,i):o instanceof Fi?this.getCompletionsForInterpolation(o,i):o instanceof ii?this.getCompletionsForFunctionDeclaration(o,i):o instanceof Ai?this.getCompletionsForMixinReference(o,i):o instanceof Jn?this.getCompletionsForFunctionArgument(null,o,i):o instanceof ui?this.getCompletionsForSupports(o,i):o instanceof gi?this.getCompletionsForSupportsCondition(o,i):o instanceof Ii&&this.getCompletionsForExtendsReference(o,null,i);if(i.items.length>0)return this.finalize(i)}return this.getCompletionsForStylesheet(i),0===i.items.length&&this.variablePrefix&&0===this.currentWord.indexOf(this.variablePrefix)&&this.getVariableProposals(null,i),this.finalize(i)}finally{this.position=null,this.currentWord=null,this.textDocument=null,this.styleSheet=null,this.symbolContext=null,this.defaultReplaceRange=null,this.nodePath=null}},e.prototype.finalize=function(e){if(e.items.some(function(e){return!!e.sortText}))for(var t=0,n=e.items;t<n.length;t++){var i=n[t];i.sortText||(i.sortText="d")}return e},e.prototype.findInNodePath=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=this.nodePath.length-1;n>=0;n--){var i=this.nodePath[n];if(-1!==e.indexOf(i.type))return i}return null},e.prototype.getCompletionsForDeclarationProperty=function(e,t){return this.getPropertyProposals(e,t)},e.prototype.getPropertyProposals=function(e,t){var n=this,i=Cr();for(var r in i)if(i.hasOwnProperty(r)){var o=i[r];if(o.browsers.onCodeComplete){var s=void 0,a=void 0;e?(s=this.getCompletionRange(e.getProperty()),a=o.name+(Gr(e.colonPosition)?"":": ")):(s=this.getCompletionRange(null),a=o.name+": ");var l={label:o.name,documentation:gr(o),textEdit:at.replace(s,a),kind:ft.Property,command:{title:"Suggest",command:"editor.action.triggerSuggest"}};Mr(o.name,"-")&&(l.sortText="x"),t.items.push(l)}}return this.completionParticipants.forEach(function(e){e.onCssProperty({propertyName:n.currentWord,range:n.defaultReplaceRange})}),t},e.prototype.getCompletionsForDeclarationValue=function(e,t){for(var n=this,i=e.getFullPropertyName(),r=Cr()[i],o=e.getValue();o&&o.hasChildren();)o=o.findChildAtOffset(this.offset,!1);if(this.completionParticipants.forEach(function(e){e.onCssPropertyValue({propertyName:i,propertyValue:n.currentWord,range:n.getCompletionRange(o)})}),r){for(var s=0,a=r.restrictions;s<a.length;s++){switch(a[s]){case"color":this.getColorProposals(r,o,t);break;case"position":this.getPositionProposals(r,o,t);break;case"repeat":this.getRepeatStyleProposals(r,o,t);break;case"line-style":this.getLineStyleProposals(r,o,t);break;case"line-width":this.getLineWidthProposals(r,o,t);break;case"geometry-box":this.getGeometryBoxProposals(r,o,t);break;case"box":this.getBoxProposals(r,o,t);break;case"image":this.getImageProposals(r,o,t);break;case"timing-function":this.getTimingFunctionProposals(r,o,t);break;case"shape":this.getBasicShapeProposals(r,o,t)}}this.getValueEnumProposals(r,o,t),this.getCSSWideKeywordProposals(r,o,t),this.getUnitProposals(r,o,t)}else for(var l=0,c=function(e,t){var n=t.getFullPropertyName(),i=new qr;function r(e){return(e instanceof Rn||e instanceof Si||e instanceof Ci)&&i.add(e.getText()),!0}return e.accept(function(e){if(e instanceof Gn&&e!==t&&(o=e.getFullPropertyName(),n===o)){var i=e.getValue();i&&i.accept(r)}var o;return!0}),i}(this.styleSheet,e).getEntries();l<c.length;l++){var h=c[l];t.items.push({label:h,textEdit:at.replace(this.getCompletionRange(o),h),kind:ft.Value})}return this.getVariableProposals(o,t),this.getTermProposals(r,o,t),t},e.prototype.getValueEnumProposals=function(e,t,n){if(e.values)for(var i=0,r=e.values;i<r.length;i++){var o=r[i];if(fr(o)){var s=o.name,a=void 0;if(d=")",void 0,(u=(h=s).length-d.length)>0?h.lastIndexOf(d)===u:0===u&&h===d){var l=s.lastIndexOf("(");-1!==l&&(s=s.substr(0,l)+"($1)",a=Br)}var c={label:o.name,documentation:gr(o),textEdit:at.replace(this.getCompletionRange(t),s),kind:ft.Value,insertTextFormat:a};n.items.push(c)}}var h,d,u;return n},e.prototype.getCSSWideKeywordProposals=function(e,t,n){for(var i in Xi)n.items.push({label:i,documentation:Xi[i],textEdit:at.replace(this.getCompletionRange(t),i),kind:ft.Value});return n},e.prototype.getCompletionsForInterpolation=function(e,t){return this.offset>=e.offset+2&&this.getVariableProposals(null,t),t},e.prototype.getVariableProposals=function(e,t){for(var n=0,i=this.getSymbolContext().findSymbolsAtOffset(this.offset,In.Variable);n<i.length;n++){var r=i[n],o=Mr(r.name,"--")?"var("+r.name+")":r.name,s={label:r.name,documentation:r.value?jr(r.value):r.value,textEdit:at.replace(this.getCompletionRange(e),o),kind:ft.Variable,sortText:"z"};if(r.node.type===En.FunctionParameter){var a=r.node.getParent();a.type===En.MixinDeclaration&&(s.detail=Vr("completion.argument","argument from '{0}'",a.getName()))}t.items.push(s)}return t},e.prototype.getVariableProposalsForCSSVarFunction=function(e){for(var t=this.getSymbolContext().findSymbolsAtOffset(this.offset,In.Variable),n=0,i=t=t.filter(function(e){return Mr(e.name,"--")});n<i.length;n++){var r=i[n];e.items.push({label:r.name,documentation:r.value?jr(r.value):r.value,textEdit:at.replace(this.getCompletionRange(null),r.name),kind:ft.Variable})}return e},e.prototype.getUnitProposals=function(e,t,n){var i="0";if(this.currentWord.length>0){var r=this.currentWord.match(/^-?\d[\.\d+]*/);r&&(i=r[0],n.isIncomplete=i.length===this.currentWord.length)}else 0===this.currentWord.length&&(n.isIncomplete=!0);t&&t.parent&&t.parent.type===En.Term&&(t=t.getParent());for(var o=0,s=e.restrictions;o<s.length;o++){var a=s[o],l=nr[a];if(l)for(var c=0,h=l;c<h.length;c++){var d=i+h[c];n.items.push({label:d,textEdit:at.replace(this.getCompletionRange(t),d),kind:ft.Unit})}}return n},e.prototype.getCompletionRange=function(e){if(e&&e.offset<=this.offset){var t=-1!==e.end?this.textDocument.positionAt(e.end):this.position;return nt.create(this.textDocument.positionAt(e.offset),t)}return this.defaultReplaceRange},e.prototype.getColorProposals=function(e,t,n){for(var i in Ki)n.items.push({label:i,documentation:Ki[i],textEdit:at.replace(this.getCompletionRange(t),i),kind:ft.Color});for(var i in qi)n.items.push({label:i,documentation:qi[i],textEdit:at.replace(this.getCompletionRange(t),i),kind:ft.Value});var r=new qr;this.styleSheet.acceptVisitor(new $r(r));for(var o=0,s=r.getEntries();o<s.length;o++){i=s[o];n.items.push({label:i,textEdit:at.replace(this.getCompletionRange(t),i),kind:ft.Color})}for(var a=function(e){var i=1,r=e.func.replace(/\[?\$(\w+)\]?/g,function(e,t){return"${"+i+++":"+t+"}"});n.items.push({label:e.func.substr(0,e.func.indexOf("(")),detail:e.func,documentation:e.desc,textEdit:at.replace(l.getCompletionRange(t),r),insertTextFormat:Br,kind:ft.Function})},l=this,c=0,h=Qi;c<h.length;c++){a(h[c])}return n},e.prototype.getPositionProposals=function(e,t,n){for(var i in Wi)n.items.push({label:i,documentation:Wi[i],textEdit:at.replace(this.getCompletionRange(t),i),kind:ft.Value});return n},e.prototype.getRepeatStyleProposals=function(e,t,n){for(var i in $i)n.items.push({label:i,documentation:$i[i],textEdit:at.replace(this.getCompletionRange(t),i),kind:ft.Value});return n},e.prototype.getLineStyleProposals=function(e,t,n){for(var i in Gi)n.items.push({label:i,documentation:Gi[i],textEdit:at.replace(this.getCompletionRange(t),i),kind:ft.Value});return n},e.prototype.getLineWidthProposals=function(e,t,n){for(var i=0,r=Hi;i<r.length;i++){var o=r[i];n.items.push({label:o,textEdit:at.replace(this.getCompletionRange(t),o),kind:ft.Value})}return n},e.prototype.getGeometryBoxProposals=function(e,t,n){for(var i in Yi)n.items.push({label:i,documentation:Yi[i],textEdit:at.replace(this.getCompletionRange(t),i),kind:ft.Value});return n},e.prototype.getBoxProposals=function(e,t,n){for(var i in Ji)n.items.push({label:i,documentation:Ji[i],textEdit:at.replace(this.getCompletionRange(t),i),kind:ft.Value});return n},e.prototype.getImageProposals=function(e,t,n){for(var i in Zi){var r=Wr(i);n.items.push({label:i,documentation:Zi[i],textEdit:at.replace(this.getCompletionRange(t),r),kind:ft.Function,insertTextFormat:i!==r?Br:void 0})}return n},e.prototype.getTimingFunctionProposals=function(e,t,n){for(var i in er){var r=Wr(i);n.items.push({label:i,documentation:er[i],textEdit:at.replace(this.getCompletionRange(t),r),kind:ft.Function,insertTextFormat:i!==r?Br:void 0})}return n},e.prototype.getBasicShapeProposals=function(e,t,n){for(var i in tr){var r=Wr(i);n.items.push({label:i,documentation:tr[i],textEdit:at.replace(this.getCompletionRange(t),r),kind:ft.Function,insertTextFormat:i!==r?Br:void 0})}return n},e.prototype.getCompletionsForStylesheet=function(e){var t=this.styleSheet.findFirstChildBeforeOffset(this.offset);return t?t instanceof jn?this.getCompletionsForRuleSet(t,e):t instanceof ui?this.getCompletionsForSupports(t,e):e:this.getCompletionForTopLevel(e)},e.prototype.getCompletionForTopLevel=function(e){for(var t=0,n=function(){if(!Sr){Sr=[];for(var e=0,t=_r.length;e<t;e++){var n=_r[e];Sr.push(new xr(n))}}return Sr}();t<n.length;t++){var i=n[t];i.browsers.count>0&&e.items.push({label:i.name,textEdit:at.replace(this.getCompletionRange(null),i.name),documentation:gr(i),kind:ft.Keyword})}return this.getCompletionsForSelector(null,!1,e),e},e.prototype.getCompletionsForRuleSet=function(e,t){var n=e.getDeclarations();return n&&n.endsWith("}")&&this.offset>=n.end?this.getCompletionForTopLevel(t):!n||this.offset<=n.offset?this.getCompletionsForSelector(e,e.isNested(),t):(e.findParent(En.Ruleset),this.getCompletionsForDeclarations(e.getDeclarations(),t))},e.prototype.getCompletionsForSelector=function(e,t,n){var i=this,r=this.findInNodePath(En.PseudoSelector,En.IdentifierSelector,En.ClassSelector,En.ElementNameSelector);!r&&this.offset-this.currentWord.length>0&&":"===this.textDocument.getText()[this.offset-this.currentWord.length-1]&&(this.currentWord=":"+this.currentWord,this.defaultReplaceRange=nt.create(tt.create(this.position.line,this.position.character-this.currentWord.length),this.position));for(var o=0,s=function(){if(!Ir){Ir=[];for(var e=0,t=Ar.length;e<t;e++){var n=Ar[e];Ir.push(new xr(n))}}return Ir}();o<s.length;o++){if((m=s[o]).browsers.onCodeComplete){var a=Wr(m.name),l={label:m.name,textEdit:at.replace(this.getCompletionRange(r),a),documentation:gr(m),kind:ft.Function,insertTextFormat:m.name!==a?Br:void 0};Mr(m.name,":-")&&(l.sortText="x"),n.items.push(l)}}for(var c=0,h=function(){if(!Fr){Fr=[];for(var e=0,t=Er.length;e<t;e++){var n=Er[e];Fr.push(new xr(n))}}return Fr}();c<h.length;c++){if((m=h[c]).browsers.onCodeComplete){a=Wr(m.name),l={label:m.name,textEdit:at.replace(this.getCompletionRange(r),a),documentation:gr(m),kind:ft.Function,insertTextFormat:m.name!==a?Br:void 0};Mr(m.name,"::-")&&(l.sortText="x"),n.items.push(l)}}if(!t){for(var d=0,u=ir;d<u.length;d++){var m=u[d];n.items.push({label:m,textEdit:at.replace(this.getCompletionRange(r),m),kind:ft.Keyword})}for(var p=0,f=rr;p<f.length;p++){m=f[p];n.items.push({label:m,textEdit:at.replace(this.getCompletionRange(r),m),kind:ft.Keyword})}}var g={};g[this.currentWord]=!0;var b=this.styleSheet.getTextProvider();if(this.styleSheet.accept(function(e){if(e.type===En.SimpleSelector&&e.length>0){var t=b(e.offset,e.length);return"."!==t.charAt(0)||g[t]||(g[t]=!0,n.items.push({label:t,textEdit:at.replace(i.getCompletionRange(r),t),kind:ft.Keyword})),!1}return!0}),e&&e.isNested()){var y=e.getSelectors().findFirstChildBeforeOffset(this.offset);y&&0===e.getSelectors().getChildren().indexOf(y)&&this.getPropertyProposals(null,n)}return n},e.prototype.getCompletionsForDeclarations=function(e,t){if(!e||this.offset===e.offset)return t;var n=e.findFirstChildBeforeOffset(this.offset);if(!n)return this.getCompletionsForDeclarationProperty(null,t);if(n instanceof qn){var i=n;if(!Gr(i.colonPosition)||this.offset<=i.colonPosition)return this.getCompletionsForDeclarationProperty(i,t);if(Gr(i.semicolonPosition)&&i.semicolonPosition<this.offset)return this.offset===i.semicolonPosition+1?t:this.getCompletionsForDeclarationProperty(null,t);if(i instanceof Gn)return this.getCompletionsForDeclarationValue(i,t)}else n instanceof Ii&&this.getCompletionsForExtendsReference(n,null,t);return t},e.prototype.getCompletionsForVariableDeclaration=function(e,t){return this.offset>e.colonPosition&&this.getVariableProposals(e.getValue(),t),t},e.prototype.getCompletionsForExpression=function(e,t){if(e.getParent()instanceof Xn)return this.getCompletionsForFunctionArgument(e.getParent(),e.getParent().getParent(),t),t;var n=e.findParent(En.Declaration);if(!n)return this.getTermProposals(null,null,t),t;var i=e.findChildAtOffset(this.offset,!0);return i?i instanceof Si||i instanceof Rn?this.getCompletionsForDeclarationValue(n,t):t:this.getCompletionsForDeclarationValue(n,t)},e.prototype.getCompletionsForFunctionArgument=function(e,t,n){return"var"===t.getIdentifier().getText()&&(t.getArguments().hasChildren()&&t.getArguments().getChild(0)!==e||this.getVariableProposalsForCSSVarFunction(n)),n},e.prototype.getCompletionsForFunctionDeclaration=function(e,t){var n=e.getDeclarations();return n&&this.offset>n.offset&&this.offset<n.end&&this.getTermProposals(null,null,t),t},e.prototype.getCompletionsForMixinReference=function(e,t){for(var n=0,i=this.getSymbolContext().findSymbolsAtOffset(this.offset,In.Mixin);n<i.length;n++){var r=i[n];r.node instanceof Pi&&t.items.push(this.makeTermProposal(r,r.node.getParameters(),null))}return t},e.prototype.getTermProposals=function(e,t,n){for(var i=0,r=this.getSymbolContext().findSymbolsAtOffset(this.offset,In.Function);i<r.length;i++){var o=r[i];o.node instanceof ii&&n.items.push(this.makeTermProposal(o,o.node.getParameters(),t))}return n},e.prototype.makeTermProposal=function(e,t,n){e.node;var i=t.getChildren().map(function(e){return e instanceof Yn?e.getName():e.getText()}),r=e.name+"("+i.map(function(e,t){return"${"+(t+1)+":"+e+"}"}).join(", ")+")";return{label:e.name,detail:e.name+"("+i.join(", ")+")",textEdit:at.replace(this.getCompletionRange(n),r),insertTextFormat:Br,kind:ft.Function,sortText:"z"}},e.prototype.getCompletionsForSupportsCondition=function(e,t){var n=e.findFirstChildBeforeOffset(this.offset);if(n){if(n instanceof Gn)return Gr(n.colonPosition||this.offset<=n.colonPosition)?this.getCompletionsForDeclarationValue(n,t):this.getCompletionsForDeclarationProperty(n,t);if(n instanceof gi)return this.getCompletionsForSupportsCondition(n,t)}return Gr(e.lParent)&&this.offset>e.lParent&&(!Gr(e.rParent)||this.offset<=e.rParent)?this.getCompletionsForDeclarationProperty(null,t):t},e.prototype.getCompletionsForSupports=function(e,t){var n=e.getDeclarations();if(!n||this.offset<=n.offset){var i=e.findFirstChildBeforeOffset(this.offset);return i instanceof gi?this.getCompletionsForSupportsCondition(i,t):t}return this.getCompletionForTopLevel(t)},e.prototype.getCompletionsForExtendsReference=function(e,t,n){return n},e}(),qr=function(){function e(){this.entries={}}return e.prototype.add=function(e){this.entries[e]=!0},e.prototype.getEntries=function(){return Object.keys(this.entries)},e}();function Wr(e){return e.replace(/\(\)$/,"($1)")}var $r=function(){function e(e){this.entries=e}return e.prototype.visitNode=function(e){return(e instanceof Ci||e instanceof Jn&&function(e){var t=e.getName();return!!t&&/^(rgb|rgba|hsl|hsla)$/gi.test(t)}(e))&&this.entries.add(e.getText()),!0},e}();function Gr(e){return void 0!==e}var Hr,Jr=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Yr=function(){function e(){}return e.prototype.findAttribute=function(e){if(this.attributes)for(var t=0,n=this.attributes;t<n.length;t++){var i=n[t];if(i.name===e)return i.value}return null},e.prototype.addChild=function(t){t instanceof e&&(t.parent=this),this.children||(this.children=[]),this.children.push(t)},e.prototype.append=function(e){if(this.attributes){var t=this.attributes[this.attributes.length-1];t.value=t.value+e}},e.prototype.prepend=function(e){if(this.attributes){var t=this.attributes[0];t.value=e+t.value}},e.prototype.findRoot=function(){for(var e=this;e.parent&&!(e.parent instanceof Xr);)e=e.parent;return e},e.prototype.removeChild=function(e){if(this.children){var t=this.children.indexOf(e);if(-1!==t)return this.children.splice(t,1),!0}return!1},e.prototype.addAttr=function(e,t){this.attributes||(this.attributes=[]);for(var n=0,i=this.attributes;n<i.length;n++){var r=i[n];if(r.name===e)return void(r.value+=" "+t)}this.attributes.push({name:e,value:t})},e.prototype.clone=function(t){void 0===t&&(t=!0);var n=new e;if(this.attributes){n.attributes=[];for(var i=0,r=this.attributes;i<r.length;i++){var o=r[i];n.addAttr(o.name,o.value)}}if(t&&this.children){n.children=[];for(var s=0;s<this.children.length;s++)n.addChild(this.children[s].clone())}return n},e.prototype.cloneWithParent=function(){var e=this.clone(!1);!this.parent||this.parent instanceof Xr||this.parent.cloneWithParent().addChild(e);return e},e}(),Xr=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Jr(t,e),t}(Yr),Qr=function(e){function t(t){var n=e.call(this)||this;return n.addAttr("name",t),n}return Jr(t,e),t}(Yr),Zr=function(){function e(e){this.quote=e}return e.prototype.print=function(e){return this.result=[],e instanceof Xr?this.doPrint(e.children,0):this.doPrint([e],0),[{language:"html",value:this.result.join("\n")}]},e.prototype.doPrint=function(e,t){for(var n=0,i=e;n<i.length;n++){var r=i[n];this.doPrintElement(r,t),r.children&&this.doPrint(r.children,t+1)}},e.prototype.writeLine=function(e,t){var n=new Array(e+1).join("  ");this.result.push(n+t)},e.prototype.doPrintElement=function(e,t){var n=e.findAttribute("name");if(e instanceof Qr||"…"===n)this.writeLine(t,n);else{var i=["<"];if(n?i.push(n):i.push("element"),e.attributes)for(var r=0,o=e.attributes;r<o.length;r++){var s=o[r];if("name"!==s.name){i.push(" "),i.push(s.name);var a=s.value;a&&(i.push("="),i.push(Hr.ensure(a,this.quote)))}}i.push(">"),this.writeLine(t,i.join(""))}},e}();function eo(e,t){for(var n=new Yr,i=0,r=e.getChildren();i<r.length;i++){var o=r[i];switch(o.type){case En.SelectorCombinator:if(t){var s=o.getText().split("&");if(1===s.length){n.addAttr("name",s[0]);break}if(n=t.cloneWithParent(),s[0])n.findRoot().prepend(s[0]);for(var a=1;a<s.length;a++){if(a>1){var l=t.cloneWithParent();n.addChild(l.findRoot()),n=l}n.append(s[a])}}break;case En.SelectorPlaceholder:if("@at-root"===o.getText())return n;case En.ElementNameSelector:var c=o.getText();n.addAttr("name","*"===c?"element":to(c));break;case En.ClassSelector:n.addAttr("class",to(o.getText().substring(1)));break;case En.IdentifierSelector:n.addAttr("id",to(o.getText().substring(1)));break;case En.MixinDeclaration:n.addAttr("class",o.getName());break;case En.PseudoSelector:n.addAttr(to(o.getText()),"");break;case En.AttributeSelector:var h=o.getExpression();if(h){var d=void 0;if(h.getRight())switch(to(h.getOperator().getText())){case"|=":d=Hr.remove(to(h.getRight().getText()))+"-…";break;case"^=":d=Hr.remove(to(h.getRight().getText()))+"…";break;case"$=":d="…"+Hr.remove(to(h.getRight().getText()));break;case"~=":d=" … "+Hr.remove(to(h.getRight().getText()))+" … ";break;case"*=":d="…"+Hr.remove(to(h.getRight().getText()))+"…";break;default:d=Hr.remove(to(h.getRight().getText()))}n.addAttr(to(h.getLeft().getText()),d)}}}return n}function to(e){var t=new An;t.setSource(e);var n=t.scanUnquotedString();return n?n.text:e}function no(e){var t=function(e){if(e.matches("@at-root"))return null;var t=new Xr,n=[];if(e.getParent()instanceof jn)for(var i=e.getParent().getParent();i&&!oo(i);){if(i instanceof jn){if(i.getSelectors().matches("@at-root"))break;n.push(i)}i=i.getParent()}for(var r=new ro(t),o=n.length-1;o>=0;o--){var s=n[o].getSelectors().getChild(0);s&&r.processSelector(s)}return r.processSelector(e),t}(e);return new Zr('"').print(t)}function io(e){var t=eo(e);return new Zr('"').print(t)}!function(e){function t(e){var t=e.match(/^['"](.*)["']$/);return t?t[1]:e}e.ensure=function(e,n){return n+t(e)+n},e.remove=t}(Hr||(Hr={}));var ro=function(){function e(e){this.prev=null,this.element=e}return e.prototype.processSelector=function(e){var t=null;if(!(this.element instanceof Xr)&&e.getChildren().some(function(e){return e.hasChildren()&&e.getChild(0).type===En.SelectorCombinator})){var n=this.element.findRoot();n.parent instanceof Xr&&(t=this.element,this.element=n.parent,this.element.removeChild(n),this.prev=null)}for(var i=0,r=e.getChildren();i<r.length;i++){var o=r[i];if(o instanceof Bn){if(this.prev instanceof Bn){var s=new Qr("…");this.element.addChild(s),this.element=s}else this.prev&&(this.prev.matches("+")||this.prev.matches("~"))&&(this.element=this.element.parent);this.prev&&this.prev.matches("~")&&(this.element.addChild(eo(o)),this.element.addChild(new Qr("⋮")));var a=eo(o,t),l=a.findRoot();this.element.addChild(l),this.element=a}(o instanceof Bn||o.type===En.SelectorCombinatorParent||o.type===En.SelectorCombinatorShadowPiercingDescendant||o.type===En.SelectorCombinatorSibling||o.type===En.SelectorCombinatorAllSiblings)&&(this.prev=o)}},e}();function oo(e){switch(e.type){case En.MixinDeclaration:case En.Stylesheet:return!0}return!1}var so=function(){function e(){}return e.prototype.doHover=function(e,t,n){function i(t){return nt.create(e.positionAt(t.offset),e.positionAt(t.end))}for(var r=On(n,e.offsetAt(t)),o=0;o<r.length;o++){var s=r[o];if(s instanceof Vn)return{contents:no(s),range:i(s)};if(s instanceof Bn)return{contents:io(s),range:i(s)};if(s instanceof Gn){var a=s.getFullPropertyName(),l=Cr()[a];if(l){var c=[];l.description&&c.push(vt.fromPlainText(l.description));var h=br(l.browsers);if(h&&c.push(vt.fromPlainText(h)),c.length)return{contents:c,range:i(s)}}}}return null},e}(),ao=Ri(),lo=function(){function e(){}return e.prototype.findDefinition=function(e,t,n){var i=new zr(n),r=Tn(n,e.offsetAt(t));if(!r)return null;var o=i.findSymbolFromNode(r);return o?{uri:e.uri,range:co(o.node,e)}:null},e.prototype.findReferences=function(e,t,n){return this.findDocumentHighlights(e,t,n).map(function(t){return{uri:e.uri,range:t.range}})},e.prototype.findDocumentHighlights=function(e,t,n){var i=[],r=Tn(n,e.offsetAt(t));if(!r||r.type===En.Stylesheet||r.type===En.Declarations)return i;var o=new zr(n),s=o.findSymbolFromNode(r),a=r.getText();return n.accept(function(t){if(s){if(o.matchesSymbol(t,s))return i.push({kind:ho(t),range:co(t,e)}),!1}else r.type===t.type&&r.length===t.length&&a===t.getText()&&i.push({kind:ho(t),range:co(t,e)});return!0}),i},e.prototype.findDocumentSymbols=function(e,t){var n=[];return t.accept(function(t){var i={name:null,kind:St.Class,location:null},r=t;return t instanceof Vn?(i.name=t.getText(),r=t.findParent(En.Ruleset)):t instanceof _i?(i.name=t.getName(),i.kind=St.Variable):t instanceof Pi?(i.name=t.getName(),i.kind=St.Method):t instanceof ii?(i.name=t.getName(),i.kind=St.Function):t instanceof ai?i.name=ao("literal.keyframes","@keyframes {0}",t.getName()):t instanceof oi&&(i.name=ao("literal.fontface","@font-face")),i.name&&(i.location=it.create(e.uri,co(r,e)),n.push(i)),!0}),n},e.prototype.findDocumentColors=function(e,t){var n=[];return t.accept(function(t){var i=function(e,t){var n=ur(e);if(n){var i=co(e,t);return{color:n,range:i}}return null}(t,e);return i&&n.push(i),!0}),n},e.prototype.getColorPresentations=function(e,t,n,i){var r,o=[],s=Math.round(255*n.red),a=Math.round(255*n.green),l=Math.round(255*n.blue);r=1===n.alpha?"rgb("+s+", "+a+", "+l+")":"rgba("+s+", "+a+", "+l+", "+n.alpha+")",o.push({label:r,textEdit:at.replace(i,r)}),r=1===n.alpha?"#"+uo(s)+uo(a)+uo(l):"#"+uo(s)+uo(a)+uo(l)+uo(Math.round(255*n.alpha)),o.push({label:r,textEdit:at.replace(i,r)});var c=function(e){var t=e.red,n=e.green,i=e.blue,r=e.alpha,o=Math.max(t,n,i),s=Math.min(t,n,i),a=0,l=0,c=(s+o)/2,h=o-s;if(h>0){switch(l=Math.min(c<=.5?h/(2*c):h/(2-2*c),1),o){case t:a=(n-i)/h+(n<i?6:0);break;case n:a=(i-t)/h+2;break;case i:a=(t-n)/h+4}a*=60,a=Math.round(a)}return{h:a,s:l,l:c,a:r}}(n);return r=1===c.a?"hsl("+c.h+", "+Math.round(100*c.s)+"%, "+Math.round(100*c.l)+"%)":"hsla("+c.h+", "+Math.round(100*c.s)+"%, "+Math.round(100*c.l)+"%, "+c.a+")",o.push({label:r,textEdit:at.replace(i,r)}),o},e.prototype.doRename=function(e,t,n,i){var r,o=this.findDocumentHighlights(e,t,i).map(function(e){return at.replace(e.range,n)});return{changes:(r={},r[e.uri]=o,r)}},e}();function co(e,t){return nt.create(t.positionAt(e.offset),t.positionAt(e.end))}function ho(e){if(e.type===En.Selector)return kt.Write;if(e instanceof Rn&&e.parent&&e.parent instanceof Hn&&e.isCustomProperty)return kt.Write;if(e.parent)switch(e.parent.type){case En.FunctionDeclaration:case En.MixinDeclaration:case En.Keyframe:case En.VariableDeclaration:case En.FunctionParameter:return kt.Write}return kt.Read}function uo(e){var t=e.toString(16);return 2!==t.length?"0"+t:t}var mo=Ri(),po=Nn.Warning,fo=Nn.Error,go=Nn.Ignore,bo=function(){return function(e,t,n){this.id=e,this.message=t,this.defaultValue=n}}(),yo={AllVendorPrefixes:new bo("compatibleVendorPrefixes",mo("rule.vendorprefixes.all","When using a vendor-specific prefix make sure to also include all other vendor-specific properties"),go),IncludeStandardPropertyWhenUsingVendorPrefix:new bo("vendorPrefix",mo("rule.standardvendorprefix.all","When using a vendor-specific prefix also include the standard property"),po),DuplicateDeclarations:new bo("duplicateProperties",mo("rule.duplicateDeclarations","Do not use duplicate style definitions"),go),EmptyRuleSet:new bo("emptyRules",mo("rule.emptyRuleSets","Do not use empty rulesets"),po),ImportStatemement:new bo("importStatement",mo("rule.importDirective","Import statements do not load in parallel"),go),BewareOfBoxModelSize:new bo("boxModel",mo("rule.bewareOfBoxModelSize","Do not use width or height when using padding or border"),go),UniversalSelector:new bo("universalSelector",mo("rule.universalSelector","The universal selector (*) is known to be slow"),go),ZeroWithUnit:new bo("zeroUnits",mo("rule.zeroWidthUnit","No unit for zero needed"),go),RequiredPropertiesForFontFace:new bo("fontFaceProperties",mo("rule.fontFaceProperties","@font-face rule must define 'src' and 'font-family' properties"),po),HexColorLength:new bo("hexColorLength",mo("rule.hexColor","Hex colors must consist of three, four, six or eight hex numbers"),fo),ArgsInColorFunction:new bo("argumentsInColorFunction",mo("rule.colorFunction","Invalid number of parameters"),fo),UnknownProperty:new bo("unknownProperties",mo("rule.unknownProperty","Unknown property."),po),IEStarHack:new bo("ieHack",mo("rule.ieHack","IE hacks are only necessary when supporting IE7 and older"),go),UnknownVendorSpecificProperty:new bo("unknownVendorSpecificProperties",mo("rule.unknownVendorSpecificProperty","Unknown vendor specific property."),go),PropertyIgnoredDueToDisplay:new bo("propertyIgnoredDueToDisplay",mo("rule.propertyIgnoredDueToDisplay","Property is ignored due to the display."),po),AvoidImportant:new bo("important",mo("rule.avoidImportant","Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."),go),AvoidFloat:new bo("float",mo("rule.avoidFloat","Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."),go),AvoidIdSelector:new bo("idSelector",mo("rule.avoidIdSelector","Selectors should not contain IDs because these rules are too tightly coupled with the HTML."),go)},vo=function(){function e(e){void 0===e&&(e={}),this.conf=e}return e.prototype.get=function(e){if(this.conf.hasOwnProperty(e.id)){var t=function(e){switch(e){case"ignore":return Nn.Ignore;case"warning":return Nn.Warning;case"error":return Nn.Error}return null}(this.conf[e.id]);if(t)return t}return e.defaultValue},e}();var wo=Ri(),xo=function(){function e(){}return e.prototype.doCodeActions=function(e,t,n,i){var r=[];if(n.diagnostics)for(var o=0,s=n.diagnostics;o<s.length;o++){var a=s[o];this.appendFixesForMarker(e,i,a,r)}return r},e.prototype.getFixesForUnknownProperty=function(e,t,n,i){var r=t.getName(),o=[];for(var s in Cr()){var a=Ur(r,s);a>=r.length/2&&o.push({property:s,score:a})}o.sort(function(e,t){return t.score-e.score});for(var l=3,c=0,h=o;c<h.length;c++){var d=h[c].property,u=wo("css.codeaction.rename","Rename to '{0}'",d),m=at.replace(n.range,d);if(i.push(st.create(u,"_css.applyCodeAction",e.uri,e.version,[m])),--l<=0)return}},e.prototype.appendFixesForMarker=function(e,t,n,i){if(n.code===yo.UnknownProperty.id)for(var r=e.offsetAt(n.range.start),o=e.offsetAt(n.range.end),s=On(t,r),a=s.length-1;a>=0;a--){var l=s[a];if(l instanceof Gn){var c=l.getProperty();if(c&&c.offset===r&&c.end===o)return void this.getFixesForUnknownProperty(e,c,n,i)}}},e}(),ko=Ri(),Co=function(){return function(e,t){this.name=e,this.node=t}}(),So=function(){function e(){this.data={}}return e.prototype.add=function(e,t,n){var i=this.data[e];i||(i={nodes:[],names:[]},this.data[e]=i),i.names.push(t),n&&i.nodes.push(n)},e}(),_o=function(){function e(e,t){this.warnings=[],this.settings=t,this.documentText=e.getText(),this.keyframes=new So}return e.entries=function(t,n,i,r){var o=new e(n,i);return t.acceptVisitor(o),o.completeValidations(),o.getEntries(r)},e.prototype.fetch=function(e,t){for(var n=[],i=0,r=e;i<r.length;i++){var o=r[i];o.name===t&&n.push(o)}return n},e.prototype.fetchWithValue=function(e,t,n){for(var i=[],r=0,o=e;r<o.length;r++){var s=o[r];if(s.name===t){var a=s.node.getValue();a&&this.findValueInExpression(a,n)&&i.push(s)}}return i},e.prototype.findValueInExpression=function(e,t){var n=!1;return e.accept(function(e){return e.type===En.Identifier&&e.getText()===t&&(n=!0),!n}),n},e.prototype.getEntries=function(e){return void 0===e&&(e=Nn.Warning|Nn.Error),this.warnings.filter(function(t){return 0!=(t.getLevel()&e)})},e.prototype.addEntry=function(e,t,n){var i=new Ni(e,t,this.settings.get(t),n);this.warnings.push(i)},e.prototype.getMissingNames=function(e,t){e=e.slice(0);for(var n=0;n<t.length;n++){var i=e.indexOf(t[n]);-1!==i&&(e[i]=null)}var r=null;for(n=0;n<e.length;n++){var o=e[n];o&&(r=null===r?ko("namelist.single","'{0}'",o):ko("namelist.concatenated","{0}, '{1}'",r,o))}return r},e.prototype.visitNode=function(e){switch(e.type){case En.Keyframe:return this.visitKeyframe(e);case En.FontFace:return this.visitFontFace(e);case En.Ruleset:return this.visitRuleSet(e);case En.SimpleSelector:return this.visitSimpleSelector(e);case En.Function:return this.visitFunction(e);case En.NumericValue:return this.visitNumericValue(e);case En.Import:return this.visitImport(e);case En.HexColorValue:return this.visitHexColorValue(e);case En.Prio:return this.visitPrio(e)}return!0},e.prototype.completeValidations=function(){this.validateKeyframes()},e.prototype.visitKeyframe=function(e){var t=e.getKeyword(),n=t.getText();return this.keyframes.add(e.getName(),n,"@keyframes"!==n?t:null),!0},e.prototype.validateKeyframes=function(){var e=["@-webkit-keyframes","@-moz-keyframes","@-o-keyframes"];for(var t in this.keyframes.data){var n=this.keyframes.data[t].names,i=-1===n.indexOf("@keyframes");if(i||1!==n.length){var r=this.getMissingNames(e,n);if(r||i)for(var o=0,s=this.keyframes.data[t].nodes;o<s.length;o++){var a=s[o];if(i){var l=ko("keyframes.standardrule.missing","Always define standard rule '@keyframes' when defining keyframes.");this.addEntry(a,yo.IncludeStandardPropertyWhenUsingVendorPrefix,l)}if(r){l=ko("keyframes.vendorspecific.missing","Always include all vendor specific rules: Missing: {0}",r);this.addEntry(a,yo.AllVendorPrefixes,l)}}}}return!0},e.prototype.visitSimpleSelector=function(e){var t=this.documentText.charAt(e.offset);return 1===e.length&&"*"===t&&this.addEntry(e,yo.UniversalSelector),"#"===t&&this.addEntry(e,yo.AvoidIdSelector),!0},e.prototype.visitImport=function(e){return this.addEntry(e,yo.ImportStatemement),!0},e.prototype.visitRuleSet=function(t){var n=t.getDeclarations();if(!n)return!1;n.hasChildren()||this.addEntry(t.getSelectors(),yo.EmptyRuleSet);for(var i=[],r=0,o=n.getChildren();r<o.length;r++){if((R=o[r])instanceof Gn){var s=R;i.push(new Co(s.getFullPropertyName().toLowerCase(),s))}}if(0===this.fetch(i,"box-sizing").length){var a=this.fetch(i,"width");if(a.length>0){for(var l=!1,c=0,h=["border","border-left","border-right","padding","padding-left","padding-right"];c<h.length;c++)for(var d=h[c],u=0,m=this.fetch(i,d);u<m.length;u++){(O=(R=m[u]).node.getValue())&&!O.matches("none")&&(this.addEntry(R.node,yo.BewareOfBoxModelSize),l=!0)}if(l)for(var p=0,f=a;p<f.length;p++){var g=f[p];this.addEntry(g.node,yo.BewareOfBoxModelSize)}}var b=this.fetch(i,"height");if(b.length>0){l=!1;for(var y=0,v=["border","border-top","border-bottom","padding","padding-top","padding-bottom"];y<v.length;y++){d=v[y];for(var w=0,x=this.fetch(i,d);w<x.length;w++){(O=(R=x[w]).node.getValue())&&!O.matches("none")&&(this.addEntry(R.node,yo.BewareOfBoxModelSize),l=!0)}}if(l)for(var k=0,C=b;k<C.length;k++){var S=C[k];this.addEntry(S.node,yo.BewareOfBoxModelSize)}}}var _=this.fetchWithValue(i,"display","inline");if(_.length>0)for(var F=0,E=["width","height","margin-top","margin-bottom","float"];F<E.length;F++)for(var I=E[F],A=this.fetch(i,I),P=0;P<A.length;P++){var T=A[P].node,O=T.getValue();("float"!==I||O&&!O.matches("none"))&&this.addEntry(T,yo.PropertyIgnoredDueToDisplay,ko("rule.propertyIgnoredDueToDisplayInline","Property is ignored due to the display. With 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect."))}if((_=this.fetchWithValue(i,"display","inline-block")).length>0)for(A=this.fetch(i,"float"),P=0;P<A.length;P++){var N=A[P].node;(O=N.getValue())&&!O.matches("none")&&this.addEntry(N,yo.PropertyIgnoredDueToDisplay,ko("rule.propertyIgnoredDueToDisplayInlineBlock","inline-block is ignored due to the float. If 'float' has a value other than 'none', the box is floated and 'display' is treated as 'block'"))}if((_=this.fetchWithValue(i,"display","block")).length>0)for(A=this.fetch(i,"vertical-align"),P=0;P<A.length;P++)this.addEntry(A[P].node,yo.PropertyIgnoredDueToDisplay,ko("rule.propertyIgnoredDueToDisplayBlock","Property is ignored due to the display. With 'display: block', vertical-align should not be used."));var D=this.fetch(i,"float");for(P=0;P<D.length;P++)this.addEntry(D[P].node,yo.AvoidFloat);for(var L=0;L<i.length;L++){var R;if("background"!==(R=i[L]).name)if((O=R.node.getValue())&&"-"!==this.documentText.charAt(O.offset)){var z=this.fetch(i,R.name);if(z.length>1)for(var M=0;M<z.length;M++){var U=z[M].node.getValue();U&&"-"!==this.documentText.charAt(U.offset)&&z[M]!==R&&this.addEntry(R.node,yo.DuplicateDeclarations)}}}for(var j=new So,V=!1,B=0,K=n.getChildren();B<K.length;B++){var q=K[B];if(this.isCSSDeclaration(q)){var W=(s=q).getFullPropertyName(),$=W.charAt(0);if("-"===$){if("-"!==W.charAt(1)){pr(W)||this.addEntry(s.getProperty(),yo.UnknownVendorSpecificProperty);var G=s.getNonPrefixedPropertyName();j.add(G,W,s.getProperty())}}else"*"!==$&&"_"!==$||(this.addEntry(s.getProperty(),yo.IEStarHack),W=W.substr(1)),pr(W)||this.addEntry(s.getProperty(),yo.UnknownProperty,ko("property.unknownproperty.detailed","Unknown property: '{0}'",W)),j.add(W,W,null)}else V=!0}if(!V)for(var H in j.data){var J=j.data[H],Y=J.names,X=pr(H)&&-1===Y.indexOf(H);if(X||1!==Y.length){for(var Q=[],Z=(L=0,e.prefixes.length);L<Z;L++){var ee=e.prefixes[L];pr(ee+H)&&Q.push(ee+H)}var te=this.getMissingNames(Q,Y);if(te||X)for(var ne=0,ie=J.nodes;ne<ie.length;ne++){var re=ie[ne];if(X){var oe=ko("property.standard.missing","Also define the standard property '{0}' for compatibility",H);this.addEntry(re,yo.IncludeStandardPropertyWhenUsingVendorPrefix,oe)}if(te){oe=ko("property.vendorspecific.missing","Always include all vendor specific properties: Missing: {0}",te);this.addEntry(re,yo.AllVendorPrefixes,oe)}}}}return!0},e.prototype.visitPrio=function(e){return this.addEntry(e,yo.AvoidImportant),!0},e.prototype.visitNumericValue=function(e){var t=e.getValue();return!t.unit||-1===nr.length.indexOf(t.unit.toLowerCase())||(0===parseFloat(t.value)&&t.unit&&this.addEntry(e,yo.ZeroWithUnit),!0)},e.prototype.visitFontFace=function(e){var t=e.getDeclarations();if(t){for(var n=!1,i=!1,r=!1,o=0,s=t.getChildren();o<s.length;o++){var a=s[o];if(this.isCSSDeclaration(a)){var l=a.getProperty().getName().toLowerCase();"src"===l&&(n=!0),"font-family"===l&&(i=!0)}else r=!0}return r||n&&i||this.addEntry(e,yo.RequiredPropertiesForFontFace),!0}},e.prototype.isCSSDeclaration=function(e){if(e instanceof Gn){if(!e.getValue())return!1;var t=e.getProperty();return!(!t||t.getIdentifier().containsInterpolation())}return!1},e.prototype.visitHexColorValue=function(e){var t=e.length;return 9!==t&&7!==t&&5!==t&&4!==t&&this.addEntry(e,yo.HexColorLength),!1},e.prototype.visitFunction=function(e){var t=-1,n=0;switch(e.getName().toLowerCase()){case"rgb(":case"hsl(":t=3;break;case"rgba(":case"hsla(":t=4}return-1!==t&&(e.getArguments().accept(function(e){return!(e instanceof wi)||(n+=1,!1)}),n!==t&&this.addEntry(e,yo.ArgsInColorFunction)),!0},e.prefixes=["-ms-","-moz-","-o-","-webkit-"],e}(),Fo=function(){function e(){}return e.prototype.configure=function(e){this.settings=e},e.prototype.doValidation=function(e,t,n){if(void 0===n&&(n=this.settings),n&&!1===n.validate)return[];var i=[];return i.push.apply(i,Di.entries(t)),i.push.apply(i,_o.entries(t,e,new vo(n&&n.lint))),i.filter(function(e){return e.getLevel()!==Nn.Ignore}).map(function(t){var n=nt.create(e.positionAt(t.getOffset()),e.positionAt(t.getOffset()+t.getLength()));return{code:t.getRule().id,source:e.languageId,message:t.getMessage(),severity:t.getLevel()===Nn.Warning?rt.Warning:rt.Error,range:n}})},e}(),Eo=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Io="/".charCodeAt(0),Ao="\n".charCodeAt(0),Po="\r".charCodeAt(0),To="\f".charCodeAt(0),Oo="$".charCodeAt(0),No="#".charCodeAt(0),Do="{".charCodeAt(0),Lo="=".charCodeAt(0),Ro="!".charCodeAt(0),zo="<".charCodeAt(0),Mo=">".charCodeAt(0),Uo=".".charCodeAt(0),jo=Dt.CustomToken,Vo=jo++,Bo=jo++,Ko=(jo++,jo++),qo=jo++,Wo=jo++,$o=jo++,Go=jo++,Ho=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Eo(t,e),t.prototype.scanNext=function(t){if(this.stream.advanceIfChar(Oo)){var n=["$"];if(this.ident(n))return this.finishToken(t,Vo,n.join(""));this.stream.goBackTo(t)}return this.stream.advanceIfChars([No,Do])?this.finishToken(t,Bo):this.stream.advanceIfChars([Lo,Lo])?this.finishToken(t,Ko):this.stream.advanceIfChars([Ro,Lo])?this.finishToken(t,qo):this.stream.advanceIfChar(zo)?this.stream.advanceIfChar(Lo)?this.finishToken(t,$o):this.finishToken(t,Dt.Delim):this.stream.advanceIfChar(Mo)?this.stream.advanceIfChar(Lo)?this.finishToken(t,Wo):this.finishToken(t,Dt.Delim):this.stream.advanceIfChars([Uo,Uo,Uo])?this.finishToken(t,Go):e.prototype.scanNext.call(this,t)},t.prototype.comment=function(){return!!e.prototype.comment.call(this)||!(this.inURL||!this.stream.advanceIfChars([Io,Io]))&&(this.stream.advanceWhileChar(function(e){switch(e){case Ao:case Po:case To:return!1;default:return!0}}),!0)},t}(An),Jo=Ri(),Yo=function(){return function(e,t){this.id=e,this.message=t}}(),Xo={FromExpected:new Yo("scss-fromexpected",Jo("expected.from","'from' expected")),ThroughOrToExpected:new Yo("scss-throughexpected",Jo("expected.through","'through' or 'to' expected")),InExpected:new Yo("scss-fromexpected",Jo("expected.in","'in' expected"))},Qo=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Zo=function(e){function t(){return e.call(this,new Ho)||this}return Qo(t,e),t.prototype._parseStylesheetStatement=function(){var t=e.prototype._parseStylesheetStatement.call(this);return t||(this.peek(Dt.AtKeyword)?this._parseWarnAndDebug()||this._parseControlStatement()||this._parseMixinDeclaration()||this._parseMixinContent()||this._parseMixinReference()||this._parseFunctionDeclaration():this._parseVariableDeclaration())},t.prototype._parseImport=function(){if(!this.peekKeyword("@import"))return null;var e=this.create(ci);if(this.consumeToken(),!e.addChild(this._parseURILiteral())&&!e.addChild(this._parseStringLiteral()))return this.finish(e,Ui.URIOrStringExpected);for(;this.accept(Dt.Comma);)if(!e.addChild(this._parseURILiteral())&&!e.addChild(this._parseStringLiteral()))return this.finish(e,Ui.URIOrStringExpected);return this.peek(Dt.SemiColon)||this.peek(Dt.EOF)||e.setMedialist(this._parseMediaQueryList()),this.finish(e)},t.prototype._parseVariableDeclaration=function(e){if(void 0===e&&(e=[]),!this.peek(Vo))return null;var t=this.create(_i);if(!t.setVariable(this._parseVariable()))return null;if(!this.accept(Dt.Colon))return this.finish(t,Ui.ColonExpected);if(t.colonPosition=this.prevToken.offset,!t.setValue(this._parseExpr()))return this.finish(t,Ui.VariableValueExpected,[],e);for(;this.accept(Dt.Exclamation);){if(!this.peekRegExp(Dt.Ident,/^(default|global)$/))return this.finish(t,Ui.UnknownKeyword);this.consumeToken()}return this.peek(Dt.SemiColon)&&(t.semicolonPosition=this.token.offset),this.finish(t)},t.prototype._parseMediaFeatureName=function(){return this._parseFunction()||this._parseIdent()||this._parseVariable()},t.prototype._parseKeyframeSelector=function(){return this._tryParseKeyframeSelector()||this._parseControlStatement(this._parseKeyframeSelector.bind(this))||this._parseMixinContent()},t.prototype._parseVariable=function(){if(!this.peek(Vo))return null;var e=this.create(Ei);return this.consumeToken(),e},t.prototype._parseIdent=function(e){var t=this;if(!this.peek(Dt.Ident)&&!this.peek(Bo)&&!this.peekDelim("-"))return null;var n=this.create(Rn);n.referenceTypes=e;for(var i=!1,r=function(){return t.acceptDelim("-")?(!t.hasWhitespace()&&t.acceptDelim("-")&&(n.isCustomProperty=!0),t.hasWhitespace()?null:t._parseInterpolation()):null};(this.accept(Dt.Ident)||n.addChild(this._parseInterpolation()||this.try(r)))&&(i=!0,!this.hasWhitespace()&&this.acceptDelim("-"),!this.hasWhitespace()););return i?this.finish(n):null},t.prototype._parseTerm=function(){var t=e.prototype._parseTerm.call(this);return t||((t=this.create(xi)).setExpression(this._parseVariable())||t.setExpression(this._parseSelectorCombinator())||t.setExpression(this._tryParsePrio())?this.finish(t):null)},t.prototype._parseInterpolation=function(){if(this.peek(Bo)){var e=this.create(Fi);return this.consumeToken(),e.addChild(this._parseBinaryExpr())||this._parseSelectorCombinator()?this.accept(Dt.CurlyR)?this.finish(e):this.finish(e,Ui.RightCurlyExpected):this.finish(e,Ui.ExpressionExpected)}return null},t.prototype._parseOperator=function(){if(this.peek(Ko)||this.peek(qo)||this.peek(Wo)||this.peek($o)||this.peekDelim(">")||this.peekDelim("<")||this.peekIdent("and")||this.peekIdent("or")||this.peekDelim("%")){var t=this.createNode(En.Operator);return this.consumeToken(),this.finish(t)}return e.prototype._parseOperator.call(this)},t.prototype._parseUnaryOperator=function(){if(this.peekIdent("not")){var t=this.create(Dn);return this.consumeToken(),this.finish(t)}return e.prototype._parseUnaryOperator.call(this)},t.prototype._parseRuleSetDeclaration=function(){return this.peek(Dt.AtKeyword)?this._parseKeyframe()||this._parseImport()||this._parseMedia(!0)||this._parseFontFace()||this._parseWarnAndDebug()||this._parseControlStatement()||this._parseFunctionDeclaration()||this._parseExtends()||this._parseMixinReference()||this._parseMixinContent()||this._parseMixinDeclaration()||this._parseRuleset(!0)||this._parseSupports(!0):this._parseVariableDeclaration()||this._tryParseRuleset(!0)||e.prototype._parseRuleSetDeclaration.call(this)},t.prototype._parseDeclaration=function(e){var t=this.create(Gn);if(!t.setProperty(this._parseProperty()))return null;if(!this.accept(Dt.Colon))return this.finish(t,Ui.ColonExpected,[Dt.Colon],e);t.colonPosition=this.prevToken.offset;var n=!1;if(t.setValue(this._parseExpr())&&(n=!0,t.addChild(this._parsePrio())),this.peek(Dt.CurlyL))t.setNestedProperties(this._parseNestedProperties());else if(!n)return this.finish(t,Ui.PropertyValueExpected);return this.peek(Dt.SemiColon)&&(t.semicolonPosition=this.token.offset),this.finish(t)},t.prototype._parseNestedProperties=function(){var e=this.create(si);return this._parseBody(e,this._parseDeclaration.bind(this))},t.prototype._parseExtends=function(){if(this.peekKeyword("@extend")){var e=this.create(Ii);if(this.consumeToken(),!e.getSelectors().addChild(this._parseSimpleSelector()))return this.finish(e,Ui.SelectorExpected);for(;this.accept(Dt.Comma);)e.getSelectors().addChild(this._parseSimpleSelector());return this.accept(Dt.Exclamation)&&!this.acceptIdent("optional")?this.finish(e,Ui.UnknownKeyword):this.finish(e)}return null},t.prototype._parseSimpleSelectorBody=function(){return this._parseSelectorCombinator()||this._parseSelectorPlaceholder()||e.prototype._parseSimpleSelectorBody.call(this)},t.prototype._parseSelectorCombinator=function(){if(this.peekDelim("&")){var e=this.createNode(En.SelectorCombinator);for(this.consumeToken();!this.hasWhitespace()&&(this.acceptDelim("-")||this.accept(Dt.Num)||this.accept(Dt.Dimension)||e.addChild(this._parseIdent())||this.acceptDelim("&")););return this.finish(e)}return null},t.prototype._parseSelectorPlaceholder=function(){if(this.peekDelim("%")){var e=this.createNode(En.SelectorPlaceholder);return this.consumeToken(),this._parseIdent(),this.finish(e)}if(this.peekKeyword("@at-root")){e=this.createNode(En.SelectorPlaceholder);return this.consumeToken(),this.finish(e)}return null},t.prototype._parseWarnAndDebug=function(){if(!this.peekKeyword("@debug")&&!this.peekKeyword("@warn")&&!this.peekKeyword("@error"))return null;var e=this.createNode(En.Debug);return this.consumeToken(),e.addChild(this._parseExpr()),this.finish(e)},t.prototype._parseControlStatement=function(e){return void 0===e&&(e=this._parseRuleSetDeclaration.bind(this)),this.peek(Dt.AtKeyword)?this._parseIfStatement(e)||this._parseForStatement(e)||this._parseEachStatement(e)||this._parseWhileStatement(e):null},t.prototype._parseIfStatement=function(e){return this.peekKeyword("@if")?this._internalParseIfStatement(e):null},t.prototype._internalParseIfStatement=function(e){var t=this.create(Qn);if(this.consumeToken(),!t.setExpression(this._parseExpr(!0)))return this.finish(t,Ui.ExpressionExpected);if(this._parseBody(t,e),this.acceptKeyword("@else"))if(this.peekIdent("if"))t.setElseClause(this._internalParseIfStatement(e));else if(this.peek(Dt.CurlyL)){var n=this.create(ni);this._parseBody(n,e),t.setElseClause(n)}return this.finish(t)},t.prototype._parseForStatement=function(e){if(!this.peekKeyword("@for"))return null;var t=this.create(Zn);return this.consumeToken(),t.setVariable(this._parseVariable())?this.acceptIdent("from")?t.addChild(this._parseBinaryExpr())?this.acceptIdent("to")||this.acceptIdent("through")?t.addChild(this._parseBinaryExpr())?this._parseBody(t,e):this.finish(t,Ui.ExpressionExpected,[Dt.CurlyR]):this.finish(t,Xo.ThroughOrToExpected,[Dt.CurlyR]):this.finish(t,Ui.ExpressionExpected,[Dt.CurlyR]):this.finish(t,Xo.FromExpected,[Dt.CurlyR]):this.finish(t,Ui.VariableNameExpected,[Dt.CurlyR])},t.prototype._parseEachStatement=function(e){if(!this.peekKeyword("@each"))return null;var t=this.create(ei);this.consumeToken();var n=t.getVariables();if(!n.addChild(this._parseVariable()))return this.finish(t,Ui.VariableNameExpected,[Dt.CurlyR]);for(;this.accept(Dt.Comma);)if(!n.addChild(this._parseVariable()))return this.finish(t,Ui.VariableNameExpected,[Dt.CurlyR]);return this.finish(n),this.acceptIdent("in")?t.addChild(this._parseExpr())?this._parseBody(t,e):this.finish(t,Ui.ExpressionExpected,[Dt.CurlyR]):this.finish(t,Xo.InExpected,[Dt.CurlyR])},t.prototype._parseWhileStatement=function(e){if(!this.peekKeyword("@while"))return null;var t=this.create(ti);return this.consumeToken(),t.addChild(this._parseBinaryExpr())?this._parseBody(t,e):this.finish(t,Ui.ExpressionExpected,[Dt.CurlyR])},t.prototype._parseFunctionBodyDeclaration=function(){return this._parseVariableDeclaration()||this._parseReturnStatement()||this._parseWarnAndDebug()||this._parseControlStatement(this._parseFunctionBodyDeclaration.bind(this))},t.prototype._parseFunctionDeclaration=function(){if(!this.peekKeyword("@function"))return null;var e=this.create(ii);if(this.consumeToken(),!e.setIdentifier(this._parseIdent([In.Function])))return this.finish(e,Ui.IdentifierExpected,[Dt.CurlyR]);if(!this.accept(Dt.ParenthesisL))return this.finish(e,Ui.LeftParenthesisExpected,[Dt.CurlyR]);if(e.getParameters().addChild(this._parseParameterDeclaration()))for(;this.accept(Dt.Comma);)if(!e.getParameters().addChild(this._parseParameterDeclaration()))return this.finish(e,Ui.VariableNameExpected);return this.accept(Dt.ParenthesisR)?this._parseBody(e,this._parseFunctionBodyDeclaration.bind(this)):this.finish(e,Ui.RightParenthesisExpected,[Dt.CurlyR])},t.prototype._parseReturnStatement=function(){if(!this.peekKeyword("@return"))return null;var e=this.createNode(En.ReturnStatement);return this.consumeToken(),e.addChild(this._parseExpr())?this.finish(e):this.finish(e,Ui.ExpressionExpected)},t.prototype._parseMixinDeclaration=function(){if(!this.peekKeyword("@mixin"))return null;var e=this.create(Pi);if(this.consumeToken(),!e.setIdentifier(this._parseIdent([In.Mixin])))return this.finish(e,Ui.IdentifierExpected,[Dt.CurlyR]);if(this.accept(Dt.ParenthesisL)){if(e.getParameters().addChild(this._parseParameterDeclaration()))for(;this.accept(Dt.Comma);)if(!e.getParameters().addChild(this._parseParameterDeclaration()))return this.finish(e,Ui.VariableNameExpected);if(!this.accept(Dt.ParenthesisR))return this.finish(e,Ui.RightParenthesisExpected,[Dt.CurlyR])}return this._parseBody(e,this._parseRuleSetDeclaration.bind(this))},t.prototype._parseParameterDeclaration=function(){var e=this.create(Yn);return e.setIdentifier(this._parseVariable())?(this.accept(Go),this.accept(Dt.Colon)&&!e.setDefaultValue(this._parseExpr(!0))?this.finish(e,Ui.VariableValueExpected,[],[Dt.Comma,Dt.ParenthesisR]):this.finish(e)):null},t.prototype._parseMixinContent=function(){if(!this.peekKeyword("@content"))return null;var e=this.createNode(En.MixinContent);return this.consumeToken(),this.finish(e)},t.prototype._parseMixinReference=function(){if(!this.peekKeyword("@include"))return null;var e=this.create(Ai);if(this.consumeToken(),!e.setIdentifier(this._parseIdent([In.Mixin])))return this.finish(e,Ui.IdentifierExpected,[Dt.CurlyR]);if(this.accept(Dt.ParenthesisL)){if(e.getArguments().addChild(this._parseFunctionArgument()))for(;this.accept(Dt.Comma);)if(!e.getArguments().addChild(this._parseFunctionArgument()))return this.finish(e,Ui.ExpressionExpected);if(!this.accept(Dt.ParenthesisR))return this.finish(e,Ui.RightParenthesisExpected)}if(this.peek(Dt.CurlyL)){var t=this.create(Un);this._parseBody(t,this._parseMixinReferenceBodyStatement.bind(this)),e.setContent(t)}return this.finish(e)},t.prototype._parseMixinReferenceBodyStatement=function(){return this._tryParseKeyframeSelector()||this._parseRuleSetDeclaration()},t.prototype._parseFunctionArgument=function(){var e=this.create(Xn),t=this.mark(),n=this._parseVariable();if(n)if(this.accept(Dt.Colon))e.setIdentifier(n);else{if(this.accept(Go))return e.setValue(n),this.finish(e);this.restoreAtMark(t)}return e.setValue(this._parseExpr(!0))?(this.accept(Go),e.addChild(this._parsePrio()),this.finish(e)):null},t.prototype._parseURLArgument=function(){var t=this.mark(),n=e.prototype._parseURLArgument.call(this);if(!n||!this.peek(Dt.ParenthesisR)){this.restoreAtMark(t);var i=this.create(Dn);return i.addChild(this._parseBinaryExpr()),this.finish(i)}return n},t.prototype._parseOperation=function(){if(!this.peek(Dt.ParenthesisL))return null;var e=this.create(Dn);for(this.consumeToken();e.addChild(this._parseListElement());)this.accept(Dt.Comma);return this.accept(Dt.ParenthesisR)?this.finish(e):this.finish(e,Ui.RightParenthesisExpected)},t.prototype._parseListElement=function(){var e=this.createNode(En.ListEntry);return e.addChild(this._parseBinaryExpr())?this.accept(Dt.Colon)&&!e.addChild(this._parseBinaryExpr())?this.finish(e,Ui.ExpressionExpected):this.finish(e):null},t}(Tr),es=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ts=Ri(),ns=function(e){function t(){return e.call(this,"$")||this}return es(t,e),t.prototype.createReplaceFunction=function(){var e=1;return function(n,i){return"\\"+i+": ${"+e+++":"+(t.variableDefaults[i]||"")+"}"}},t.prototype.createFunctionProposals=function(e,t,n,i){for(var r=0,o=e;r<o.length;r++){var s=o[r],a=s.func.replace(/\[?(\$\w+)\]?/g,this.createReplaceFunction()),l={label:s.func.substr(0,s.func.indexOf("(")),detail:s.func,documentation:s.desc,textEdit:at.replace(this.getCompletionRange(t),a),insertTextFormat:gt.Snippet,kind:ft.Function};n&&(l.sortText="z"),i.items.push(l)}return i},t.prototype.getCompletionsForSelector=function(n,i,r){return this.createFunctionProposals(t.selectorFuncs,void 0,!0,r),e.prototype.getCompletionsForSelector.call(this,n,i,r)},t.prototype.getTermProposals=function(n,i,r){var o=t.builtInFuncs;return n&&(o=o.filter(function(e){return!e.type||-1!==n.restrictions.indexOf(e.type)})),this.createFunctionProposals(o,i,!0,r),e.prototype.getTermProposals.call(this,n,i,r)},t.prototype.getColorProposals=function(n,i,r){return this.createFunctionProposals(t.colorProposals,i,!1,r),e.prototype.getColorProposals.call(this,n,i,r)},t.prototype.getCompletionsForDeclarationProperty=function(t,n){return this.getCompletionsForSelector(null,!0,n),e.prototype.getCompletionsForDeclarationProperty.call(this,t,n)},t.prototype.getCompletionsForExtendsReference=function(e,t,n){for(var i=0,r=this.getSymbolContext().findSymbolsAtOffset(this.offset,In.Rule);i<r.length;i++){var o=r[i],s={label:o.name,textEdit:at.replace(this.getCompletionRange(t),o.name),kind:ft.Function};n.items.push(s)}return n},t.variableDefaults={$red:"1",$green:"2",$blue:"3",$alpha:"1.0",$color:"#000000",$weight:"0.5",$hue:"0",$saturation:"0%",$lightness:"0%",$degrees:"0",$amount:"0",$string:'""',$substring:'"s"',$number:"0",$limit:"1"},t.colorProposals=[{func:"red($color)",desc:ts("scss.builtin.red","Gets the red component of a color.")},{func:"green($color)",desc:ts("scss.builtin.green","Gets the green component of a color.")},{func:"blue($color)",desc:ts("scss.builtin.blue","Gets the blue component of a color.")},{func:"mix($color, $color, [$weight])",desc:ts("scss.builtin.mix","Mixes two colors together.")},{func:"hue($color)",desc:ts("scss.builtin.hue","Gets the hue component of a color.")},{func:"saturation($color)",desc:ts("scss.builtin.saturation","Gets the saturation component of a color.")},{func:"lightness($color)",desc:ts("scss.builtin.lightness","Gets the lightness component of a color.")},{func:"adjust-hue($color, $degrees)",desc:ts("scss.builtin.adjust-hue","Changes the hue of a color.")},{func:"lighten($color, $amount)",desc:ts("scss.builtin.lighten","Makes a color lighter.")},{func:"darken($color, $amount)",desc:ts("scss.builtin.darken","Makes a color darker.")},{func:"saturate($color, $amount)",desc:ts("scss.builtin.saturate","Makes a color more saturated.")},{func:"desaturate($color, $amount)",desc:ts("scss.builtin.desaturate","Makes a color less saturated.")},{func:"grayscale($color)",desc:ts("scss.builtin.grayscale","Converts a color to grayscale.")},{func:"complement($color)",desc:ts("scss.builtin.complement","Returns the complement of a color.")},{func:"invert($color)",desc:ts("scss.builtin.invert","Returns the inverse of a color.")},{func:"alpha($color)",desc:ts("scss.builtin.alpha","Gets the opacity component of a color.")},{func:"opacity($color)",desc:"Gets the alpha component (opacity) of a color."},{func:"rgba($color, $alpha)",desc:ts("scss.builtin.rgba","Changes the alpha component for a color.")},{func:"opacify($color, $amount)",desc:ts("scss.builtin.opacify","Makes a color more opaque.")},{func:"fade-in($color, $amount)",desc:ts("scss.builtin.fade-in","Makes a color more opaque.")},{func:"transparentize($color, $amount)",desc:ts("scss.builtin.transparentize","Makes a color more transparent.")},{func:"fade-out($color, $amount)",desc:ts("scss.builtin.fade-out","Makes a color more transparent.")},{func:"adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])",desc:ts("scss.builtin.adjust-color","Increases or decreases one or more components of a color.")},{func:"scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])",desc:ts("scss.builtin.scale-color","Fluidly scales one or more properties of a color.")},{func:"change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])",desc:ts("scss.builtin.change-color","Changes one or more properties of a color.")},{func:"ie-hex-str($color)",desc:ts("scss.builtin.ie-hex-str","Converts a color into the format understood by IE filters.")}],t.selectorFuncs=[{func:"selector-nest($selectors…)",desc:ts("scss.builtin.selector-nest","Nests selector beneath one another like they would be nested in the stylesheet.")},{func:"selector-append($selectors…)",desc:ts("scss.builtin.selector-append","Appends selectors to one another without spaces in between.")},{func:"selector-extend($selector, $extendee, $extender)",desc:ts("scss.builtin.selector-extend","Extends $extendee with $extender within $selector.")},{func:"selector-replace($selector, $original, $replacement)",desc:ts("scss.builtin.selector-replace","Replaces $original with $replacement within $selector.")},{func:"selector-unify($selector1, $selector2)",desc:ts("scss.builtin.selector-unify","Unifies two selectors to produce a selector that matches elements matched by both.")},{func:"is-superselector($super, $sub)",desc:ts("scss.builtin.is-superselector","Returns whether $super matches all the elements $sub does, and possibly more.")},{func:"simple-selectors($selector)",desc:ts("scss.builtin.simple-selectors","Returns the simple selectors that comprise a compound selector.")},{func:"selector-parse($selector)",desc:ts("scss.builtin.selector-parse","Parses a selector into the format returned by &.")}],t.builtInFuncs=[{func:"unquote($string)",desc:ts("scss.builtin.unquote","Removes quotes from a string.")},{func:"quote($string)",desc:ts("scss.builtin.quote","Adds quotes to a string.")},{func:"str-length($string)",desc:ts("scss.builtin.str-length","Returns the number of characters in a string.")},{func:"str-insert($string, $insert, $index)",desc:ts("scss.builtin.str-insert","Inserts $insert into $string at $index.")},{func:"str-index($string, $substring)",desc:ts("scss.builtin.str-index","Returns the index of the first occurance of $substring in $string.")},{func:"str-slice($string, $start-at, [$end-at])",desc:ts("scss.builtin.str-slice","Extracts a substring from $string.")},{func:"to-upper-case($string)",desc:ts("scss.builtin.to-upper-case","Converts a string to upper case.")},{func:"to-lower-case($string)",desc:ts("scss.builtin.to-lower-case","Converts a string to lower case.")},{func:"percentage($number)",desc:ts("scss.builtin.percentage","Converts a unitless number to a percentage."),type:"percentage"},{func:"round($number)",desc:ts("scss.builtin.round","Rounds a number to the nearest whole number.")},{func:"ceil($number)",desc:ts("scss.builtin.ceil","Rounds a number up to the next whole number.")},{func:"floor($number)",desc:ts("scss.builtin.floor","Rounds a number down to the previous whole number.")},{func:"abs($number)",desc:ts("scss.builtin.abs","Returns the absolute value of a number.")},{func:"min($numbers)",desc:ts("scss.builtin.min","Finds the minimum of several numbers.")},{func:"max($numbers)",desc:ts("scss.builtin.max","Finds the maximum of several numbers.")},{func:"random([$limit])",desc:ts("scss.builtin.random","Returns a random number.")},{func:"length($list)",desc:ts("scss.builtin.length","Returns the length of a list.")},{func:"nth($list, $n)",desc:ts("scss.builtin.nth","Returns a specific item in a list.")},{func:"set-nth($list, $n, $value)",desc:ts("scss.builtin.set-nth","Replaces the nth item in a list.")},{func:"join($list1, $list2, [$separator])",desc:ts("scss.builtin.join","Joins together two lists into one.")},{func:"append($list1, $val, [$separator])",desc:ts("scss.builtin.append","Appends a single value onto the end of a list.")},{func:"zip($lists)",desc:ts("scss.builtin.zip","Combines several lists into a single multidimensional list.")},{func:"index($list, $value)",desc:ts("scss.builtin.index","Returns the position of a value within a list.")},{func:"list-separator(#list)",desc:ts("scss.builtin.list-separator","Returns the separator of a list.")},{func:"map-get($map, $key)",desc:ts("scss.builtin.map-get","Returns the value in a map associated with a given key.")},{func:"map-merge($map1, $map2)",desc:ts("scss.builtin.map-merge","Merges two maps together into a new map.")},{func:"map-remove($map, $keys)",desc:ts("scss.builtin.map-remove","Returns a new map with keys removed.")},{func:"map-keys($map)",desc:ts("scss.builtin.map-keys","Returns a list of all keys in a map.")},{func:"map-values($map)",desc:ts("scss.builtin.map-values","Returns a list of all values in a map.")},{func:"map-has-key($map, $key)",desc:ts("scss.builtin.map-has-key","Returns whether a map has a value associated with a given key.")},{func:"keywords($args)",desc:ts("scss.builtin.keywords","Returns the keywords passed to a function that takes variable arguments.")},{func:"feature-exists($feature)",desc:ts("scss.builtin.feature-exists","Returns whether a feature exists in the current Sass runtime.")},{func:"variable-exists($name)",desc:ts("scss.builtin.variable-exists","Returns whether a variable with the given name exists in the current scope.")},{func:"global-variable-exists($name)",desc:ts("scss.builtin.global-variable-exists","Returns whether a variable with the given name exists in the global scope.")},{func:"function-exists($name)",desc:ts("scss.builtin.function-exists","Returns whether a function with the given name exists.")},{func:"mixin-exists($name)",desc:ts("scss.builtin.mixin-exists","Returns whether a mixin with the given name exists.")},{func:"inspect($value)",desc:ts("scss.builtin.inspect","Returns the string representation of a value as it would be represented in Sass.")},{func:"type-of($value)",desc:ts("scss.builtin.type-of","Returns the type of a value.")},{func:"unit($number)",desc:ts("scss.builtin.unit","Returns the unit(s) associated with a number.")},{func:"unitless($number)",desc:ts("scss.builtin.unitless","Returns whether a number has units.")},{func:"comparable($number1, $number2)",desc:ts("scss.builtin.comparable","Returns whether two numbers can be added, subtracted, or compared.")},{func:"call($name, $args…)",desc:ts("scss.builtin.call","Dynamically calls a Sass function.")}],t}(Kr),is=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),rs="/".charCodeAt(0),os="\n".charCodeAt(0),ss="\r".charCodeAt(0),as="\f".charCodeAt(0),ls="`".charCodeAt(0),cs=".".charCodeAt(0),hs=Dt.CustomToken,ds=hs++,us=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return is(t,e),t.prototype.scanNext=function(t){var n=this.escapedJavaScript();return null!==n?this.finishToken(t,n):this.stream.advanceIfChars([cs,cs,cs])?this.finishToken(t,ds):e.prototype.scanNext.call(this,t)},t.prototype.comment=function(){return!!e.prototype.comment.call(this)||!(this.inURL||!this.stream.advanceIfChars([rs,rs]))&&(this.stream.advanceWhileChar(function(e){switch(e){case os:case ss:case as:return!1;default:return!0}}),!0)},t.prototype.escapedJavaScript=function(){return this.stream.peekChar()===ls?(this.stream.advance(1),this.stream.advanceWhileChar(function(e){return e!==ls}),this.stream.advanceIfChar(ls)?Dt.EscapedJavaScript:Dt.BadEscapedJavaScript):null},t}(An),ms=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ps=function(e){function t(){return e.call(this,new us)||this}return ms(t,e),t.prototype._parseStylesheetStatement=function(){return this._tryParseMixinDeclaration()||this._tryParseMixinReference(!0)||e.prototype._parseStylesheetStatement.call(this)||this._parseVariableDeclaration()||this._parsePlugin()},t.prototype._parseImport=function(){if(!this.peekKeyword("@import")&&!this.peekKeyword("@import-once"))return null;var e=this.create(ci);if(this.consumeToken(),this.accept(Dt.ParenthesisL)){if(!this.accept(Dt.Ident))return this.finish(e,Ui.IdentifierExpected,[Dt.SemiColon]);do{if(!this.accept(Dt.Comma))break}while(this.accept(Dt.Ident));if(!this.accept(Dt.ParenthesisR))return this.finish(e,Ui.RightParenthesisExpected,[Dt.SemiColon])}return e.addChild(this._parseURILiteral())||e.addChild(this._parseStringLiteral())?(this.peek(Dt.SemiColon)||this.peek(Dt.EOF)||e.setMedialist(this._parseMediaQueryList()),this.finish(e)):this.finish(e,Ui.URIOrStringExpected,[Dt.SemiColon])},t.prototype._parsePlugin=function(){if(!this.peekKeyword("@plugin"))return null;var e=this.createNode(En.Plugin);return this.consumeToken(),e.addChild(this._parseStringLiteral())?this.accept(Dt.SemiColon)?this.finish(e):this.finish(e,Ui.SemiColonExpected):this.finish(e,Ui.StringLiteralExpected)},t.prototype._parseMediaQuery=function(t){var n=e.prototype._parseMediaQuery.call(this,t);if(!n){var i=this.create(fi);return i.addChild(this._parseVariable())?this.finish(i):null}return n},t.prototype._parseMediaDeclaration=function(e){return void 0===e&&(e=!1),this._tryParseRuleset(e)||this._tryToParseDeclaration()||this._tryParseMixinDeclaration()||this._tryParseMixinReference()||this._parseDetachedRuleSetMixin()||this._parseStylesheetStatement()},t.prototype._parseMediaFeatureName=function(){return this._parseIdent()||this._parseVariable()},t.prototype._parseVariableDeclaration=function(e){void 0===e&&(e=[]);var t=this.create(_i),n=this.mark();return t.setVariable(this._parseVariable())?this.accept(Dt.Colon)?(t.colonPosition=this.prevToken.offset,t.setValue(this._parseDetachedRuleSet()||this._parseExpr())?(t.addChild(this._parsePrio()),this.peek(Dt.SemiColon)&&(t.semicolonPosition=this.token.offset),this.finish(t)):this.finish(t,Ui.VariableValueExpected,[],e)):(this.restoreAtMark(n),null):null},t.prototype._parseDetachedRuleSet=function(){if(!this.peek(Dt.CurlyL))return null;var e=this.create(Un);return this._parseBody(e,this._parseDetachedRuleSetBody.bind(this)),this.finish(e)},t.prototype._parseDetachedRuleSetBody=function(){return this._tryParseKeyframeSelector()||e.prototype._parseRuleSetDeclaration.call(this)},t.prototype._parseVariable=function(){if(!this.peekDelim("@")&&!this.peek(Dt.AtKeyword))return null;for(var e=this.create(Ei),t=this.mark();this.acceptDelim("@");)if(this.hasWhitespace())return this.restoreAtMark(t),null;return this.accept(Dt.AtKeyword)?e:(this.restoreAtMark(t),null)},t.prototype._parseTerm=function(){var t=e.prototype._parseTerm.call(this);return t||((t=this.create(xi)).setExpression(this._parseVariable())||t.setExpression(this._parseEscaped())?this.finish(t):null)},t.prototype._parseEscaped=function(){if(this.peek(Dt.EscapedJavaScript)||this.peek(Dt.BadEscapedJavaScript)){var e=this.createNode(En.EscapedValue);return this.consumeToken(),this.finish(e)}if(this.peekDelim("~")){e=this.createNode(En.EscapedValue);return this.consumeToken(),this.finish(e,this.accept(Dt.String)?null:Ui.TermExpected)}return null},t.prototype._parseOperator=function(){var t=this._parseGuardOperator();return t||e.prototype._parseOperator.call(this)},t.prototype._parseGuardOperator=function(){if(this.peekDelim(">")){var e=this.createNode(En.Operator);return this.consumeToken(),this.acceptDelim("="),e}if(this.peekDelim("=")){e=this.createNode(En.Operator);return this.consumeToken(),this.acceptDelim("<"),e}if(this.peekDelim("<")){e=this.createNode(En.Operator);return this.consumeToken(),this.acceptDelim("="),e}return null},t.prototype._parseRuleSetDeclaration=function(){return this.peek(Dt.AtKeyword)?this._parseKeyframe()||this._parseMedia(!0)||this._parseImport()||this._parseSupports(!0)||this._parseDetachedRuleSetMixin()||this._parseVariableDeclaration():this._tryParseMixinDeclaration()||this._tryParseRuleset(!0)||this._tryParseMixinReference()||this._parseExtend()||e.prototype._parseRuleSetDeclaration.call(this)},t.prototype._parseKeyframeIdent=function(){return this._parseIdent([In.Keyframe])||this._parseVariable()},t.prototype._parseKeyframeSelector=function(){return this._parseDetachedRuleSetMixin()||e.prototype._parseKeyframeSelector.call(this)},t.prototype._parseSimpleSelectorBody=function(){return this._parseSelectorCombinator()||e.prototype._parseSimpleSelectorBody.call(this)},t.prototype._parseSelector=function(e){var t=this.create(Vn),n=!1;for(e&&(n=t.addChild(this._parseCombinator()));t.addChild(this._parseSimpleSelector());){n=!0;var i=this.mark();if(t.addChild(this._parseGuard())&&this.peek(Dt.CurlyL))break;this.restoreAtMark(i),t.addChild(this._parseCombinator())}return n?this.finish(t):null},t.prototype._parseSelectorCombinator=function(){if(this.peekDelim("&")){var e=this.createNode(En.SelectorCombinator);for(this.consumeToken();!this.hasWhitespace()&&(this.acceptDelim("-")||this.accept(Dt.Num)||this.accept(Dt.Dimension)||e.addChild(this._parseIdent())||this.acceptDelim("&")););return this.finish(e)}return null},t.prototype._parseSelectorIdent=function(){if(!this.peekInterpolatedIdent())return null;var e=this.createNode(En.SelectorInterpolation);return this._acceptInterpolatedIdent(e)?this.finish(e):null},t.prototype._parsePropertyIdentifier=function(){if(!this.peekInterpolatedIdent())return null;var e=this.create(Rn);e.isCustomProperty=this.peekRegExp(Dt.Ident,/^--/);var t=this._acceptInterpolatedIdent(e);return t&&!this.hasWhitespace()&&(this.acceptDelim("+"),this.hasWhitespace()||this.acceptIdent("_")),t?this.finish(e):null},t.prototype.peekInterpolatedIdent=function(){return this.peek(Dt.Ident)||this.peekDelim("@")||this.peekDelim("-")},t.prototype._acceptInterpolatedIdent=function(e){for(var t=this,n=!1,i=function(){return t.acceptDelim("-")?(!t.hasWhitespace()&&t.acceptDelim("-"),t.hasWhitespace()?null:t._parseInterpolation()):null};(this.accept(Dt.Ident)||e.addChild(this._parseInterpolation()||this.try(i)))&&(n=!0,!this.hasWhitespace()&&this.acceptDelim("-"),!this.hasWhitespace()););return n},t.prototype._parseInterpolation=function(){var e=this.mark();if(this.peekDelim("@")){var t=this.createNode(En.Interpolation);return this.consumeToken(),this.hasWhitespace()||!this.accept(Dt.CurlyL)?(this.restoreAtMark(e),null):t.addChild(this._parseIdent())?this.accept(Dt.CurlyR)?this.finish(t):this.finish(t,Ui.RightCurlyExpected):this.finish(t,Ui.IdentifierExpected)}return null},t.prototype._tryParseMixinDeclaration=function(){var e=this.mark(),t=this.create(Pi);if(!t.setIdentifier(this._parseMixinDeclarationIdentifier())||!this.accept(Dt.ParenthesisL))return this.restoreAtMark(e),null;if(t.getParameters().addChild(this._parseMixinParameter()))for(;(this.accept(Dt.Comma)||this.accept(Dt.SemiColon))&&!this.peek(Dt.ParenthesisR);)t.getParameters().addChild(this._parseMixinParameter())||this.markError(t,Ui.IdentifierExpected,[],[Dt.ParenthesisR]);return this.accept(Dt.ParenthesisR)?(t.setGuard(this._parseGuard()),this.peek(Dt.CurlyL)?this._parseBody(t,this._parseMixInBodyDeclaration.bind(this)):(this.restoreAtMark(e),null)):(this.restoreAtMark(e),null)},t.prototype._parseMixInBodyDeclaration=function(){return this._parseFontFace()||this._parseRuleSetDeclaration()},t.prototype._parseMixinDeclarationIdentifier=function(){var e;if(this.peekDelim("#")||this.peekDelim(".")){if(e=this.create(Rn),this.consumeToken(),this.hasWhitespace()||!e.addChild(this._parseIdent()))return null}else{if(!this.peek(Dt.Hash))return null;e=this.create(Rn),this.consumeToken()}return e.referenceTypes=[In.Mixin],this.finish(e)},t.prototype._parsePseudo=function(){if(!this.peek(Dt.Colon))return null;var t=this.mark(),n=this.create(Ii);return this.consumeToken(),this.acceptIdent("extend")?this._completeExtends(n):(this.restoreAtMark(t),e.prototype._parsePseudo.call(this))},t.prototype._parseExtend=function(){if(!this.peekDelim("&"))return null;var e=this.mark(),t=this.create(Ii);return this.consumeToken(),!this.hasWhitespace()&&this.accept(Dt.Colon)&&this.acceptIdent("extend")?this._completeExtends(t):(this.restoreAtMark(e),null)},t.prototype._completeExtends=function(e){if(!this.accept(Dt.ParenthesisL))return this.finish(e,Ui.LeftParenthesisExpected);var t=e.getSelectors();if(!t.addChild(this._parseSelector(!0)))return this.finish(e,Ui.SelectorExpected);for(;this.accept(Dt.Comma);)if(!t.addChild(this._parseSelector(!0)))return this.finish(e,Ui.SelectorExpected);return this.accept(Dt.ParenthesisR)?this.finish(e):this.finish(e,Ui.RightParenthesisExpected)},t.prototype._parseDetachedRuleSetMixin=function(){if(!this.peek(Dt.AtKeyword))return null;var e=this.mark(),t=this.create(Ai);return t.addChild(this._parseVariable())&&this.accept(Dt.ParenthesisL)?this.accept(Dt.ParenthesisR)?this.finish(t):this.finish(t,Ui.RightParenthesisExpected):(this.restoreAtMark(e),null)},t.prototype._tryParseMixinReference=function(e){void 0===e&&(e=!1);for(var t=this.mark(),n=this.create(Ai),i=this._parseMixinDeclarationIdentifier();i;){this.acceptDelim(">");var r=this._parseMixinDeclarationIdentifier();if(!r)break;n.getNamespaces().addChild(i),i=r}if(!n.setIdentifier(i))return this.restoreAtMark(t),null;var o=!1;if(!this.hasWhitespace()&&this.accept(Dt.ParenthesisL)){if(o=!0,n.getArguments().addChild(this._parseMixinArgument()))for(;(this.accept(Dt.Comma)||this.accept(Dt.SemiColon))&&!this.peek(Dt.ParenthesisR);)if(!n.getArguments().addChild(this._parseMixinArgument()))return this.finish(n,Ui.ExpressionExpected);if(!this.accept(Dt.ParenthesisR))return this.finish(n,Ui.RightParenthesisExpected);i.referenceTypes=[In.Mixin]}else i.referenceTypes=[In.Mixin,In.Rule];return n.addChild(this._parsePrio()),o||this.peek(Dt.SemiColon)||this.peek(Dt.CurlyR)||this.peek(Dt.EOF)?this.finish(n):(this.restoreAtMark(t),null)},t.prototype._parseMixinArgument=function(){var e=this.create(Xn),t=this.mark(),n=this._parseVariable();return n&&(this.accept(Dt.Colon)?e.setIdentifier(n):this.restoreAtMark(t)),e.setValue(this._parseDetachedRuleSet()||this._parseExpr(!0))?this.finish(e):(this.restoreAtMark(t),null)},t.prototype._parseMixinParameter=function(){var e=this.create(Yn);if(this.peekKeyword("@rest")){var t=this.create(Dn);return this.consumeToken(),this.accept(ds)?(e.setIdentifier(this.finish(t)),this.finish(e)):this.finish(e,Ui.DotExpected,[],[Dt.Comma,Dt.ParenthesisR])}if(this.peek(ds)){var n=this.create(Dn);return this.consumeToken(),e.setIdentifier(this.finish(n)),this.finish(e)}var i=!1;return e.setIdentifier(this._parseVariable())&&(this.accept(Dt.Colon),i=!0),e.setDefaultValue(this._parseExpr(!0))||i?this.finish(e):null},t.prototype._parseGuard=function(){if(!this.peekIdent("when"))return null;var e=this.create(Ti);if(this.consumeToken(),e.isNegated=this.acceptIdent("not"),!e.getConditions().addChild(this._parseGuardCondition()))return this.finish(e,Ui.ConditionExpected);for(;this.acceptIdent("and")||this.accept(Dt.Comma);)if(!e.getConditions().addChild(this._parseGuardCondition()))return this.finish(e,Ui.ConditionExpected);return this.finish(e)},t.prototype._parseGuardCondition=function(){if(!this.peek(Dt.ParenthesisL))return null;var e=this.create(Oi);return this.consumeToken(),e.addChild(this._parseExpr()),this.accept(Dt.ParenthesisR)?this.finish(e):this.finish(e,Ui.RightParenthesisExpected)},t.prototype._parseFunctionIdentifier=function(){if(this.peekDelim("%")){var t=this.create(Rn);return t.referenceTypes=[In.Function],this.consumeToken(),this.finish(t)}return e.prototype._parseFunctionIdentifier.call(this)},t.prototype._parseURLArgument=function(){var t=this.mark(),n=e.prototype._parseURLArgument.call(this);if(!n||!this.peek(Dt.ParenthesisR)){this.restoreAtMark(t);var i=this.create(Dn);return i.addChild(this._parseBinaryExpr()),this.finish(i)}return n},t}(Tr),fs=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),gs=Ri(),bs=function(e){function t(){return e.call(this,"@")||this}return fs(t,e),t.prototype.createFunctionProposals=function(e,t,n,i){for(var r=0,o=e;r<o.length;r++){var s=o[r],a={label:s.name,detail:s.example,documentation:s.description,textEdit:at.replace(this.getCompletionRange(t),s.name+"($0)"),insertTextFormat:gt.Snippet,kind:ft.Function};n&&(a.sortText="z"),i.items.push(a)}return i},t.prototype.getTermProposals=function(n,i,r){var o=t.builtInProposals;return n&&(o=o.filter(function(e){return!e.type||-1!==n.restrictions.indexOf(e.type)})),this.createFunctionProposals(o,i,!0,r),e.prototype.getTermProposals.call(this,n,i,r)},t.prototype.getColorProposals=function(n,i,r){return this.createFunctionProposals(t.colorProposals,i,!1,r),e.prototype.getColorProposals.call(this,n,i,r)},t.prototype.getCompletionsForDeclarationProperty=function(t,n){return this.getCompletionsForSelector(null,!0,n),e.prototype.getCompletionsForDeclarationProperty.call(this,t,n)},t.builtInProposals=[{name:"escape",example:"escape(@string);",description:gs("less.builtin.escape","URL encodes a string")},{name:"e",example:"e(@string);",description:gs("less.builtin.e","escape string content")},{name:"replace",example:"replace(@string, @pattern, @replacement[, @flags]);",description:gs("less.builtin.replace","string replace")},{name:"unit",example:"unit(@dimension, [@unit: '']);",description:gs("less.builtin.unit","remove or change the unit of a dimension")},{name:"color",example:"color(@string);",description:gs("less.builtin.color","parses a string to a color"),type:"color"},{name:"convert",example:"convert(@value, unit);",description:gs("less.builtin.convert","converts numbers from one type into another")},{name:"data-uri",example:"data-uri([mimetype,] url);",description:gs("less.builtin.data-uri","inlines a resource and falls back to `url()`"),type:"url"},{name:"length",example:"length(@list);",description:gs("less.builtin.length","returns the number of elements in a value list")},{name:"extract",example:"extract(@list, index);",description:gs("less.builtin.extract","returns a value at the specified position in the list")},{name:"abs",description:gs("less.builtin.abs","absolute value of a number"),example:"abs(number);"},{name:"acos",description:gs("less.builtin.acos","arccosine - inverse of cosine function"),example:"acos(number);"},{name:"asin",description:gs("less.builtin.asin","arcsine - inverse of sine function"),example:"asin(number);"},{name:"ceil",example:"ceil(@number);",description:gs("less.builtin.ceil","rounds up to an integer")},{name:"cos",description:gs("less.builtin.cos","cosine function"),example:"cos(number);"},{name:"floor",description:gs("less.builtin.floor","rounds down to an integer"),example:"floor(@number);"},{name:"percentage",description:gs("less.builtin.percentage","converts to a %, e.g. 0.5 > 50%"),example:"percentage(@number);",type:"percentage"},{name:"round",description:gs("less.builtin.round","rounds a number to a number of places"),example:"round(number, [places: 0]);"},{name:"sqrt",description:gs("less.builtin.sqrt","calculates square root of a number"),example:"sqrt(number);"},{name:"sin",description:gs("less.builtin.sin","sine function"),example:"sin(number);"},{name:"tan",description:gs("less.builtin.tan","tangent function"),example:"tan(number);"},{name:"atan",description:gs("less.builtin.atan","arctangent - inverse of tangent function"),example:"atan(number);"},{name:"pi",description:gs("less.builtin.pi","returns pi"),example:"pi();"},{name:"pow",description:gs("less.builtin.pow","first argument raised to the power of the second argument"),example:"pow(@base, @exponent);"},{name:"mod",description:gs("less.builtin.mod","first argument modulus second argument"),example:"mod(number, number);"},{name:"min",description:gs("less.builtin.min","returns the lowest of one or more values"),example:"min(@x, @y);"},{name:"max",description:gs("less.builtin.max","returns the lowest of one or more values"),example:"max(@x, @y);"}],t.colorProposals=[{name:"argb",example:"argb(@color);",description:gs("less.builtin.argb","creates a #AARRGGBB")},{name:"hsl",example:"hsl(@hue, @saturation, @lightness);",description:gs("less.builtin.hsl","creates a color")},{name:"hsla",example:"hsla(@hue, @saturation, @lightness, @alpha);",description:gs("less.builtin.hsla","creates a color")},{name:"hsv",example:"hsv(@hue, @saturation, @value);",description:gs("less.builtin.hsv","creates a color")},{name:"hsva",example:"hsva(@hue, @saturation, @value, @alpha);",description:gs("less.builtin.hsva","creates a color")},{name:"hue",example:"hue(@color);",description:gs("less.builtin.hue","returns the `hue` channel of `@color` in the HSL space")},{name:"saturation",example:"saturation(@color);",description:gs("less.builtin.saturation","returns the `saturation` channel of `@color` in the HSL space")},{name:"lightness",example:"lightness(@color);",description:gs("less.builtin.lightness","returns the `lightness` channel of `@color` in the HSL space")},{name:"hsvhue",example:"hsvhue(@color);",description:gs("less.builtin.hsvhue","returns the `hue` channel of `@color` in the HSV space")},{name:"hsvsaturation",example:"hsvsaturation(@color);",description:gs("less.builtin.hsvsaturation","returns the `saturation` channel of `@color` in the HSV space")},{name:"hsvvalue",example:"hsvvalue(@color);",description:gs("less.builtin.hsvvalue","returns the `value` channel of `@color` in the HSV space")},{name:"red",example:"red(@color);",description:gs("less.builtin.red","returns the `red` channel of `@color`")},{name:"green",example:"green(@color);",description:gs("less.builtin.green","returns the `green` channel of `@color`")},{name:"blue",example:"blue(@color);",description:gs("less.builtin.blue","returns the `blue` channel of `@color`")},{name:"alpha",example:"alpha(@color);",description:gs("less.builtin.alpha","returns the `alpha` channel of `@color`")},{name:"luma",example:"luma(@color);",description:gs("less.builtin.luma","returns the `luma` value (perceptual brightness) of `@color`")},{name:"saturate",example:"saturate(@color, 10%);",description:gs("less.builtin.saturate","return `@color` 10% points more saturated")},{name:"desaturate",example:"desaturate(@color, 10%);",description:gs("less.builtin.desaturate","return `@color` 10% points less saturated")},{name:"lighten",example:"lighten(@color, 10%);",description:gs("less.builtin.lighten","return `@color` 10% points lighter")},{name:"darken",example:"darken(@color, 10%);",description:gs("less.builtin.darken","return `@color` 10% points darker")},{name:"fadein",example:"fadein(@color, 10%);",description:gs("less.builtin.fadein","return `@color` 10% points less transparent")},{name:"fadeout",example:"fadeout(@color, 10%);",description:gs("less.builtin.fadeout","return `@color` 10% points more transparent")},{name:"fade",example:"fade(@color, 50%);",description:gs("less.builtin.fade","return `@color` with 50% transparency")},{name:"spin",example:"spin(@color, 10);",description:gs("less.builtin.spin","return `@color` with a 10 degree larger in hue")},{name:"mix",example:"mix(@color1, @color2, [@weight: 50%]);",description:gs("less.builtin.mix","return a mix of `@color1` and `@color2`")},{name:"greyscale",example:"greyscale(@color);",description:gs("less.builtin.greyscale","returns a grey, 100% desaturated color")},{name:"contrast",example:"contrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]);",description:gs("less.builtin.contrast","return `@darkcolor` if `@color1 is> 43% luma` otherwise return `@lightcolor`, see notes")},{name:"multiply",example:"multiply(@color1, @color2);"},{name:"screen",example:"screen(@color1, @color2);"},{name:"overlay",example:"overlay(@color1, @color2);"},{name:"softlight",example:"softlight(@color1, @color2);"},{name:"hardlight",example:"hardlight(@color1, @color2);"},{name:"difference",example:"difference(@color1, @color2);"},{name:"exclusion",example:"exclusion(@color1, @color2);"},{name:"average",example:"average(@color1, @color2);"},{name:"negation",example:"negation(@color1, @color2);"}],t}(Kr);function ys(e,t,n,i,r,o){return{configure:o.configure.bind(o),doValidation:o.doValidation.bind(o),parseStylesheet:e.parseStylesheet.bind(e),doComplete:t.doComplete.bind(t),setCompletionParticipants:t.setCompletionParticipants.bind(t),doHover:n.doHover.bind(n),findDefinition:i.findDefinition.bind(i),findReferences:i.findReferences.bind(i),findDocumentHighlights:i.findDocumentHighlights.bind(i),findDocumentSymbols:i.findDocumentSymbols.bind(i),doCodeActions:r.doCodeActions.bind(r),findColorSymbols:function(e,t){return i.findDocumentColors(e,t).map(function(e){return e.range})},findDocumentColors:i.findDocumentColors.bind(i),getColorPresentations:i.getColorPresentations.bind(i),doRename:i.doRename.bind(i)}}var vs=monaco.Promise,ws=function(){function e(e,t){switch(this._ctx=e,this._languageSettings=t.languageSettings,this._languageId=t.languageId,this._languageId){case"css":this._languageService=ys(new Tr,new Kr,new so,new lo,new xo,new Fo);break;case"less":this._languageService=ys(new ps,new bs,new so,new lo,new xo,new Fo);break;case"scss":this._languageService=ys(new Zo,new ns,new so,new lo,new xo,new Fo);break;default:throw new Error("Invalid language id: "+this._languageId)}this._languageService.configure(this._languageSettings)}return e.prototype.doValidation=function(e){var t=this._getTextDocument(e);if(t){var n=this._languageService.parseStylesheet(t),i=this._languageService.doValidation(t,n);return vs.as(i)}return vs.as([])},e.prototype.doComplete=function(e,t){var n=this._getTextDocument(e),i=this._languageService.parseStylesheet(n),r=this._languageService.doComplete(n,t,i);return vs.as(r)},e.prototype.doHover=function(e,t){var n=this._getTextDocument(e),i=this._languageService.parseStylesheet(n),r=this._languageService.doHover(n,t,i);return vs.as(r)},e.prototype.findDefinition=function(e,t){var n=this._getTextDocument(e),i=this._languageService.parseStylesheet(n),r=this._languageService.findDefinition(n,t,i);return vs.as(r)},e.prototype.findReferences=function(e,t){var n=this._getTextDocument(e),i=this._languageService.parseStylesheet(n),r=this._languageService.findReferences(n,t,i);return vs.as(r)},e.prototype.findDocumentHighlights=function(e,t){var n=this._getTextDocument(e),i=this._languageService.parseStylesheet(n),r=this._languageService.findDocumentHighlights(n,t,i);return vs.as(r)},e.prototype.findDocumentSymbols=function(e){var t=this._getTextDocument(e),n=this._languageService.parseStylesheet(t),i=this._languageService.findDocumentSymbols(t,n);return vs.as(i)},e.prototype.doCodeActions=function(e,t,n){var i=this._getTextDocument(e),r=this._languageService.parseStylesheet(i),o=this._languageService.doCodeActions(i,t,n,r);return vs.as(o)},e.prototype.findDocumentColors=function(e){var t=this._getTextDocument(e),n=this._languageService.parseStylesheet(t),i=this._languageService.findDocumentColors(t,n);return vs.as(i)},e.prototype.getColorPresentations=function(e,t,n){var i=this._getTextDocument(e),r=this._languageService.parseStylesheet(i),o=this._languageService.getColorPresentations(i,r,t,n);return vs.as(o)},e.prototype.doRename=function(e,t,n){var i=this._getTextDocument(e),r=this._languageService.parseStylesheet(i),o=this._languageService.doRename(i,t,n,r);return vs.as(o)},e.prototype._getTextDocument=function(e){for(var t=0,n=this._ctx.getMirrorModels();t<n.length;t++){var i=n[t];if(i.uri.toString()===e)return Tt.create(e,this._languageId,i.version,i.getValue())}return null},e}();self.onmessage=function(){ht(function(e,t){return new ws(e,t)})}},function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=5}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,